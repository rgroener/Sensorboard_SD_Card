   1               		.file	"AVR8.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	glcd_init
  12               	glcd_init:
  13               	.LFB7:
  14               		.file 1 "glcd/devices/AVR8.c"
   1:glcd/devices/AVR8.c **** /**
   2:glcd/devices/AVR8.c ****    \file AVR8.c
   3:glcd/devices/AVR8.c ****    \brief Functions relating to Atmel AVR 8-bit AVRs.
   4:glcd/devices/AVR8.c ****           For use with GNU toolchain
   5:glcd/devices/AVR8.c ****    \author Andy Gock
   6:glcd/devices/AVR8.c **** 
   7:glcd/devices/AVR8.c ****  */ 
   8:glcd/devices/AVR8.c **** 
   9:glcd/devices/AVR8.c **** /*
  10:glcd/devices/AVR8.c **** 	Copyright (c) 2012, Andy Gock
  11:glcd/devices/AVR8.c **** 
  12:glcd/devices/AVR8.c **** 	All rights reserved.
  13:glcd/devices/AVR8.c **** 
  14:glcd/devices/AVR8.c **** 	Redistribution and use in source and binary forms, with or without
  15:glcd/devices/AVR8.c **** 	modification, are permitted provided that the following conditions are met:
  16:glcd/devices/AVR8.c **** 		* Redistributions of source code must retain the above copyright
  17:glcd/devices/AVR8.c **** 		  notice, this list of conditions and the following disclaimer.
  18:glcd/devices/AVR8.c **** 		* Redistributions in binary form must reproduce the above copyright
  19:glcd/devices/AVR8.c **** 		  notice, this list of conditions and the following disclaimer in the
  20:glcd/devices/AVR8.c **** 		  documentation and/or other materials provided with the distribution.
  21:glcd/devices/AVR8.c **** 		* Neither the name of Andy Gock nor the
  22:glcd/devices/AVR8.c **** 		  names of its contributors may be used to endorse or promote products
  23:glcd/devices/AVR8.c **** 		  derived from this software without specific prior written permission.
  24:glcd/devices/AVR8.c **** 
  25:glcd/devices/AVR8.c **** 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  26:glcd/devices/AVR8.c **** 	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  27:glcd/devices/AVR8.c **** 	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:glcd/devices/AVR8.c **** 	DISCLAIMED. IN NO EVENT SHALL ANDY GOCK BE LIABLE FOR ANY
  29:glcd/devices/AVR8.c **** 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  30:glcd/devices/AVR8.c **** 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  31:glcd/devices/AVR8.c **** 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:glcd/devices/AVR8.c **** 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:glcd/devices/AVR8.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  34:glcd/devices/AVR8.c **** 	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:glcd/devices/AVR8.c **** */
  36:glcd/devices/AVR8.c **** 
  37:glcd/devices/AVR8.c **** #include "../glcd.h"
  38:glcd/devices/AVR8.c **** 
  39:glcd/devices/AVR8.c **** #if defined(GLCD_DEVICE_AVR8)
  40:glcd/devices/AVR8.c **** 
  41:glcd/devices/AVR8.c **** void glcd_init(void)
  42:glcd/devices/AVR8.c **** {
  15               		.loc 1 42 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  43:glcd/devices/AVR8.c **** 	
  44:glcd/devices/AVR8.c **** #if defined(GLCD_CONTROLLER_PCD8544)
  45:glcd/devices/AVR8.c **** 
  46:glcd/devices/AVR8.c **** 	/* Set pin directions */
  47:glcd/devices/AVR8.c **** 	
  48:glcd/devices/AVR8.c **** 	/*
  49:glcd/devices/AVR8.c **** 	 * Set up SPI for AVR8
  50:glcd/devices/AVR8.c **** 	 * Note: AVR's SS pin must be set to output, regardless of whether we
  51:glcd/devices/AVR8.c **** 	 * actually use it. This is a requirement of SPI mster mode.
  52:glcd/devices/AVR8.c **** 	 */
  53:glcd/devices/AVR8.c **** 	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
  21               		.loc 1 53 2 view .LVU1
  22 0000 209A      		sbi 0x4,0
  54:glcd/devices/AVR8.c **** 	
  55:glcd/devices/AVR8.c **** 	/*
  56:glcd/devices/AVR8.c **** 	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
  57:glcd/devices/AVR8.c **** 	 *  Must be done even if native SS pin not used
  58:glcd/devices/AVR8.c **** 	 */
  59:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
  23               		.loc 1 59 2 view .LVU2
  24 0002 239A      		sbi 0x4,3
  60:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
  25               		.loc 1 60 2 view .LVU3
  26 0004 209A      		sbi 0x4,0
  61:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
  27               		.loc 1 61 2 view .LVU4
  28 0006 259A      		sbi 0x4,5
  62:glcd/devices/AVR8.c **** 		
  63:glcd/devices/AVR8.c **** 	/* Set SS, DC and RST pins to output */
  64:glcd/devices/AVR8.c **** 	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
  29               		.loc 1 64 2 view .LVU5
  30 0008 209A      		sbi 0x4,0
  65:glcd/devices/AVR8.c **** 	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
  31               		.loc 1 65 2 view .LVU6
  32 000a 219A      		sbi 0x4,1
  66:glcd/devices/AVR8.c **** 	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
  33               		.loc 1 66 2 view .LVU7
  34 000c 579A      		sbi 0xa,7
  67:glcd/devices/AVR8.c **** 	
  68:glcd/devices/AVR8.c **** 	/* Deselect LCD */
  69:glcd/devices/AVR8.c **** 	GLCD_DESELECT();
  35               		.loc 1 69 2 view .LVU8
  36 000e 289A      		sbi 0x5,0
  70:glcd/devices/AVR8.c **** 
  71:glcd/devices/AVR8.c **** 	/*
  72:glcd/devices/AVR8.c **** 	 * Max allowed SPI clock is 4 MHz from datasheet.
  73:glcd/devices/AVR8.c **** 	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
  74:glcd/devices/AVR8.c **** 	 */
  75:glcd/devices/AVR8.c **** 	SPCR = (1<<SPE)|(1<<MSTR);
  37               		.loc 1 75 2 view .LVU9
  38               		.loc 1 75 7 is_stmt 0 view .LVU10
  39 0010 80E5      		ldi r24,lo8(80)
  40 0012 8CBD      		out 0x2c,r24
  76:glcd/devices/AVR8.c **** 	SPSR = 0;
  41               		.loc 1 76 2 is_stmt 1 view .LVU11
  42               		.loc 1 76 7 is_stmt 0 view .LVU12
  43 0014 1DBC      		out 0x2d,__zero_reg__
  77:glcd/devices/AVR8.c **** 	
  78:glcd/devices/AVR8.c **** 	glcd_PCD8544_init();
  44               		.loc 1 78 2 is_stmt 1 view .LVU13
  45 0016 0E94 0000 		call glcd_PCD8544_init
  46               	.LVL0:
  79:glcd/devices/AVR8.c **** 
  80:glcd/devices/AVR8.c **** 	/* Select screen buffer */
  81:glcd/devices/AVR8.c **** 	glcd_select_screen(glcd_buffer,&glcd_bbox);
  47               		.loc 1 81 2 view .LVU14
  48 001a 60E0      		ldi r22,lo8(glcd_bbox)
  49 001c 70E0      		ldi r23,hi8(glcd_bbox)
  50 001e 80E0      		ldi r24,lo8(glcd_buffer)
  51 0020 90E0      		ldi r25,hi8(glcd_buffer)
  52 0022 0E94 0000 		call glcd_select_screen
  53               	.LVL1:
  82:glcd/devices/AVR8.c **** 	
  83:glcd/devices/AVR8.c **** 	/* Clear screen, we are now ready to go */
  84:glcd/devices/AVR8.c **** 	glcd_clear();
  54               		.loc 1 84 2 view .LVU15
  55 0026 0C94 0000 		jmp glcd_clear
  56               	.LVL2:
  57               		.cfi_endproc
  58               	.LFE7:
  60               	.global	glcd_spi_write
  62               	glcd_spi_write:
  63               	.LVL3:
  64               	.LFB8:
  85:glcd/devices/AVR8.c **** 
  86:glcd/devices/AVR8.c **** #elif defined(GLCD_CONTROLLER_ST7565R)
  87:glcd/devices/AVR8.c **** 
  88:glcd/devices/AVR8.c **** 	/* Set up GPIO directions */
  89:glcd/devices/AVR8.c **** 	
  90:glcd/devices/AVR8.c **** 	/*
  91:glcd/devices/AVR8.c **** 	 * Set up SPI for AVR8
  92:glcd/devices/AVR8.c **** 	 * Note: AVR's SS pin must be set to output, regardless of whether we
  93:glcd/devices/AVR8.c **** 	 * actually use it. This is a requirement of SPI mster mode.
  94:glcd/devices/AVR8.c **** 	 */
  95:glcd/devices/AVR8.c **** 	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
  96:glcd/devices/AVR8.c **** 	
  97:glcd/devices/AVR8.c **** 	/* Set SCK and MOSI as output */
  98:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
  99:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
 100:glcd/devices/AVR8.c **** 	
 101:glcd/devices/AVR8.c **** 	/*
 102:glcd/devices/AVR8.c **** 	 * Set MISO as input with pullup. This needs to be set for
 103:glcd/devices/AVR8.c **** 	 * SPI to work, even though we never use or read it.
 104:glcd/devices/AVR8.c **** 	 */
 105:glcd/devices/AVR8.c **** 	cbi(DDR(CONTROLLER_MISO_PORT),CONTROLLER_MISO_PIN); // B3 MISO as input
 106:glcd/devices/AVR8.c **** 	sbi(CONTROLLER_MISO_PORT,CONTROLLER_MISO_PIN);
 107:glcd/devices/AVR8.c **** 	
 108:glcd/devices/AVR8.c **** 	/* Set pin to controller SS as output */
 109:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN); // A5
 110:glcd/devices/AVR8.c **** 
 111:glcd/devices/AVR8.c **** 	/* Set LCD A0 pin as output */
 112:glcd/devices/AVR8.c **** 	sbi(DDR(CONTROLLER_A0_PORT),CONTROLLER_A0_PIN); // A6
 113:glcd/devices/AVR8.c **** 		
 114:glcd/devices/AVR8.c **** 	/* Init SS pin high (i.e LCD deselected) */
 115:glcd/devices/AVR8.c **** 	sbi(CONTROLLER_SS_PORT,CONTROLLER_SS_PIN);
 116:glcd/devices/AVR8.c **** 
 117:glcd/devices/AVR8.c **** 	/* Deselect LCD */
 118:glcd/devices/AVR8.c **** 	GLCD_DESELECT();
 119:glcd/devices/AVR8.c **** 
 120:glcd/devices/AVR8.c **** 	/* MSB first, double speed, SPI mode 0 */
 121:glcd/devices/AVR8.c **** 	SPCR = (1<<SPE) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA);	
 122:glcd/devices/AVR8.c **** 	sbi(SPSR,SPI2X);
 123:glcd/devices/AVR8.c **** 	
 124:glcd/devices/AVR8.c **** 	/* Enable interrupts */
 125:glcd/devices/AVR8.c **** 	sei();
 126:glcd/devices/AVR8.c **** 		
 127:glcd/devices/AVR8.c **** 	delay_ms(30); /* Example in datasheet does this (20ms) */
 128:glcd/devices/AVR8.c **** 
 129:glcd/devices/AVR8.c **** 	glcd_ST7565R_init();
 130:glcd/devices/AVR8.c **** 
 131:glcd/devices/AVR8.c **** 	glcd_all_on();
 132:glcd/devices/AVR8.c **** 	
 133:glcd/devices/AVR8.c **** 	delay_ms(500);
 134:glcd/devices/AVR8.c **** 	glcd_normal();
 135:glcd/devices/AVR8.c **** 
 136:glcd/devices/AVR8.c **** 	glcd_set_start_line(0);
 137:glcd/devices/AVR8.c **** 	glcd_clear_now();
 138:glcd/devices/AVR8.c **** 			
 139:glcd/devices/AVR8.c **** 	glcd_select_screen(glcd_buffer,&glcd_bbox);
 140:glcd/devices/AVR8.c **** 	
 141:glcd/devices/AVR8.c **** 	glcd_clear();	
 142:glcd/devices/AVR8.c **** 	
 143:glcd/devices/AVR8.c **** #else
 144:glcd/devices/AVR8.c **** 	#error "Controller not supported"
 145:glcd/devices/AVR8.c **** #endif /* GLCD_CONTROLLER_* */
 146:glcd/devices/AVR8.c **** 	
 147:glcd/devices/AVR8.c **** }
 148:glcd/devices/AVR8.c **** 
 149:glcd/devices/AVR8.c **** void glcd_spi_write(uint8_t c)
 150:glcd/devices/AVR8.c **** {
  65               		.loc 1 150 1 view -0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 151:glcd/devices/AVR8.c **** 	GLCD_SELECT();
  71               		.loc 1 151 2 view .LVU17
  72 002a 2898      		cbi 0x5,0
 152:glcd/devices/AVR8.c **** 	SPDR = c;
  73               		.loc 1 152 2 view .LVU18
  74               		.loc 1 152 7 is_stmt 0 view .LVU19
  75 002c 8EBD      		out 0x2e,r24
 153:glcd/devices/AVR8.c **** 	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
  76               		.loc 1 153 2 is_stmt 1 view .LVU20
  77               	.L3:
  78               		.loc 1 153 28 discriminator 1 view .LVU21
  79               		.loc 1 153 7 is_stmt 0 discriminator 1 view .LVU22
  80 002e 0DB4      		in __tmp_reg__,0x2d
  81 0030 07FE      		sbrs __tmp_reg__,7
  82 0032 00C0      		rjmp .L3
 154:glcd/devices/AVR8.c **** 	GLCD_DESELECT();	
  83               		.loc 1 154 2 is_stmt 1 view .LVU23
  84 0034 289A      		sbi 0x5,0
  85               	/* epilogue start */
 155:glcd/devices/AVR8.c **** }
  86               		.loc 1 155 1 is_stmt 0 view .LVU24
  87 0036 0895      		ret
  88               		.cfi_endproc
  89               	.LFE8:
  91               	.global	glcd_reset
  93               	glcd_reset:
  94               	.LFB9:
 156:glcd/devices/AVR8.c **** 
 157:glcd/devices/AVR8.c **** void glcd_reset(void)
 158:glcd/devices/AVR8.c **** {
  95               		.loc 1 158 1 is_stmt 1 view -0
  96               		.cfi_startproc
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 0 */
 100               	.L__stack_usage = 0
 159:glcd/devices/AVR8.c **** 	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
 160:glcd/devices/AVR8.c **** 	GLCD_SELECT();
 101               		.loc 1 160 2 view .LVU26
 102 0038 2898      		cbi 0x5,0
 161:glcd/devices/AVR8.c **** 	GLCD_RESET_LOW();
 103               		.loc 1 161 2 view .LVU27
 104 003a 5F98      		cbi 0xb,7
 162:glcd/devices/AVR8.c **** 	delay_ms(GLCD_RESET_TIME);
 105               		.loc 1 162 2 view .LVU28
 106               	.LVL4:
 107               	.LBB12:
 108               	.LBI12:
 109               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 110               		.loc 2 166 1 view .LVU29
 111               	.LBB13:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 112               		.loc 2 168 2 view .LVU30
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 113               		.loc 2 190 2 view .LVU31
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 114               		.loc 2 191 2 view .LVU32
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 115               		.loc 2 192 2 view .LVU33
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 116               		.loc 2 194 7 view .LVU34
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 117               		.loc 2 207 3 view .LVU35
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 118               		.loc 2 208 2 view .LVU36
 119               	.LBB14:
 120               	.LBI14:
 121               		.file 3 "/usr/avr/include/util/delay_basic.h"
   1:/usr/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/avr/include/util/delay_basic.h **** 
   5:/usr/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/util/delay_basic.h **** 
   8:/usr/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/util/delay_basic.h **** 
  11:/usr/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/avr/include/util/delay_basic.h **** 
  16:/usr/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/util/delay_basic.h **** 
  20:/usr/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/util/delay_basic.h **** 
  32:/usr/avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2453 2014-10-19 08:18:11Z saaadhu $ */
  33:/usr/avr/include/util/delay_basic.h **** 
  34:/usr/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/avr/include/util/delay_basic.h **** 
  37:/usr/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/avr/include/util/delay_basic.h **** 
  39:/usr/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/usr/avr/include/util/delay_basic.h **** #endif
  43:/usr/avr/include/util/delay_basic.h **** 
  44:/usr/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/avr/include/util/delay_basic.h ****     \code
  47:/usr/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/avr/include/util/delay_basic.h **** 
  50:/usr/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/avr/include/util/delay_basic.h **** 
  58:/usr/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/avr/include/util/delay_basic.h **** 
  65:/usr/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/avr/include/util/delay_basic.h **** 
  67:/usr/avr/include/util/delay_basic.h **** */
  68:/usr/avr/include/util/delay_basic.h **** 
  69:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/avr/include/util/delay_basic.h **** 
  71:/usr/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/avr/include/util/delay_basic.h ****     register.
  76:/usr/avr/include/util/delay_basic.h **** 
  77:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/avr/include/util/delay_basic.h **** */
  80:/usr/avr/include/util/delay_basic.h **** void
  81:/usr/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/avr/include/util/delay_basic.h **** {
  83:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/avr/include/util/delay_basic.h **** 	);
  89:/usr/avr/include/util/delay_basic.h **** }
  90:/usr/avr/include/util/delay_basic.h **** 
  91:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/avr/include/util/delay_basic.h **** 
  93:/usr/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/avr/include/util/delay_basic.h **** 
  99:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/avr/include/util/delay_basic.h ****  */
 102:/usr/avr/include/util/delay_basic.h **** void
 103:/usr/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 122               		.loc 3 103 1 view .LVU37
 123               	.LBB15:
 104:/usr/avr/include/util/delay_basic.h **** {
 105:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
 124               		.loc 3 105 2 view .LVU38
 125 003c 80ED      		ldi r24,lo8(-48)
 126 003e 97E0      		ldi r25,lo8(7)
 127               	/* #APP */
 128               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 129 0040 0197      		1: sbiw r24,1
 130 0042 01F4      		brne 1b
 131               	 ;  0 "" 2
 132               	.LVL5:
 133               		.loc 3 105 2 is_stmt 0 view .LVU39
 134               	/* #NOAPP */
 135               	.LBE15:
 136               	.LBE14:
 137               	.LBE13:
 138               	.LBE12:
 163:glcd/devices/AVR8.c **** 	GLCD_RESET_HIGH();
 139               		.loc 1 163 2 is_stmt 1 view .LVU40
 140 0044 5F9A      		sbi 0xb,7
 164:glcd/devices/AVR8.c **** 	GLCD_DESELECT();	
 141               		.loc 1 164 2 view .LVU41
 142 0046 289A      		sbi 0x5,0
 143               	/* epilogue start */
 165:glcd/devices/AVR8.c **** }
 144               		.loc 1 165 1 is_stmt 0 view .LVU42
 145 0048 0895      		ret
 146               		.cfi_endproc
 147               	.LFE9:
 149               	.Letext0:
 150               		.file 4 "/usr/avr/include/stdint.h"
 151               		.file 5 "glcd/devices/../glcd.h"
 152               		.file 6 "glcd/devices/../unit_tests.h"
 153               		.file 7 "glcd/devices/../controllers/PCD8544.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 AVR8.c
     /tmp/ccmHyNGJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmHyNGJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmHyNGJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmHyNGJ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmHyNGJ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmHyNGJ.s:12     .text:0000000000000000 glcd_init
     /tmp/ccmHyNGJ.s:62     .text:000000000000002a glcd_spi_write
     /tmp/ccmHyNGJ.s:93     .text:0000000000000038 glcd_reset

UNDEFINED SYMBOLS
glcd_PCD8544_init
glcd_bbox
glcd_buffer
glcd_select_screen
glcd_clear
