   1               		.file	"unit_tests.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	glcd_test_circles
  12               	glcd_test_circles:
  13               	.LFB12:
  14               		.file 1 "glcd/unit_tests.c"
   1:glcd/unit_tests.c **** /**
   2:glcd/unit_tests.c ****  * \file unit_tests.c
   3:glcd/unit_tests.c ****  * \brief Various test functions to demonstrate features of the library
   4:glcd/unit_tests.c ****  * \author Andy Gock
   5:glcd/unit_tests.c ****  */
   6:glcd/unit_tests.c **** 
   7:glcd/unit_tests.c **** /*
   8:glcd/unit_tests.c **** 	Copyright (c) 2012, Andy Gock
   9:glcd/unit_tests.c **** 
  10:glcd/unit_tests.c **** 	All rights reserved.
  11:glcd/unit_tests.c **** 
  12:glcd/unit_tests.c **** 	Redistribution and use in source and binary forms, with or without
  13:glcd/unit_tests.c **** 	modification, are permitted provided that the following conditions are met:
  14:glcd/unit_tests.c **** 		* Redistributions of source code must retain the above copyright
  15:glcd/unit_tests.c **** 		  notice, this list of conditions and the following disclaimer.
  16:glcd/unit_tests.c **** 		* Redistributions in binary form must reproduce the above copyright
  17:glcd/unit_tests.c **** 		  notice, this list of conditions and the following disclaimer in the
  18:glcd/unit_tests.c **** 		  documentation and/or other materials provided with the distribution.
  19:glcd/unit_tests.c **** 		* Neither the name of Andy Gock nor the
  20:glcd/unit_tests.c **** 		  names of its contributors may be used to endorse or promote products
  21:glcd/unit_tests.c **** 		  derived from this software without specific prior written permission.
  22:glcd/unit_tests.c **** 
  23:glcd/unit_tests.c **** 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:glcd/unit_tests.c **** 	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:glcd/unit_tests.c **** 	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:glcd/unit_tests.c **** 	DISCLAIMED. IN NO EVENT SHALL ANDY GOCK BE LIABLE FOR ANY
  27:glcd/unit_tests.c **** 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:glcd/unit_tests.c **** 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:glcd/unit_tests.c **** 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  30:glcd/unit_tests.c **** 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:glcd/unit_tests.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:glcd/unit_tests.c **** 	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:glcd/unit_tests.c **** */
  34:glcd/unit_tests.c **** 
  35:glcd/unit_tests.c **** #include <stdio.h>
  36:glcd/unit_tests.c **** #include <stdlib.h>
  37:glcd/unit_tests.c **** #include "glcd.h"
  38:glcd/unit_tests.c **** #include "unit_tests.h"
  39:glcd/unit_tests.c **** 
  40:glcd/unit_tests.c **** /** Fonts */
  41:glcd/unit_tests.c **** #include "fonts/font5x7.h"
  42:glcd/unit_tests.c **** //#include "fonts/Liberation_Sans11x14_Numbers.h"
  43:glcd/unit_tests.c **** #include "fonts/Liberation_Sans15x21_Numbers.h"
  44:glcd/unit_tests.c **** //#include "fonts/Liberation_Sans17x17_Alpha.h"
  45:glcd/unit_tests.c **** //#include "fonts/Liberation_Sans27x36_Numbers.h"
  46:glcd/unit_tests.c **** //#include "fonts/Bebas_Neue20x36_Bold_Numbers.h"
  47:glcd/unit_tests.c **** 
  48:glcd/unit_tests.c **** volatile uint8_t unit_test_return = 0;
  49:glcd/unit_tests.c **** 
  50:glcd/unit_tests.c **** /**
  51:glcd/unit_tests.c ****  *  Return from test procedure. Global var \p unit_test_return is set to 1 elsewhere,
  52:glcd/unit_tests.c ****  *  to signal function to return.
  53:glcd/unit_tests.c ****  */
  54:glcd/unit_tests.c **** #define DEMO_RETURN() if (unit_test_return) { unit_test_return = 0; return; }
  55:glcd/unit_tests.c **** 
  56:glcd/unit_tests.c **** #if defined(GLCD_UNIT_TEST_BITMAP_ENABLE)
  57:glcd/unit_tests.c **** 	/* Open Source logo -- Size: 128x64 */
  58:glcd/unit_tests.c **** 	#if defined(GLCD_DEVICE_AVR8)
  59:glcd/unit_tests.c **** 		const unsigned char bmp_oslogo[] PROGMEM = {
  60:glcd/unit_tests.c **** 	#else
  61:glcd/unit_tests.c **** 		const unsigned char bmp_oslogo[] = {	
  62:glcd/unit_tests.c **** 	#endif /* GLCD_DEVICE_AVR8 */
  63:glcd/unit_tests.c **** 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
  64:glcd/unit_tests.c **** 	};
  65:glcd/unit_tests.c **** #endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */
  66:glcd/unit_tests.c **** 
  67:glcd/unit_tests.c **** void glcd_test_circles(void)
  68:glcd/unit_tests.c **** {
  15               		.loc 1 68 1 view -0
  16               		.cfi_startproc
  17 0000 6F92      		push r6
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 6, -2
  21 0002 7F92      		push r7
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 7, -3
  25 0004 8F92      		push r8
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28               		.cfi_offset 8, -4
  29 0006 9F92      		push r9
  30               	.LCFI3:
  31               		.cfi_def_cfa_offset 6
  32               		.cfi_offset 9, -5
  33 0008 AF92      		push r10
  34               	.LCFI4:
  35               		.cfi_def_cfa_offset 7
  36               		.cfi_offset 10, -6
  37 000a BF92      		push r11
  38               	.LCFI5:
  39               		.cfi_def_cfa_offset 8
  40               		.cfi_offset 11, -7
  41 000c CF92      		push r12
  42               	.LCFI6:
  43               		.cfi_def_cfa_offset 9
  44               		.cfi_offset 12, -8
  45 000e DF92      		push r13
  46               	.LCFI7:
  47               		.cfi_def_cfa_offset 10
  48               		.cfi_offset 13, -9
  49 0010 EF92      		push r14
  50               	.LCFI8:
  51               		.cfi_def_cfa_offset 11
  52               		.cfi_offset 14, -10
  53 0012 FF92      		push r15
  54               	.LCFI9:
  55               		.cfi_def_cfa_offset 12
  56               		.cfi_offset 15, -11
  57 0014 0F93      		push r16
  58               	.LCFI10:
  59               		.cfi_def_cfa_offset 13
  60               		.cfi_offset 16, -12
  61 0016 1F93      		push r17
  62               	.LCFI11:
  63               		.cfi_def_cfa_offset 14
  64               		.cfi_offset 17, -13
  65 0018 CF93      		push r28
  66               	.LCFI12:
  67               		.cfi_def_cfa_offset 15
  68               		.cfi_offset 28, -14
  69 001a DF93      		push r29
  70               	.LCFI13:
  71               		.cfi_def_cfa_offset 16
  72               		.cfi_offset 29, -15
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 14 */
  76               	.L__stack_usage = 14
  77               	.LBB80:
  69:glcd/unit_tests.c **** 	uint8_t x,y,radius;
  70:glcd/unit_tests.c **** 
  71:glcd/unit_tests.c **** 	while (1) {
  72:glcd/unit_tests.c **** 		uint8_t i;
  73:glcd/unit_tests.c **** 		
  74:glcd/unit_tests.c **** 		glcd_clear();
  75:glcd/unit_tests.c **** 
  76:glcd/unit_tests.c **** 		// generate random(ish) position on display
  77:glcd/unit_tests.c **** 		x = rand() % GLCD_LCD_WIDTH;
  78               		.loc 1 77 14 is_stmt 0 view .LVU1
  79 001c 04E5      		ldi r16,lo8(84)
  80 001e 10E0      		ldi r17,0
  78:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
  81               		.loc 1 78 14 view .LVU2
  82 0020 80E3      		ldi r24,lo8(48)
  83 0022 E82E      		mov r14,r24
  84 0024 F12C      		mov r15,__zero_reg__
  79:glcd/unit_tests.c **** 		radius = rand() % 50;
  85               		.loc 1 79 19 view .LVU3
  86 0026 92E3      		ldi r25,lo8(50)
  87 0028 C92E      		mov r12,r25
  88 002a D12C      		mov r13,__zero_reg__
  89               	.LBB81:
  90               	.LBB82:
  91               	.LBB83:
  92               	.LBB84:
  93               		.file 2 "/usr/avr/include/util/delay_basic.h"
   1:/usr/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/avr/include/util/delay_basic.h **** 
   5:/usr/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/util/delay_basic.h **** 
   8:/usr/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/util/delay_basic.h **** 
  11:/usr/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/avr/include/util/delay_basic.h **** 
  16:/usr/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/util/delay_basic.h **** 
  20:/usr/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/util/delay_basic.h **** 
  32:/usr/avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2453 2014-10-19 08:18:11Z saaadhu $ */
  33:/usr/avr/include/util/delay_basic.h **** 
  34:/usr/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/avr/include/util/delay_basic.h **** 
  37:/usr/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/avr/include/util/delay_basic.h **** 
  39:/usr/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/usr/avr/include/util/delay_basic.h **** #endif
  43:/usr/avr/include/util/delay_basic.h **** 
  44:/usr/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/avr/include/util/delay_basic.h ****     \code
  47:/usr/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/avr/include/util/delay_basic.h **** 
  50:/usr/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/avr/include/util/delay_basic.h **** 
  58:/usr/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/avr/include/util/delay_basic.h **** 
  65:/usr/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/avr/include/util/delay_basic.h **** 
  67:/usr/avr/include/util/delay_basic.h **** */
  68:/usr/avr/include/util/delay_basic.h **** 
  69:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/avr/include/util/delay_basic.h **** 
  71:/usr/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/avr/include/util/delay_basic.h ****     register.
  76:/usr/avr/include/util/delay_basic.h **** 
  77:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/avr/include/util/delay_basic.h **** */
  80:/usr/avr/include/util/delay_basic.h **** void
  81:/usr/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/avr/include/util/delay_basic.h **** {
  83:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/avr/include/util/delay_basic.h **** 	);
  89:/usr/avr/include/util/delay_basic.h **** }
  90:/usr/avr/include/util/delay_basic.h **** 
  91:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/avr/include/util/delay_basic.h **** 
  93:/usr/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/avr/include/util/delay_basic.h **** 
  99:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/avr/include/util/delay_basic.h ****  */
 102:/usr/avr/include/util/delay_basic.h **** void
 103:/usr/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/avr/include/util/delay_basic.h **** {
 105:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  94               		.loc 2 105 2 view .LVU4
  95 002c 20EA      		ldi r18,lo8(-96)
  96 002e A22E      		mov r10,r18
  97 0030 2FE0      		ldi r18,lo8(15)
  98 0032 B22E      		mov r11,r18
  99               	.LBE84:
 100               	.LBE83:
 101               	.LBE82:
 102               	.LBE81:
 103               	.LBB88:
 104               	.LBB89:
 105               	.LBB90:
 106               	.LBB91:
 107 0034 30ED      		ldi r19,lo8(-48)
 108 0036 832E      		mov r8,r19
 109 0038 37E0      		ldi r19,lo8(7)
 110 003a 932E      		mov r9,r19
 111               	.L4:
 112               	.LBE91:
 113               	.LBE90:
 114               	.LBE89:
 115               	.LBE88:
 116               	.LBE80:
  69:glcd/unit_tests.c **** 
 117               		.loc 1 69 2 is_stmt 1 view .LVU5
  71:glcd/unit_tests.c **** 		uint8_t i;
 118               		.loc 1 71 2 view .LVU6
 119               	.LBB97:
  72:glcd/unit_tests.c **** 		
 120               		.loc 1 72 3 view .LVU7
  74:glcd/unit_tests.c **** 
 121               		.loc 1 74 3 view .LVU8
 122 003c 0E94 0000 		call glcd_clear
 123               	.LVL0:
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 124               		.loc 1 77 3 view .LVU9
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 125               		.loc 1 77 7 is_stmt 0 view .LVU10
 126 0040 0E94 0000 		call rand
 127               	.LVL1:
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 128               		.loc 1 77 14 view .LVU11
 129 0044 B801      		movw r22,r16
 130 0046 0E94 0000 		call __divmodhi4
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 131               		.loc 1 77 5 view .LVU12
 132 004a 782E      		mov r7,r24
 133               	.LVL2:
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 134               		.loc 1 78 3 is_stmt 1 view .LVU13
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 135               		.loc 1 78 7 is_stmt 0 view .LVU14
 136 004c 0E94 0000 		call rand
 137               	.LVL3:
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 138               		.loc 1 78 14 view .LVU15
 139 0050 B701      		movw r22,r14
 140 0052 0E94 0000 		call __divmodhi4
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 141               		.loc 1 78 5 view .LVU16
 142 0056 682E      		mov r6,r24
 143               	.LVL4:
 144               		.loc 1 79 3 is_stmt 1 view .LVU17
 145               		.loc 1 79 12 is_stmt 0 view .LVU18
 146 0058 0E94 0000 		call rand
 147               	.LVL5:
 148               		.loc 1 79 19 view .LVU19
 149 005c B601      		movw r22,r12
 150 005e 0E94 0000 		call __divmodhi4
 151               		.loc 1 79 10 view .LVU20
 152 0062 D82F      		mov r29,r24
 153               	.LVL6:
  80:glcd/unit_tests.c **** 
  81:glcd/unit_tests.c **** 		//x = 70; y=25; radius=50; // for debugging
  82:glcd/unit_tests.c **** 
  83:glcd/unit_tests.c **** 		// fill circle with black
  84:glcd/unit_tests.c **** 		
  85:glcd/unit_tests.c **** 		for (i=0; i<=radius; i++) {
 154               		.loc 1 85 3 is_stmt 1 view .LVU21
 155               		.loc 1 85 9 is_stmt 0 view .LVU22
 156 0064 C0E0      		ldi r28,0
 157               	.LVL7:
 158               	.L2:
  86:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,BLACK);
 159               		.loc 1 86 4 is_stmt 1 discriminator 3 view .LVU23
 160 0066 21E0      		ldi r18,lo8(1)
 161 0068 4C2F      		mov r20,r28
 162 006a 662D      		mov r22,r6
 163 006c 872D      		mov r24,r7
 164 006e 0E94 0000 		call glcd_fill_circle
 165               	.LVL8:
  87:glcd/unit_tests.c **** 			glcd_write();
 166               		.loc 1 87 4 discriminator 3 view .LVU24
 167 0072 0E94 0000 		call glcd_write
 168               	.LVL9:
  88:glcd/unit_tests.c **** 			delay_ms(2);
 169               		.loc 1 88 4 discriminator 3 view .LVU25
 170               	.LBB95:
 171               	.LBI81:
 172               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 173               		.loc 3 166 1 discriminator 3 view .LVU26
 174               	.LBB87:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 175               		.loc 3 168 2 discriminator 3 view .LVU27
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 176               		.loc 3 190 2 discriminator 3 view .LVU28
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 177               		.loc 3 191 2 discriminator 3 view .LVU29
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 178               		.loc 3 192 2 discriminator 3 view .LVU30
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 179               		.loc 3 194 7 discriminator 3 view .LVU31
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 180               		.loc 3 207 3 discriminator 3 view .LVU32
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 181               		.loc 3 208 2 discriminator 3 view .LVU33
 182               	.LBB86:
 183               	.LBI83:
 103:/usr/avr/include/util/delay_basic.h **** {
 184               		.loc 2 103 1 discriminator 3 view .LVU34
 185               	.LBB85:
 186               		.loc 2 105 2 discriminator 3 view .LVU35
 187 0076 C501      		movw r24,r10
 188               	/* #APP */
 189               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 190 0078 0197      		1: sbiw r24,1
 191 007a 01F4      		brne 1b
 192               	 ;  0 "" 2
 193               	.LVL10:
 194               		.loc 2 105 2 is_stmt 0 discriminator 3 view .LVU36
 195               	/* #NOAPP */
 196               	.LBE85:
 197               	.LBE86:
 198               	.LBE87:
 199               	.LBE95:
  85:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,BLACK);
 200               		.loc 1 85 25 discriminator 3 view .LVU37
 201 007c CF5F      		subi r28,lo8(-(1))
 202               	.LVL11:
  85:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,BLACK);
 203               		.loc 1 85 3 discriminator 3 view .LVU38
 204 007e DC17      		cp r29,r28
 205 0080 00F4      		brsh .L2
  89:glcd/unit_tests.c **** 		}
  90:glcd/unit_tests.c **** 
  91:glcd/unit_tests.c **** 		// fill the same circle above but with white
  92:glcd/unit_tests.c **** 		for (i=0; i<=radius; i++) {
 206               		.loc 1 92 9 view .LVU39
 207 0082 C0E0      		ldi r28,0
 208               	.LVL12:
 209               	.L3:
  93:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,WHITE);
 210               		.loc 1 93 4 is_stmt 1 discriminator 3 view .LVU40
 211 0084 20E0      		ldi r18,0
 212 0086 4C2F      		mov r20,r28
 213 0088 662D      		mov r22,r6
 214 008a 872D      		mov r24,r7
 215 008c 0E94 0000 		call glcd_fill_circle
 216               	.LVL13:
  94:glcd/unit_tests.c **** 			glcd_write();
 217               		.loc 1 94 4 discriminator 3 view .LVU41
 218 0090 0E94 0000 		call glcd_write
 219               	.LVL14:
  95:glcd/unit_tests.c **** 			delay_ms(1);
 220               		.loc 1 95 4 discriminator 3 view .LVU42
 221               	.LBB96:
 222               	.LBI88:
 166:/usr/avr/include/util/delay.h **** {
 223               		.loc 3 166 1 discriminator 3 view .LVU43
 224               	.LBB94:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 225               		.loc 3 168 2 discriminator 3 view .LVU44
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 226               		.loc 3 190 2 discriminator 3 view .LVU45
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 227               		.loc 3 191 2 discriminator 3 view .LVU46
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 228               		.loc 3 192 2 discriminator 3 view .LVU47
 194:/usr/avr/include/util/delay.h **** 	{
 229               		.loc 3 194 7 discriminator 3 view .LVU48
 207:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 230               		.loc 3 207 3 discriminator 3 view .LVU49
 231               		.loc 3 208 2 discriminator 3 view .LVU50
 232               	.LBB93:
 233               	.LBI90:
 103:/usr/avr/include/util/delay_basic.h **** {
 234               		.loc 2 103 1 discriminator 3 view .LVU51
 235               	.LBB92:
 236               		.loc 2 105 2 discriminator 3 view .LVU52
 237 0094 C401      		movw r24,r8
 238               	/* #APP */
 239               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 240 0096 0197      		1: sbiw r24,1
 241 0098 01F4      		brne 1b
 242               	 ;  0 "" 2
 243               	.LVL15:
 244               		.loc 2 105 2 is_stmt 0 discriminator 3 view .LVU53
 245               	/* #NOAPP */
 246               	.LBE92:
 247               	.LBE93:
 248               	.LBE94:
 249               	.LBE96:
  92:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,WHITE);
 250               		.loc 1 92 25 discriminator 3 view .LVU54
 251 009a CF5F      		subi r28,lo8(-(1))
 252               	.LVL16:
  92:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,WHITE);
 253               		.loc 1 92 3 discriminator 3 view .LVU55
 254 009c DC17      		cp r29,r28
 255 009e 00F4      		brsh .L3
  96:glcd/unit_tests.c **** 		}
  97:glcd/unit_tests.c **** 		DEMO_RETURN();
 256               		.loc 1 97 3 is_stmt 1 view .LVU56
 257 00a0 8091 0000 		lds r24,unit_test_return
 258 00a4 8823      		tst r24
 259 00a6 01F0      		breq .L4
 260               		.loc 1 97 3 discriminator 1 view .LVU57
 261 00a8 1092 0000 		sts unit_test_return,__zero_reg__
 262               		.loc 1 97 3 discriminator 1 view .LVU58
 263               	/* epilogue start */
 264               	.LBE97:
  98:glcd/unit_tests.c **** 	}
  99:glcd/unit_tests.c **** }
 265               		.loc 1 99 1 is_stmt 0 discriminator 1 view .LVU59
 266 00ac DF91      		pop r29
 267               		.loc 1 99 1 discriminator 1 view .LVU60
 268 00ae CF91      		pop r28
 269               	.LVL17:
 270               		.loc 1 99 1 discriminator 1 view .LVU61
 271 00b0 1F91      		pop r17
 272 00b2 0F91      		pop r16
 273 00b4 FF90      		pop r15
 274 00b6 EF90      		pop r14
 275 00b8 DF90      		pop r13
 276 00ba CF90      		pop r12
 277 00bc BF90      		pop r11
 278 00be AF90      		pop r10
 279 00c0 9F90      		pop r9
 280 00c2 8F90      		pop r8
 281 00c4 7F90      		pop r7
 282               		.loc 1 99 1 discriminator 1 view .LVU62
 283 00c6 6F90      		pop r6
 284               		.loc 1 99 1 discriminator 1 view .LVU63
 285 00c8 0895      		ret
 286               		.cfi_endproc
 287               	.LFE12:
 289               		.section	.rodata.str1.1,"aMS",@progbits,1
 290               	.LC0:
 291 0000 2564 00   		.string	"%d"
 292               		.text
 293               	.global	glcd_test_counter_and_graph
 295               	glcd_test_counter_and_graph:
 296               	.LFB13:
 100:glcd/unit_tests.c **** 
 101:glcd/unit_tests.c **** void glcd_test_counter_and_graph(void)
 102:glcd/unit_tests.c **** {
 297               		.loc 1 102 1 is_stmt 1 view -0
 298               		.cfi_startproc
 299 00ca CF92      		push r12
 300               	.LCFI14:
 301               		.cfi_def_cfa_offset 3
 302               		.cfi_offset 12, -2
 303 00cc DF92      		push r13
 304               	.LCFI15:
 305               		.cfi_def_cfa_offset 4
 306               		.cfi_offset 13, -3
 307 00ce EF92      		push r14
 308               	.LCFI16:
 309               		.cfi_def_cfa_offset 5
 310               		.cfi_offset 14, -4
 311 00d0 FF92      		push r15
 312               	.LCFI17:
 313               		.cfi_def_cfa_offset 6
 314               		.cfi_offset 15, -5
 315 00d2 0F93      		push r16
 316               	.LCFI18:
 317               		.cfi_def_cfa_offset 7
 318               		.cfi_offset 16, -6
 319 00d4 1F93      		push r17
 320               	.LCFI19:
 321               		.cfi_def_cfa_offset 8
 322               		.cfi_offset 17, -7
 323 00d6 CF93      		push r28
 324               	.LCFI20:
 325               		.cfi_def_cfa_offset 9
 326               		.cfi_offset 28, -8
 327 00d8 DF93      		push r29
 328               	.LCFI21:
 329               		.cfi_def_cfa_offset 10
 330               		.cfi_offset 29, -9
 331 00da CDB7      		in r28,__SP_L__
 332 00dc DEB7      		in r29,__SP_H__
 333               	.LCFI22:
 334               		.cfi_def_cfa_register 28
 335 00de 2897      		sbiw r28,8
 336               	.LCFI23:
 337               		.cfi_def_cfa_offset 18
 338 00e0 0FB6      		in __tmp_reg__,__SREG__
 339 00e2 F894      		cli
 340 00e4 DEBF      		out __SP_H__,r29
 341 00e6 0FBE      		out __SREG__,__tmp_reg__
 342 00e8 CDBF      		out __SP_L__,r28
 343               	/* prologue: function */
 344               	/* frame size = 8 */
 345               	/* stack size = 16 */
 346               	.L__stack_usage = 16
 103:glcd/unit_tests.c **** 	uint8_t count = 0;
 347               		.loc 1 103 2 view .LVU65
 348               	.LVL18:
 104:glcd/unit_tests.c **** 	char string[8] = "";
 349               		.loc 1 104 2 view .LVU66
 350               		.loc 1 104 7 is_stmt 0 view .LVU67
 351 00ea 1A82      		std Y+2,__zero_reg__
 352 00ec 1982      		std Y+1,__zero_reg__
 353 00ee FE01      		movw r30,r28
 354 00f0 3396      		adiw r30,3
 355 00f2 86E0      		ldi r24,lo8(6)
 356 00f4 DF01      		movw r26,r30
 357               		0:
 358 00f6 1D92      		st X+,__zero_reg__
 359 00f8 8A95      		dec r24
 360 00fa 01F4      		brne 0b
 103:glcd/unit_tests.c **** 	uint8_t count = 0;
 361               		.loc 1 103 10 view .LVU68
 362 00fc 10E0      		ldi r17,0
 105:glcd/unit_tests.c **** 	while(1) {
 106:glcd/unit_tests.c **** 		glcd_clear_buffer();
 107:glcd/unit_tests.c **** 
 108:glcd/unit_tests.c **** 		//glcd_tiny_set_font(Font5x7,5,7,32,127);
 109:glcd/unit_tests.c **** 		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));
 110:glcd/unit_tests.c **** 
 111:glcd/unit_tests.c **** 		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
 112:glcd/unit_tests.c **** 		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
 113:glcd/unit_tests.c **** 		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
 114:glcd/unit_tests.c **** 		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
 115:glcd/unit_tests.c **** 		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for
 116:glcd/unit_tests.c **** 
 117:glcd/unit_tests.c **** 		sprintf(string,"%d",count);
 363               		.loc 1 117 3 view .LVU69
 364 00fe 80E0      		ldi r24,lo8(.LC0)
 365 0100 C82E      		mov r12,r24
 366 0102 80E0      		ldi r24,hi8(.LC0)
 367 0104 D82E      		mov r13,r24
 368 0106 CE01      		movw r24,r28
 369 0108 0196      		adiw r24,1
 370 010a 7C01      		movw r14,r24
 371               	.LVL19:
 372               	.L10:
 105:glcd/unit_tests.c **** 	while(1) {
 373               		.loc 1 105 2 is_stmt 1 view .LVU70
 106:glcd/unit_tests.c **** 
 374               		.loc 1 106 3 view .LVU71
 375 010c 0E94 0000 		call glcd_clear_buffer
 376               	.LVL20:
 111:glcd/unit_tests.c **** 		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
 377               		.loc 1 111 3 view .LVU72
 378 0110 09E3      		ldi r16,lo8(57)
 379 0112 2EE2      		ldi r18,lo8(46)
 380 0114 45E1      		ldi r20,lo8(21)
 381 0116 6FE0      		ldi r22,lo8(15)
 382 0118 80E0      		ldi r24,lo8(Liberation_Sans15x21_Numbers)
 383 011a 90E0      		ldi r25,hi8(Liberation_Sans15x21_Numbers)
 384 011c 0E94 0000 		call glcd_set_font
 385               	.LVL21:
 386               		.loc 1 117 3 view .LVU73
 387 0120 1F92      		push __zero_reg__
 388 0122 1F93      		push r17
 389 0124 DF92      		push r13
 390 0126 CF92      		push r12
 391 0128 FF92      		push r15
 392 012a EF92      		push r14
 393 012c 0E94 0000 		call sprintf
 394               	.LVL22:
 118:glcd/unit_tests.c **** 		glcd_draw_string_xy(0,0,string);
 395               		.loc 1 118 3 view .LVU74
 396 0130 A701      		movw r20,r14
 397 0132 60E0      		ldi r22,0
 398 0134 80E0      		ldi r24,0
 399 0136 0E94 0000 		call glcd_draw_string_xy
 400               	.LVL23:
 119:glcd/unit_tests.c **** 		glcd_bar_graph_horizontal(10,38,30,6,count*4);
 401               		.loc 1 119 3 view .LVU75
 402 013a 012F      		mov r16,r17
 403 013c 000F      		lsl r16
 404 013e 000F      		lsl r16
 405 0140 26E0      		ldi r18,lo8(6)
 406 0142 4EE1      		ldi r20,lo8(30)
 407 0144 66E2      		ldi r22,lo8(38)
 408 0146 8AE0      		ldi r24,lo8(10)
 409 0148 0E94 0000 		call glcd_bar_graph_horizontal
 410               	.LVL24:
 120:glcd/unit_tests.c **** 		glcd_bar_graph_vertical(70,0,8,30,count*2);
 411               		.loc 1 120 3 view .LVU76
 412 014c 012F      		mov r16,r17
 413 014e 000F      		lsl r16
 414 0150 2EE1      		ldi r18,lo8(30)
 415 0152 48E0      		ldi r20,lo8(8)
 416 0154 60E0      		ldi r22,0
 417 0156 86E4      		ldi r24,lo8(70)
 418 0158 0E94 0000 		call glcd_bar_graph_vertical
 419               	.LVL25:
 121:glcd/unit_tests.c **** 
 122:glcd/unit_tests.c **** 		glcd_write();
 420               		.loc 1 122 3 view .LVU77
 421 015c 0E94 0000 		call glcd_write
 422               	.LVL26:
 123:glcd/unit_tests.c **** 		count += 1;
 423               		.loc 1 123 3 view .LVU78
 424               		.loc 1 123 9 is_stmt 0 view .LVU79
 425 0160 1F5F      		subi r17,lo8(-(1))
 426               	.LVL27:
 124:glcd/unit_tests.c **** 
 125:glcd/unit_tests.c **** 		DEMO_RETURN();
 427               		.loc 1 125 3 is_stmt 1 view .LVU80
 428 0162 8091 0000 		lds r24,unit_test_return
 429 0166 0F90      		pop __tmp_reg__
 430 0168 0F90      		pop __tmp_reg__
 431 016a 0F90      		pop __tmp_reg__
 432 016c 0F90      		pop __tmp_reg__
 433 016e 0F90      		pop __tmp_reg__
 434 0170 0F90      		pop __tmp_reg__
 435 0172 8823      		tst r24
 436 0174 01F0      		breq .L10
 437               		.loc 1 125 3 discriminator 1 view .LVU81
 438 0176 1092 0000 		sts unit_test_return,__zero_reg__
 439               		.loc 1 125 3 discriminator 1 view .LVU82
 440               	/* epilogue start */
 126:glcd/unit_tests.c **** 	}
 127:glcd/unit_tests.c **** 
 128:glcd/unit_tests.c **** }
 441               		.loc 1 128 1 is_stmt 0 discriminator 1 view .LVU83
 442 017a 2896      		adiw r28,8
 443 017c 0FB6      		in __tmp_reg__,__SREG__
 444 017e F894      		cli
 445 0180 DEBF      		out __SP_H__,r29
 446 0182 0FBE      		out __SREG__,__tmp_reg__
 447 0184 CDBF      		out __SP_L__,r28
 448 0186 DF91      		pop r29
 449 0188 CF91      		pop r28
 450 018a 1F91      		pop r17
 451               	.LVL28:
 452               		.loc 1 128 1 discriminator 1 view .LVU84
 453 018c 0F91      		pop r16
 454 018e FF90      		pop r15
 455 0190 EF90      		pop r14
 456 0192 DF90      		pop r13
 457 0194 CF90      		pop r12
 458 0196 0895      		ret
 459               		.cfi_endproc
 460               	.LFE13:
 462               	.global	glcd_test_glcdutils
 464               	glcd_test_glcdutils:
 465               	.LFB14:
 129:glcd/unit_tests.c **** 
 130:glcd/unit_tests.c **** /* Test glcd-utils font table type, increments and display a 16-bit number over and over */
 131:glcd/unit_tests.c **** #include "fonts/Earthbound_12x19_48to57.h"
 132:glcd/unit_tests.c **** void glcd_test_glcdutils(void)
 133:glcd/unit_tests.c **** {
 466               		.loc 1 133 1 is_stmt 1 view -0
 467               		.cfi_startproc
 468 0198 8F92      		push r8
 469               	.LCFI24:
 470               		.cfi_def_cfa_offset 3
 471               		.cfi_offset 8, -2
 472 019a 9F92      		push r9
 473               	.LCFI25:
 474               		.cfi_def_cfa_offset 4
 475               		.cfi_offset 9, -3
 476 019c AF92      		push r10
 477               	.LCFI26:
 478               		.cfi_def_cfa_offset 5
 479               		.cfi_offset 10, -4
 480 019e BF92      		push r11
 481               	.LCFI27:
 482               		.cfi_def_cfa_offset 6
 483               		.cfi_offset 11, -5
 484 01a0 CF92      		push r12
 485               	.LCFI28:
 486               		.cfi_def_cfa_offset 7
 487               		.cfi_offset 12, -6
 488 01a2 DF92      		push r13
 489               	.LCFI29:
 490               		.cfi_def_cfa_offset 8
 491               		.cfi_offset 13, -7
 492 01a4 EF92      		push r14
 493               	.LCFI30:
 494               		.cfi_def_cfa_offset 9
 495               		.cfi_offset 14, -8
 496 01a6 0F93      		push r16
 497               	.LCFI31:
 498               		.cfi_def_cfa_offset 10
 499               		.cfi_offset 16, -9
 500 01a8 CF93      		push r28
 501               	.LCFI32:
 502               		.cfi_def_cfa_offset 11
 503               		.cfi_offset 28, -10
 504 01aa DF93      		push r29
 505               	.LCFI33:
 506               		.cfi_def_cfa_offset 12
 507               		.cfi_offset 29, -11
 508 01ac CDB7      		in r28,__SP_L__
 509 01ae DEB7      		in r29,__SP_H__
 510               	.LCFI34:
 511               		.cfi_def_cfa_register 28
 512 01b0 2897      		sbiw r28,8
 513               	.LCFI35:
 514               		.cfi_def_cfa_offset 20
 515 01b2 0FB6      		in __tmp_reg__,__SREG__
 516 01b4 F894      		cli
 517 01b6 DEBF      		out __SP_H__,r29
 518 01b8 0FBE      		out __SREG__,__tmp_reg__
 519 01ba CDBF      		out __SP_L__,r28
 520               	/* prologue: function */
 521               	/* frame size = 8 */
 522               	/* stack size = 18 */
 523               	.L__stack_usage = 18
 134:glcd/unit_tests.c **** 	uint16_t count = 0;
 524               		.loc 1 134 2 view .LVU86
 525               	.LVL29:
 135:glcd/unit_tests.c **** 	char string[8] = "";
 526               		.loc 1 135 2 view .LVU87
 527               		.loc 1 135 7 is_stmt 0 view .LVU88
 528 01bc 1A82      		std Y+2,__zero_reg__
 529 01be 1982      		std Y+1,__zero_reg__
 530 01c0 FE01      		movw r30,r28
 531 01c2 3396      		adiw r30,3
 532 01c4 86E0      		ldi r24,lo8(6)
 533 01c6 DF01      		movw r26,r30
 534               		0:
 535 01c8 1D92      		st X+,__zero_reg__
 536 01ca 8A95      		dec r24
 537 01cc 01F4      		brne 0b
 134:glcd/unit_tests.c **** 	uint16_t count = 0;
 538               		.loc 1 134 11 view .LVU89
 539 01ce D12C      		mov r13,__zero_reg__
 540 01d0 C12C      		mov r12,__zero_reg__
 136:glcd/unit_tests.c **** 	while(1) {
 137:glcd/unit_tests.c **** 		glcd_clear_buffer();
 138:glcd/unit_tests.c **** 
 139:glcd/unit_tests.c **** 		/* Set the font */
 140:glcd/unit_tests.c **** 		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
 141:glcd/unit_tests.c **** 
 142:glcd/unit_tests.c **** 		sprintf(string,"%d",count);
 541               		.loc 1 142 3 view .LVU90
 542 01d2 90E0      		ldi r25,lo8(.LC0)
 543 01d4 892E      		mov r8,r25
 544 01d6 90E0      		ldi r25,hi8(.LC0)
 545 01d8 992E      		mov r9,r25
 546 01da CE01      		movw r24,r28
 547 01dc 0196      		adiw r24,1
 548 01de 5C01      		movw r10,r24
 549               	.LVL30:
 550               	.L14:
 136:glcd/unit_tests.c **** 	while(1) {
 551               		.loc 1 136 2 is_stmt 1 view .LVU91
 137:glcd/unit_tests.c **** 
 552               		.loc 1 137 3 view .LVU92
 553 01e0 0E94 0000 		call glcd_clear_buffer
 554               	.LVL31:
 140:glcd/unit_tests.c **** 
 555               		.loc 1 140 3 view .LVU93
 556 01e4 82E0      		ldi r24,lo8(2)
 557 01e6 E82E      		mov r14,r24
 558 01e8 09E3      		ldi r16,lo8(57)
 559 01ea 20E3      		ldi r18,lo8(48)
 560 01ec 43E1      		ldi r20,lo8(19)
 561 01ee 6CE0      		ldi r22,lo8(12)
 562 01f0 80E0      		ldi r24,lo8(font_Earthbound_12x19_48to57)
 563 01f2 90E0      		ldi r25,hi8(font_Earthbound_12x19_48to57)
 564 01f4 0E94 0000 		call glcd_font
 565               	.LVL32:
 566               		.loc 1 142 3 view .LVU94
 567 01f8 DF92      		push r13
 568 01fa CF92      		push r12
 569 01fc 9F92      		push r9
 570 01fe 8F92      		push r8
 571 0200 BF92      		push r11
 572 0202 AF92      		push r10
 573 0204 0E94 0000 		call sprintf
 574               	.LVL33:
 143:glcd/unit_tests.c **** 		glcd_draw_string_xy(0,0,string);
 575               		.loc 1 143 3 view .LVU95
 576 0208 A501      		movw r20,r10
 577 020a 60E0      		ldi r22,0
 578 020c 80E0      		ldi r24,0
 579 020e 0E94 0000 		call glcd_draw_string_xy
 580               	.LVL34:
 144:glcd/unit_tests.c **** 		glcd_write();
 581               		.loc 1 144 3 view .LVU96
 582 0212 0E94 0000 		call glcd_write
 583               	.LVL35:
 145:glcd/unit_tests.c **** 		
 146:glcd/unit_tests.c **** 		count += 1;
 584               		.loc 1 146 3 view .LVU97
 585               		.loc 1 146 9 is_stmt 0 view .LVU98
 586 0216 9FEF      		ldi r25,-1
 587 0218 C91A      		sub r12,r25
 588 021a D90A      		sbc r13,r25
 589               	.LVL36:
 147:glcd/unit_tests.c **** 
 148:glcd/unit_tests.c **** 		DEMO_RETURN();
 590               		.loc 1 148 3 is_stmt 1 view .LVU99
 591 021c 8091 0000 		lds r24,unit_test_return
 592 0220 0F90      		pop __tmp_reg__
 593 0222 0F90      		pop __tmp_reg__
 594 0224 0F90      		pop __tmp_reg__
 595 0226 0F90      		pop __tmp_reg__
 596 0228 0F90      		pop __tmp_reg__
 597 022a 0F90      		pop __tmp_reg__
 598 022c 8823      		tst r24
 599 022e 01F0      		breq .L14
 600               		.loc 1 148 3 discriminator 1 view .LVU100
 601 0230 1092 0000 		sts unit_test_return,__zero_reg__
 602               		.loc 1 148 3 discriminator 1 view .LVU101
 603               	/* epilogue start */
 149:glcd/unit_tests.c **** 	}
 150:glcd/unit_tests.c **** }
 604               		.loc 1 150 1 is_stmt 0 discriminator 1 view .LVU102
 605 0234 2896      		adiw r28,8
 606 0236 0FB6      		in __tmp_reg__,__SREG__
 607 0238 F894      		cli
 608 023a DEBF      		out __SP_H__,r29
 609 023c 0FBE      		out __SREG__,__tmp_reg__
 610 023e CDBF      		out __SP_L__,r28
 611 0240 DF91      		pop r29
 612 0242 CF91      		pop r28
 613 0244 0F91      		pop r16
 614 0246 EF90      		pop r14
 615 0248 DF90      		pop r13
 616 024a CF90      		pop r12
 617               	.LVL37:
 618               		.loc 1 150 1 discriminator 1 view .LVU103
 619 024c BF90      		pop r11
 620 024e AF90      		pop r10
 621 0250 9F90      		pop r9
 622 0252 8F90      		pop r8
 623 0254 0895      		ret
 624               		.cfi_endproc
 625               	.LFE14:
 627               		.section	.rodata.str1.1
 628               	.LC1:
 629 0003 3132 3300 		.string	"123"
 630               	.LC2:
 631 0007 3435 3600 		.string	"456"
 632               		.text
 633               	.global	glcd_test_text_up_down
 635               	glcd_test_text_up_down:
 636               	.LFB15:
 151:glcd/unit_tests.c **** 
 152:glcd/unit_tests.c **** void glcd_test_text_up_down(void)
 153:glcd/unit_tests.c **** {
 637               		.loc 1 153 1 is_stmt 1 view -0
 638               		.cfi_startproc
 639 0256 0F93      		push r16
 640               	.LCFI36:
 641               		.cfi_def_cfa_offset 3
 642               		.cfi_offset 16, -2
 643 0258 1F93      		push r17
 644               	.LCFI37:
 645               		.cfi_def_cfa_offset 4
 646               		.cfi_offset 17, -3
 647 025a CF93      		push r28
 648               	.LCFI38:
 649               		.cfi_def_cfa_offset 5
 650               		.cfi_offset 28, -4
 651 025c DF93      		push r29
 652               	.LCFI39:
 653               		.cfi_def_cfa_offset 6
 654               		.cfi_offset 29, -5
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 4 */
 658               	.L__stack_usage = 4
 154:glcd/unit_tests.c **** 	// moves some text up and down the display
 155:glcd/unit_tests.c **** 
 156:glcd/unit_tests.c **** 	uint8_t y;
 659               		.loc 1 156 2 view .LVU105
 157:glcd/unit_tests.c **** 	uint8_t max_y;
 660               		.loc 1 157 2 view .LVU106
 158:glcd/unit_tests.c **** 	
 159:glcd/unit_tests.c **** 	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
 160:glcd/unit_tests.c **** 	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
 661               		.loc 1 160 2 view .LVU107
 662 025e 09E3      		ldi r16,lo8(57)
 663 0260 2EE2      		ldi r18,lo8(46)
 664 0262 45E1      		ldi r20,lo8(21)
 665 0264 6FE0      		ldi r22,lo8(15)
 666 0266 80E0      		ldi r24,lo8(Liberation_Sans15x21_Numbers)
 667 0268 90E0      		ldi r25,hi8(Liberation_Sans15x21_Numbers)
 668 026a 0E94 0000 		call glcd_set_font
 669               	.LVL38:
 161:glcd/unit_tests.c **** 	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
 162:glcd/unit_tests.c **** 	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);
 163:glcd/unit_tests.c **** 
 164:glcd/unit_tests.c **** 	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
 670               		.loc 1 164 2 view .LVU108
 671               		.loc 1 164 8 is_stmt 0 view .LVU109
 672 026e 8091 0000 		lds r24,font_current+3
 673 0272 CEE2      		ldi r28,lo8(46)
 674 0274 C81B      		sub r28,r24
 675               	.LVL39:
 676               	.LBB98:
 677               	.LBB99:
 678               	.LBB100:
 679               	.LBB101:
 680               		.loc 2 105 2 view .LVU110
 681 0276 08EC      		ldi r16,lo8(-56)
 682 0278 10E0      		ldi r17,0
 683               	.L27:
 684               	.LBE101:
 685               	.LBE100:
 686               	.LBE99:
 687               	.LBE98:
 165:glcd/unit_tests.c **** 
 166:glcd/unit_tests.c **** 	while(1) {
 688               		.loc 1 166 2 is_stmt 1 view .LVU111
 167:glcd/unit_tests.c **** 		// move top to bottom
 168:glcd/unit_tests.c **** 		for (y=0; y<max_y; y++) {
 689               		.loc 1 168 3 view .LVU112
 690               	.LVL40:
 691               		.loc 1 168 9 is_stmt 0 view .LVU113
 692 027a D0E0      		ldi r29,0
 693               	.LVL41:
 694               	.L18:
 695               		.loc 1 168 3 discriminator 2 view .LVU114
 696 027c DC13      		cpse r29,r28
 697 027e 00C0      		rjmp .L22
 698 0280 DC2F      		mov r29,r28
 699               	.LVL42:
 700               	.L23:
 169:glcd/unit_tests.c **** 			DEMO_RETURN();
 170:glcd/unit_tests.c **** 			glcd_clear_buffer();
 171:glcd/unit_tests.c **** 			glcd_draw_string_xy(0,y,"123");
 172:glcd/unit_tests.c **** 			glcd_write();
 173:glcd/unit_tests.c **** 			delay_ms(80);
 174:glcd/unit_tests.c **** 		}
 175:glcd/unit_tests.c **** 
 176:glcd/unit_tests.c **** 		// move bottom to top
 177:glcd/unit_tests.c **** 		for (y=(max_y); y>0; y--) {
 701               		.loc 1 177 3 discriminator 2 view .LVU115
 702 0282 DD23      		tst r29
 703 0284 01F0      		breq .L27
 178:glcd/unit_tests.c **** 			DEMO_RETURN();
 704               		.loc 1 178 4 is_stmt 1 view .LVU116
 705 0286 8091 0000 		lds r24,unit_test_return
 706 028a 8111      		cpse r24,__zero_reg__
 707 028c 00C0      		rjmp .L30
 708               		.loc 1 178 17 discriminator 2 view .LVU117
 179:glcd/unit_tests.c **** 			glcd_clear_buffer();
 709               		.loc 1 179 4 discriminator 2 view .LVU118
 710 028e 0E94 0000 		call glcd_clear_buffer
 711               	.LVL43:
 180:glcd/unit_tests.c **** 			glcd_draw_string_xy(0,y,"456");
 712               		.loc 1 180 4 discriminator 2 view .LVU119
 713 0292 40E0      		ldi r20,lo8(.LC2)
 714 0294 50E0      		ldi r21,hi8(.LC2)
 715 0296 6D2F      		mov r22,r29
 716 0298 80E0      		ldi r24,0
 717 029a 0E94 0000 		call glcd_draw_string_xy
 718               	.LVL44:
 181:glcd/unit_tests.c **** 			glcd_write();
 719               		.loc 1 181 4 discriminator 2 view .LVU120
 720 029e 0E94 0000 		call glcd_write
 721               	.LVL45:
 182:glcd/unit_tests.c **** 			delay_ms(80);
 722               		.loc 1 182 4 discriminator 2 view .LVU121
 723               	.LBB106:
 724               	.LBI106:
 166:/usr/avr/include/util/delay.h **** {
 725               		.loc 3 166 1 discriminator 2 view .LVU122
 726               	.LBB107:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 727               		.loc 3 168 2 discriminator 2 view .LVU123
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 728               		.loc 3 190 2 discriminator 2 view .LVU124
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 729               		.loc 3 191 2 discriminator 2 view .LVU125
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 730               		.loc 3 192 2 discriminator 2 view .LVU126
 194:/usr/avr/include/util/delay.h **** 	{
 731               		.loc 3 194 7 discriminator 2 view .LVU127
 194:/usr/avr/include/util/delay.h **** 	{
 732               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU128
 733               	.LBE107:
 734               	.LBE106:
 181:glcd/unit_tests.c **** 			delay_ms(80);
 735               		.loc 1 181 4 discriminator 2 view .LVU129
 736 02a2 80E2      		ldi r24,lo8(32)
 737 02a4 93E0      		ldi r25,lo8(3)
 738               	.LVL46:
 739               	.L25:
 740               	.LBB111:
 741               	.LBB110:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 742               		.loc 3 201 4 is_stmt 1 view .LVU130
 743               	.LBB108:
 744               	.LBI108:
 103:/usr/avr/include/util/delay_basic.h **** {
 745               		.loc 2 103 1 view .LVU131
 746               	.LBB109:
 747               		.loc 2 105 2 view .LVU132
 748 02a6 F801      		movw r30,r16
 749               	/* #APP */
 750               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 751 02a8 3197      		1: sbiw r30,1
 752 02aa 01F4      		brne 1b
 753               	 ;  0 "" 2
 754               	.LVL47:
 755               		.loc 2 105 2 is_stmt 0 view .LVU133
 756               	/* #NOAPP */
 757               	.LBE109:
 758               	.LBE108:
 202:/usr/avr/include/util/delay.h **** 		}
 759               		.loc 3 202 4 is_stmt 1 view .LVU134
 202:/usr/avr/include/util/delay.h **** 		}
 760               		.loc 3 202 4 is_stmt 0 view .LVU135
 761 02ac 0197      		sbiw r24,1
 762               	.LVL48:
 198:/usr/avr/include/util/delay.h **** 		{
 763               		.loc 3 198 8 view .LVU136
 764 02ae 01F4      		brne .L25
 765               	.LVL49:
 198:/usr/avr/include/util/delay.h **** 		{
 766               		.loc 3 198 8 view .LVU137
 767               	.LBE110:
 768               	.LBE111:
 177:glcd/unit_tests.c **** 			DEMO_RETURN();
 769               		.loc 1 177 25 discriminator 2 view .LVU138
 770 02b0 D150      		subi r29,lo8(-(-1))
 771               	.LVL50:
 177:glcd/unit_tests.c **** 			DEMO_RETURN();
 772               		.loc 1 177 25 discriminator 2 view .LVU139
 773 02b2 00C0      		rjmp .L23
 774               	.L22:
 169:glcd/unit_tests.c **** 			glcd_clear_buffer();
 775               		.loc 1 169 4 is_stmt 1 view .LVU140
 776 02b4 8091 0000 		lds r24,unit_test_return
 777 02b8 8823      		tst r24
 778 02ba 01F0      		breq .L19
 779               	.L30:
 178:glcd/unit_tests.c **** 			glcd_clear_buffer();
 780               		.loc 1 178 4 discriminator 1 view .LVU141
 781 02bc 1092 0000 		sts unit_test_return,__zero_reg__
 178:glcd/unit_tests.c **** 			glcd_clear_buffer();
 782               		.loc 1 178 4 discriminator 1 view .LVU142
 783               	/* epilogue start */
 183:glcd/unit_tests.c **** 		}
 184:glcd/unit_tests.c **** 		
 185:glcd/unit_tests.c **** 	}
 186:glcd/unit_tests.c **** 
 187:glcd/unit_tests.c **** }
 784               		.loc 1 187 1 is_stmt 0 discriminator 1 view .LVU143
 785 02c0 DF91      		pop r29
 786               	.LVL51:
 787               		.loc 1 187 1 discriminator 1 view .LVU144
 788 02c2 CF91      		pop r28
 789               	.LVL52:
 790               		.loc 1 187 1 discriminator 1 view .LVU145
 791 02c4 1F91      		pop r17
 792 02c6 0F91      		pop r16
 793 02c8 0895      		ret
 794               	.LVL53:
 795               	.L19:
 169:glcd/unit_tests.c **** 			glcd_clear_buffer();
 796               		.loc 1 169 17 is_stmt 1 discriminator 2 view .LVU146
 170:glcd/unit_tests.c **** 			glcd_draw_string_xy(0,y,"123");
 797               		.loc 1 170 4 discriminator 2 view .LVU147
 798 02ca 0E94 0000 		call glcd_clear_buffer
 799               	.LVL54:
 171:glcd/unit_tests.c **** 			glcd_write();
 800               		.loc 1 171 4 discriminator 2 view .LVU148
 801 02ce 40E0      		ldi r20,lo8(.LC1)
 802 02d0 50E0      		ldi r21,hi8(.LC1)
 803 02d2 6D2F      		mov r22,r29
 804 02d4 80E0      		ldi r24,0
 805 02d6 0E94 0000 		call glcd_draw_string_xy
 806               	.LVL55:
 172:glcd/unit_tests.c **** 			delay_ms(80);
 807               		.loc 1 172 4 discriminator 2 view .LVU149
 808 02da 0E94 0000 		call glcd_write
 809               	.LVL56:
 173:glcd/unit_tests.c **** 		}
 810               		.loc 1 173 4 discriminator 2 view .LVU150
 811               	.LBB112:
 812               	.LBI98:
 166:/usr/avr/include/util/delay.h **** {
 813               		.loc 3 166 1 discriminator 2 view .LVU151
 814               	.LBB104:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 815               		.loc 3 168 2 discriminator 2 view .LVU152
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 816               		.loc 3 190 2 discriminator 2 view .LVU153
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 817               		.loc 3 191 2 discriminator 2 view .LVU154
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 818               		.loc 3 192 2 discriminator 2 view .LVU155
 194:/usr/avr/include/util/delay.h **** 	{
 819               		.loc 3 194 7 discriminator 2 view .LVU156
 194:/usr/avr/include/util/delay.h **** 	{
 820               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU157
 821               	.LBE104:
 822               	.LBE112:
 172:glcd/unit_tests.c **** 			delay_ms(80);
 823               		.loc 1 172 4 discriminator 2 view .LVU158
 824 02de 80E2      		ldi r24,lo8(32)
 825 02e0 93E0      		ldi r25,lo8(3)
 826               	.LVL57:
 827               	.L21:
 828               	.LBB113:
 829               	.LBB105:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 830               		.loc 3 201 4 is_stmt 1 view .LVU159
 831               	.LBB103:
 832               	.LBI100:
 103:/usr/avr/include/util/delay_basic.h **** {
 833               		.loc 2 103 1 view .LVU160
 834               	.LBB102:
 835               		.loc 2 105 2 view .LVU161
 836 02e2 F801      		movw r30,r16
 837               	/* #APP */
 838               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 839 02e4 3197      		1: sbiw r30,1
 840 02e6 01F4      		brne 1b
 841               	 ;  0 "" 2
 842               	.LVL58:
 843               		.loc 2 105 2 is_stmt 0 view .LVU162
 844               	/* #NOAPP */
 845               	.LBE102:
 846               	.LBE103:
 202:/usr/avr/include/util/delay.h **** 		}
 847               		.loc 3 202 4 is_stmt 1 view .LVU163
 202:/usr/avr/include/util/delay.h **** 		}
 848               		.loc 3 202 4 is_stmt 0 view .LVU164
 849 02e8 0197      		sbiw r24,1
 850               	.LVL59:
 198:/usr/avr/include/util/delay.h **** 		{
 851               		.loc 3 198 8 view .LVU165
 852 02ea 01F4      		brne .L21
 853               	.LVL60:
 198:/usr/avr/include/util/delay.h **** 		{
 854               		.loc 3 198 8 view .LVU166
 855               	.LBE105:
 856               	.LBE113:
 168:glcd/unit_tests.c **** 			DEMO_RETURN();
 857               		.loc 1 168 23 discriminator 2 view .LVU167
 858 02ec DF5F      		subi r29,lo8(-(1))
 859               	.LVL61:
 168:glcd/unit_tests.c **** 			DEMO_RETURN();
 860               		.loc 1 168 23 discriminator 2 view .LVU168
 861 02ee 00C0      		rjmp .L18
 862               		.cfi_endproc
 863               	.LFE15:
 865               	.global	glcd_test_tiny_text
 867               	glcd_test_tiny_text:
 868               	.LFB16:
 188:glcd/unit_tests.c **** 
 189:glcd/unit_tests.c **** void glcd_test_tiny_text(void)
 190:glcd/unit_tests.c **** {
 869               		.loc 1 190 1 is_stmt 1 view -0
 870               		.cfi_startproc
 871 02f0 CF92      		push r12
 872               	.LCFI40:
 873               		.cfi_def_cfa_offset 3
 874               		.cfi_offset 12, -2
 875 02f2 DF92      		push r13
 876               	.LCFI41:
 877               		.cfi_def_cfa_offset 4
 878               		.cfi_offset 13, -3
 879 02f4 EF92      		push r14
 880               	.LCFI42:
 881               		.cfi_def_cfa_offset 5
 882               		.cfi_offset 14, -4
 883 02f6 FF92      		push r15
 884               	.LCFI43:
 885               		.cfi_def_cfa_offset 6
 886               		.cfi_offset 15, -5
 887 02f8 0F93      		push r16
 888               	.LCFI44:
 889               		.cfi_def_cfa_offset 7
 890               		.cfi_offset 16, -6
 891 02fa 1F93      		push r17
 892               	.LCFI45:
 893               		.cfi_def_cfa_offset 8
 894               		.cfi_offset 17, -7
 895 02fc CF93      		push r28
 896               	.LCFI46:
 897               		.cfi_def_cfa_offset 9
 898               		.cfi_offset 28, -8
 899 02fe DF93      		push r29
 900               	.LCFI47:
 901               		.cfi_def_cfa_offset 10
 902               		.cfi_offset 29, -9
 903 0300 CDB7      		in r28,__SP_L__
 904 0302 DEB7      		in r29,__SP_H__
 905               	.LCFI48:
 906               		.cfi_def_cfa_register 28
 907 0304 2F97      		sbiw r28,15
 908               	.LCFI49:
 909               		.cfi_def_cfa_offset 25
 910 0306 0FB6      		in __tmp_reg__,__SREG__
 911 0308 F894      		cli
 912 030a DEBF      		out __SP_H__,r29
 913 030c 0FBE      		out __SREG__,__tmp_reg__
 914 030e CDBF      		out __SP_L__,r28
 915               	/* prologue: function */
 916               	/* frame size = 15 */
 917               	/* stack size = 23 */
 918               	.L__stack_usage = 23
 191:glcd/unit_tests.c **** 	/* Write tiny text on display, all chars, scrolling up every second */
 192:glcd/unit_tests.c **** 	
 193:glcd/unit_tests.c **** 	char string[GLCD_LCD_WIDTH / 6 + 1];
 919               		.loc 1 193 2 view .LVU170
 194:glcd/unit_tests.c **** 
 195:glcd/unit_tests.c **** 	uint8_t c = 32;
 920               		.loc 1 195 2 view .LVU171
 921               	.LVL62:
 196:glcd/unit_tests.c **** 	uint8_t len = GLCD_LCD_WIDTH / 6;
 922               		.loc 1 196 2 view .LVU172
 197:glcd/unit_tests.c **** 	
 198:glcd/unit_tests.c **** 	GLCD_TEXT_INIT();
 923               		.loc 1 198 2 view .LVU173
 924 0310 0FE7      		ldi r16,lo8(127)
 925 0312 20E2      		ldi r18,lo8(32)
 926 0314 47E0      		ldi r20,lo8(7)
 927 0316 65E0      		ldi r22,lo8(5)
 928 0318 80E0      		ldi r24,lo8(Font5x7)
 929 031a 90E0      		ldi r25,hi8(Font5x7)
 930 031c 0E94 0000 		call glcd_tiny_set_font
 931               	.LVL63:
 195:glcd/unit_tests.c **** 	uint8_t len = GLCD_LCD_WIDTH / 6;
 932               		.loc 1 195 10 is_stmt 0 view .LVU174
 933 0320 10E2      		ldi r17,lo8(32)
 934 0322 7E01      		movw r14,r28
 935 0324 8FE0      		ldi r24,15
 936 0326 E80E      		add r14,r24
 937 0328 F11C      		adc r15,__zero_reg__
 938               	.LBB114:
 939               	.LBB115:
 940               	.LBB116:
 941               	.LBB117:
 942               	.LBB118:
 943               		.loc 2 105 2 view .LVU175
 944 032a 88EC      		ldi r24,lo8(-56)
 945 032c C82E      		mov r12,r24
 946 032e D12C      		mov r13,__zero_reg__
 947               	.LVL64:
 948               	.L35:
 949               		.loc 2 105 2 view .LVU176
 950               	.LBE118:
 951               	.LBE117:
 952               	.LBE116:
 953               	.LBE115:
 954               	.LBE114:
 955               		.loc 1 198 18 is_stmt 1 discriminator 1 view .LVU177
 199:glcd/unit_tests.c **** 	
 200:glcd/unit_tests.c **** 	while(1) {
 956               		.loc 1 200 2 discriminator 1 view .LVU178
 957               	.LBB123:
 201:glcd/unit_tests.c **** 		// write chars to string from 32 to 127 ASCII
 202:glcd/unit_tests.c **** 		uint8_t i;
 958               		.loc 1 202 3 discriminator 1 view .LVU179
 203:glcd/unit_tests.c **** 		for (i=0; i<len; i++) {
 959               		.loc 1 203 3 discriminator 1 view .LVU180
 960               		.loc 1 203 3 is_stmt 0 discriminator 1 view .LVU181
 961 0330 FE01      		movw r30,r28
 962 0332 3196      		adiw r30,1
 963 0334 CF01      		movw r24,r30
 964               	.LVL65:
 965               	.L33:
 204:glcd/unit_tests.c **** 			string[i] = c;
 966               		.loc 1 204 4 is_stmt 1 view .LVU182
 967               		.loc 1 204 14 is_stmt 0 view .LVU183
 968 0336 1193      		st Z+,r17
 205:glcd/unit_tests.c **** 			c++;
 969               		.loc 1 205 4 is_stmt 1 view .LVU184
 970               		.loc 1 205 5 is_stmt 0 view .LVU185
 971 0338 1F5F      		subi r17,lo8(-(1))
 972               	.LVL66:
 206:glcd/unit_tests.c **** 			if (c > 127) {
 973               		.loc 1 206 4 is_stmt 1 view .LVU186
 974               		.loc 1 206 7 is_stmt 0 view .LVU187
 975 033a 17FD      		sbrc r17,7
 207:glcd/unit_tests.c **** 				c = 32;
 976               		.loc 1 207 7 view .LVU188
 977 033c 10E2      		ldi r17,lo8(32)
 978               	.LVL67:
 979               	.L32:
 203:glcd/unit_tests.c **** 			string[i] = c;
 980               		.loc 1 203 3 discriminator 2 view .LVU189
 981 033e EE16      		cp r14,r30
 982 0340 FF06      		cpc r15,r31
 983 0342 01F4      		brne .L33
 208:glcd/unit_tests.c **** 			}
 209:glcd/unit_tests.c **** 		}
 210:glcd/unit_tests.c **** 
 211:glcd/unit_tests.c **** 		// write null terminator
 212:glcd/unit_tests.c **** 		string[len] = '\0';
 984               		.loc 1 212 3 is_stmt 1 view .LVU190
 985               		.loc 1 212 15 is_stmt 0 view .LVU191
 986 0344 1F86      		std Y+15,__zero_reg__
 213:glcd/unit_tests.c **** 
 214:glcd/unit_tests.c **** 		GLCD_WRITE(string);
 987               		.loc 1 214 3 is_stmt 1 view .LVU192
 988 0346 0E94 0000 		call glcd_tiny_draw_string_ammend
 989               	.LVL68:
 215:glcd/unit_tests.c **** 		
 216:glcd/unit_tests.c **** 		DEMO_RETURN();
 990               		.loc 1 216 3 view .LVU193
 991 034a 8091 0000 		lds r24,unit_test_return
 992 034e 8823      		tst r24
 993 0350 01F0      		breq .L36
 994               		.loc 1 216 3 discriminator 1 view .LVU194
 995 0352 1092 0000 		sts unit_test_return,__zero_reg__
 996               		.loc 1 216 3 discriminator 1 view .LVU195
 997               	/* epilogue start */
 998               	.LBE123:
 217:glcd/unit_tests.c **** 		
 218:glcd/unit_tests.c **** 		delay_ms(1000);
 219:glcd/unit_tests.c **** 	}
 220:glcd/unit_tests.c **** 
 221:glcd/unit_tests.c **** }
 999               		.loc 1 221 1 is_stmt 0 discriminator 1 view .LVU196
 1000 0356 2F96      		adiw r28,15
 1001 0358 0FB6      		in __tmp_reg__,__SREG__
 1002 035a F894      		cli
 1003 035c DEBF      		out __SP_H__,r29
 1004 035e 0FBE      		out __SREG__,__tmp_reg__
 1005 0360 CDBF      		out __SP_L__,r28
 1006 0362 DF91      		pop r29
 1007 0364 CF91      		pop r28
 1008 0366 1F91      		pop r17
 1009               	.LVL69:
 1010               		.loc 1 221 1 discriminator 1 view .LVU197
 1011 0368 0F91      		pop r16
 1012 036a FF90      		pop r15
 1013 036c EF90      		pop r14
 1014 036e DF90      		pop r13
 1015 0370 CF90      		pop r12
 1016 0372 0895      		ret
 1017               	.LVL70:
 1018               	.L36:
 1019               	.LBB124:
 1020               		.loc 1 221 1 discriminator 1 view .LVU198
 1021 0374 80E1      		ldi r24,lo8(16)
 1022 0376 97E2      		ldi r25,lo8(39)
 1023               	.L34:
 1024               	.LVL71:
 1025               	.LBB122:
 1026               	.LBB121:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1027               		.loc 3 201 4 is_stmt 1 view .LVU199
 1028               	.LBB120:
 1029               	.LBI117:
 103:/usr/avr/include/util/delay_basic.h **** {
 1030               		.loc 2 103 1 view .LVU200
 1031               	.LBB119:
 1032               		.loc 2 105 2 view .LVU201
 1033 0378 F601      		movw r30,r12
 1034               	/* #APP */
 1035               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1036 037a 3197      		1: sbiw r30,1
 1037 037c 01F4      		brne 1b
 1038               	 ;  0 "" 2
 1039               	.LVL72:
 1040               		.loc 2 105 2 is_stmt 0 view .LVU202
 1041               	/* #NOAPP */
 1042               	.LBE119:
 1043               	.LBE120:
 202:/usr/avr/include/util/delay.h **** 		}
 1044               		.loc 3 202 4 is_stmt 1 view .LVU203
 202:/usr/avr/include/util/delay.h **** 		}
 1045               		.loc 3 202 4 is_stmt 0 view .LVU204
 1046 037e 0197      		sbiw r24,1
 1047               	.LVL73:
 198:/usr/avr/include/util/delay.h **** 		{
 1048               		.loc 3 198 8 view .LVU205
 1049 0380 01F4      		brne .L34
 1050 0382 00C0      		rjmp .L35
 1051               	.LBE121:
 1052               	.LBE122:
 1053               	.LBE124:
 1054               		.cfi_endproc
 1055               	.LFE16:
 1057               		.section	.rodata.str1.1
 1058               	.LC3:
 1059 000b 4865 6C6C 		.string	"Hello World!"
 1059      6F20 576F 
 1059      726C 6421 
 1059      00
 1060               		.text
 1061               	.global	glcd_test_hello_world
 1063               	glcd_test_hello_world:
 1064               	.LFB17:
 222:glcd/unit_tests.c **** 
 223:glcd/unit_tests.c **** void glcd_test_hello_world(void)
 224:glcd/unit_tests.c **** {
 1065               		.loc 1 224 1 is_stmt 1 view -0
 1066               		.cfi_startproc
 1067 0384 0F93      		push r16
 1068               	.LCFI50:
 1069               		.cfi_def_cfa_offset 3
 1070               		.cfi_offset 16, -2
 1071               	/* prologue: function */
 1072               	/* frame size = 0 */
 1073               	/* stack size = 1 */
 1074               	.L__stack_usage = 1
 225:glcd/unit_tests.c **** 	glcd_tiny_set_font(Font5x7,5,7,32,127);
 1075               		.loc 1 225 2 view .LVU207
 1076 0386 0FE7      		ldi r16,lo8(127)
 1077 0388 20E2      		ldi r18,lo8(32)
 1078 038a 47E0      		ldi r20,lo8(7)
 1079 038c 65E0      		ldi r22,lo8(5)
 1080 038e 80E0      		ldi r24,lo8(Font5x7)
 1081 0390 90E0      		ldi r25,hi8(Font5x7)
 1082 0392 0E94 0000 		call glcd_tiny_set_font
 1083               	.LVL74:
 226:glcd/unit_tests.c **** 	glcd_clear_buffer();
 1084               		.loc 1 226 2 view .LVU208
 1085 0396 0E94 0000 		call glcd_clear_buffer
 1086               	.LVL75:
 227:glcd/unit_tests.c **** 	glcd_tiny_draw_string(0,0,"Hello World!");
 1087               		.loc 1 227 2 view .LVU209
 1088 039a 40E0      		ldi r20,lo8(.LC3)
 1089 039c 50E0      		ldi r21,hi8(.LC3)
 1090 039e 60E0      		ldi r22,0
 1091 03a0 80E0      		ldi r24,0
 1092 03a2 0E94 0000 		call glcd_tiny_draw_string
 1093               	.LVL76:
 228:glcd/unit_tests.c **** 	glcd_write();
 1094               		.loc 1 228 2 view .LVU210
 1095 03a6 0E94 0000 		call glcd_write
 1096               	.LVL77:
 1097               	.L41:
 229:glcd/unit_tests.c **** 	while(1) {
 1098               		.loc 1 229 2 view .LVU211
 230:glcd/unit_tests.c **** 		DEMO_RETURN();
 1099               		.loc 1 230 3 view .LVU212
 1100 03aa 8091 0000 		lds r24,unit_test_return
 1101 03ae 8823      		tst r24
 1102 03b0 01F0      		breq .L41
 1103               		.loc 1 230 3 discriminator 1 view .LVU213
 1104 03b2 1092 0000 		sts unit_test_return,__zero_reg__
 1105               		.loc 1 230 3 discriminator 1 view .LVU214
 1106               	/* epilogue start */
 231:glcd/unit_tests.c **** 	}
 232:glcd/unit_tests.c **** }
 1107               		.loc 1 232 1 is_stmt 0 discriminator 1 view .LVU215
 1108 03b6 0F91      		pop r16
 1109 03b8 0895      		ret
 1110               		.cfi_endproc
 1111               	.LFE17:
 1113               		.section	.rodata.str1.1
 1114               	.LC4:
 1115 0018 5245 4354 		.string	"RECTANGLE DEMO"
 1115      414E 474C 
 1115      4520 4445 
 1115      4D4F 00
 1116               	.LC5:
 1117 0027 676C 6364 		.string	"glcd_draw_rect"
 1117      5F64 7261 
 1117      775F 7265 
 1117      6374 00
 1118               	.LC6:
 1119 0036 676C 6364 		.string	"glcd_draw_rect_thick"
 1119      5F64 7261 
 1119      775F 7265 
 1119      6374 5F74 
 1119      6869 636B 
 1120               	.LC7:
 1121 004b 676C 6364 		.string	"glcd_draw_rect_shadow"
 1121      5F64 7261 
 1121      775F 7265 
 1121      6374 5F73 
 1121      6861 646F 
 1122               		.text
 1123               	.global	glcd_test_rectangles
 1125               	glcd_test_rectangles:
 1126               	.LFB18:
 233:glcd/unit_tests.c **** 
 234:glcd/unit_tests.c **** void glcd_test_rectangles(void)
 235:glcd/unit_tests.c **** {
 1127               		.loc 1 235 1 is_stmt 1 view -0
 1128               		.cfi_startproc
 1129 03ba CF92      		push r12
 1130               	.LCFI51:
 1131               		.cfi_def_cfa_offset 3
 1132               		.cfi_offset 12, -2
 1133 03bc EF92      		push r14
 1134               	.LCFI52:
 1135               		.cfi_def_cfa_offset 4
 1136               		.cfi_offset 14, -3
 1137 03be 0F93      		push r16
 1138               	.LCFI53:
 1139               		.cfi_def_cfa_offset 5
 1140               		.cfi_offset 16, -4
 1141 03c0 CF93      		push r28
 1142               	.LCFI54:
 1143               		.cfi_def_cfa_offset 6
 1144               		.cfi_offset 28, -5
 1145 03c2 DF93      		push r29
 1146               	.LCFI55:
 1147               		.cfi_def_cfa_offset 7
 1148               		.cfi_offset 29, -6
 1149               	/* prologue: function */
 1150               	/* frame size = 0 */
 1151               	/* stack size = 5 */
 1152               	.L__stack_usage = 5
 236:glcd/unit_tests.c **** 	glcd_tiny_set_font(Font5x7,5,7,32,127);
 1153               		.loc 1 236 2 view .LVU217
 1154 03c4 0FE7      		ldi r16,lo8(127)
 1155 03c6 20E2      		ldi r18,lo8(32)
 1156 03c8 47E0      		ldi r20,lo8(7)
 1157 03ca 65E0      		ldi r22,lo8(5)
 1158 03cc 80E0      		ldi r24,lo8(Font5x7)
 1159 03ce 90E0      		ldi r25,hi8(Font5x7)
 1160 03d0 0E94 0000 		call glcd_tiny_set_font
 1161               	.LVL78:
 237:glcd/unit_tests.c **** 	glcd_clear_buffer();
 1162               		.loc 1 237 2 view .LVU218
 1163 03d4 0E94 0000 		call glcd_clear_buffer
 1164               	.LVL79:
 238:glcd/unit_tests.c **** 	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
 1165               		.loc 1 238 2 view .LVU219
 1166 03d8 40E0      		ldi r20,lo8(.LC4)
 1167 03da 50E0      		ldi r21,hi8(.LC4)
 1168 03dc 60E0      		ldi r22,0
 1169 03de 80E0      		ldi r24,0
 1170 03e0 0E94 0000 		call glcd_tiny_draw_string
 1171               	.LVL80:
 239:glcd/unit_tests.c **** 	glcd_write();
 1172               		.loc 1 239 2 view .LVU220
 1173 03e4 0E94 0000 		call glcd_write
 1174               	.LVL81:
 240:glcd/unit_tests.c **** 	delay_ms(200);
 1175               		.loc 1 240 2 view .LVU221
 1176               	.LBB125:
 1177               	.LBI125:
 166:/usr/avr/include/util/delay.h **** {
 1178               		.loc 3 166 1 view .LVU222
 1179               	.LBB126:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1180               		.loc 3 168 2 view .LVU223
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1181               		.loc 3 190 2 view .LVU224
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1182               		.loc 3 191 2 view .LVU225
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1183               		.loc 3 192 2 view .LVU226
 194:/usr/avr/include/util/delay.h **** 	{
 1184               		.loc 3 194 7 view .LVU227
 194:/usr/avr/include/util/delay.h **** 	{
 1185               		.loc 3 194 7 is_stmt 0 view .LVU228
 1186               	.LBE126:
 1187               	.LBE125:
 239:glcd/unit_tests.c **** 	delay_ms(200);
 1188               		.loc 1 239 2 view .LVU229
 1189 03e8 80ED      		ldi r24,lo8(-48)
 1190 03ea 97E0      		ldi r25,lo8(7)
 1191               	.LBB132:
 1192               	.LBB131:
 1193               	.LBB127:
 1194               	.LBB128:
 1195               		.loc 2 105 2 view .LVU230
 1196 03ec 28EC      		ldi r18,lo8(-56)
 1197 03ee 30E0      		ldi r19,0
 1198               	.LVL82:
 1199               	.L45:
 1200               		.loc 2 105 2 view .LVU231
 1201               	.LBE128:
 1202               	.LBE127:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1203               		.loc 3 201 4 is_stmt 1 view .LVU232
 1204               	.LBB130:
 1205               	.LBI127:
 103:/usr/avr/include/util/delay_basic.h **** {
 1206               		.loc 2 103 1 view .LVU233
 1207               	.LBB129:
 1208               		.loc 2 105 2 view .LVU234
 1209 03f0 F901      		movw r30,r18
 1210               	/* #APP */
 1211               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1212 03f2 3197      		1: sbiw r30,1
 1213 03f4 01F4      		brne 1b
 1214               	 ;  0 "" 2
 1215               	.LVL83:
 1216               		.loc 2 105 2 is_stmt 0 view .LVU235
 1217               	/* #NOAPP */
 1218               	.LBE129:
 1219               	.LBE130:
 202:/usr/avr/include/util/delay.h **** 		}
 1220               		.loc 3 202 4 is_stmt 1 view .LVU236
 202:/usr/avr/include/util/delay.h **** 		}
 1221               		.loc 3 202 4 is_stmt 0 view .LVU237
 1222 03f6 0197      		sbiw r24,1
 1223               	.LVL84:
 198:/usr/avr/include/util/delay.h **** 		{
 1224               		.loc 3 198 8 view .LVU238
 1225 03f8 01F4      		brne .L45
 1226               	.LBE131:
 1227               	.LBE132:
 1228               	.LBB133:
 1229               	.LBB134:
 1230               	.LBB135:
 1231               	.LBB136:
 1232               		.loc 2 105 2 view .LVU239
 1233 03fa C8EC      		ldi r28,lo8(-56)
 1234 03fc D0E0      		ldi r29,0
 1235               	.LVL85:
 1236               	.L58:
 1237               		.loc 2 105 2 view .LVU240
 1238               	.LBE136:
 1239               	.LBE135:
 1240               	.LBE134:
 1241               	.LBE133:
 241:glcd/unit_tests.c **** 	
 242:glcd/unit_tests.c **** 	while(1) {
 1242               		.loc 1 242 2 is_stmt 1 view .LVU241
 243:glcd/unit_tests.c **** 		
 244:glcd/unit_tests.c **** 		glcd_clear();
 1243               		.loc 1 244 3 view .LVU242
 1244 03fe 0E94 0000 		call glcd_clear
 1245               	.LVL86:
 245:glcd/unit_tests.c **** 		glcd_draw_rect(0,0,100,50,BLACK);
 1246               		.loc 1 245 3 view .LVU243
 1247 0402 01E0      		ldi r16,lo8(1)
 1248 0404 22E3      		ldi r18,lo8(50)
 1249 0406 44E6      		ldi r20,lo8(100)
 1250 0408 60E0      		ldi r22,0
 1251 040a 80E0      		ldi r24,0
 1252 040c 0E94 0000 		call glcd_draw_rect
 1253               	.LVL87:
 246:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
 1254               		.loc 1 246 3 view .LVU244
 1255 0410 40E0      		ldi r20,lo8(.LC5)
 1256 0412 50E0      		ldi r21,hi8(.LC5)
 1257 0414 69E0      		ldi r22,lo8(9)
 1258 0416 80E0      		ldi r24,0
 1259 0418 0E94 0000 		call glcd_tiny_draw_string
 1260               	.LVL88:
 247:glcd/unit_tests.c **** 		glcd_write();
 1261               		.loc 1 247 3 view .LVU245
 1262 041c 0E94 0000 		call glcd_write
 1263               	.LVL89:
 248:glcd/unit_tests.c **** 		delay_ms(500);
 1264               		.loc 1 248 3 view .LVU246
 1265               	.LBB141:
 1266               	.LBI133:
 166:/usr/avr/include/util/delay.h **** {
 1267               		.loc 3 166 1 view .LVU247
 1268               	.LBB139:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1269               		.loc 3 168 2 view .LVU248
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1270               		.loc 3 190 2 view .LVU249
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1271               		.loc 3 191 2 view .LVU250
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1272               		.loc 3 192 2 view .LVU251
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1273               		.loc 3 192 2 is_stmt 0 view .LVU252
 1274               	.LBE139:
 1275               	.LBE141:
 247:glcd/unit_tests.c **** 		delay_ms(500);
 1276               		.loc 1 247 3 view .LVU253
 1277 0420 88E8      		ldi r24,lo8(-120)
 1278 0422 93E1      		ldi r25,lo8(19)
 1279               	.LVL90:
 1280               	.L46:
 1281               	.LBB142:
 1282               	.LBB140:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1283               		.loc 3 201 4 is_stmt 1 view .LVU254
 1284               	.LBB138:
 1285               	.LBI135:
 103:/usr/avr/include/util/delay_basic.h **** {
 1286               		.loc 2 103 1 view .LVU255
 1287               	.LBB137:
 1288               		.loc 2 105 2 view .LVU256
 1289 0424 FE01      		movw r30,r28
 1290               	/* #APP */
 1291               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1292 0426 3197      		1: sbiw r30,1
 1293 0428 01F4      		brne 1b
 1294               	 ;  0 "" 2
 1295               	.LVL91:
 1296               		.loc 2 105 2 is_stmt 0 view .LVU257
 1297               	/* #NOAPP */
 1298               	.LBE137:
 1299               	.LBE138:
 202:/usr/avr/include/util/delay.h **** 		}
 1300               		.loc 3 202 4 is_stmt 1 view .LVU258
 202:/usr/avr/include/util/delay.h **** 		}
 1301               		.loc 3 202 4 is_stmt 0 view .LVU259
 1302 042a 0197      		sbiw r24,1
 1303               	.LVL92:
 198:/usr/avr/include/util/delay.h **** 		{
 1304               		.loc 3 198 8 view .LVU260
 1305 042c 01F4      		brne .L46
 1306               	.LVL93:
 198:/usr/avr/include/util/delay.h **** 		{
 1307               		.loc 3 198 8 view .LVU261
 1308               	.LBE140:
 1309               	.LBE142:
 249:glcd/unit_tests.c **** 		DEMO_RETURN();
 1310               		.loc 1 249 3 is_stmt 1 view .LVU262
 1311 042e 8091 0000 		lds r24,unit_test_return
 1312 0432 8823      		tst r24
 1313 0434 01F0      		breq .L47
 1314               	.L68:
 250:glcd/unit_tests.c **** 		
 251:glcd/unit_tests.c **** 		glcd_clear();
 252:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
 253:glcd/unit_tests.c **** 		glcd_write();
 254:glcd/unit_tests.c **** 
 255:glcd/unit_tests.c **** 		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
 256:glcd/unit_tests.c **** 		glcd_write();
 257:glcd/unit_tests.c **** 		delay_ms(500);
 258:glcd/unit_tests.c **** 		DEMO_RETURN();
 259:glcd/unit_tests.c **** 		
 260:glcd/unit_tests.c **** 		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
 261:glcd/unit_tests.c **** 		glcd_write();
 262:glcd/unit_tests.c **** 		delay_ms(500);
 263:glcd/unit_tests.c **** 		DEMO_RETURN();
 264:glcd/unit_tests.c **** 		
 265:glcd/unit_tests.c **** 		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
 266:glcd/unit_tests.c **** 		glcd_write();
 267:glcd/unit_tests.c **** 		delay_ms(500);
 268:glcd/unit_tests.c **** 		DEMO_RETURN();
 269:glcd/unit_tests.c **** 
 270:glcd/unit_tests.c **** 		glcd_clear();
 271:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
 272:glcd/unit_tests.c **** 		glcd_draw_rect_shadow(0,0,45,30,BLACK);
 273:glcd/unit_tests.c **** 		glcd_write();
 274:glcd/unit_tests.c **** 		delay_ms(500);
 275:glcd/unit_tests.c **** 		DEMO_RETURN();
 276:glcd/unit_tests.c **** 		
 277:glcd/unit_tests.c **** 		glcd_draw_rect_shadow(95,5,30,30,BLACK);
 278:glcd/unit_tests.c **** 		glcd_write();
 279:glcd/unit_tests.c **** 		delay_ms(500);
 280:glcd/unit_tests.c **** 		DEMO_RETURN();
 1315               		.loc 1 280 3 discriminator 1 view .LVU263
 1316 0436 1092 0000 		sts unit_test_return,__zero_reg__
 1317               		.loc 1 280 3 discriminator 1 view .LVU264
 1318               	/* epilogue start */
 281:glcd/unit_tests.c **** 		
 282:glcd/unit_tests.c **** 	}
 283:glcd/unit_tests.c **** 	
 284:glcd/unit_tests.c **** }
 1319               		.loc 1 284 1 is_stmt 0 discriminator 1 view .LVU265
 1320 043a DF91      		pop r29
 1321 043c CF91      		pop r28
 1322 043e 0F91      		pop r16
 1323 0440 EF90      		pop r14
 1324 0442 CF90      		pop r12
 1325 0444 0895      		ret
 1326               	.L47:
 249:glcd/unit_tests.c **** 		
 1327               		.loc 1 249 16 is_stmt 1 discriminator 2 view .LVU266
 251:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
 1328               		.loc 1 251 3 discriminator 2 view .LVU267
 1329 0446 0E94 0000 		call glcd_clear
 1330               	.LVL94:
 252:glcd/unit_tests.c **** 		glcd_write();
 1331               		.loc 1 252 3 discriminator 2 view .LVU268
 1332 044a 40E0      		ldi r20,lo8(.LC6)
 1333 044c 50E0      		ldi r21,hi8(.LC6)
 1334 044e 69E0      		ldi r22,lo8(9)
 1335 0450 80E0      		ldi r24,0
 1336 0452 0E94 0000 		call glcd_tiny_draw_string
 1337               	.LVL95:
 253:glcd/unit_tests.c **** 
 1338               		.loc 1 253 3 discriminator 2 view .LVU269
 1339 0456 0E94 0000 		call glcd_write
 1340               	.LVL96:
 255:glcd/unit_tests.c **** 		glcd_write();
 1341               		.loc 1 255 3 discriminator 2 view .LVU270
 1342 045a CC24      		clr r12
 1343 045c C394      		inc r12
 1344 045e 26E0      		ldi r18,lo8(6)
 1345 0460 E22E      		mov r14,r18
 1346 0462 03E0      		ldi r16,lo8(3)
 1347 0464 2EE1      		ldi r18,lo8(30)
 1348 0466 40E5      		ldi r20,lo8(80)
 1349 0468 65E0      		ldi r22,lo8(5)
 1350 046a 85E0      		ldi r24,lo8(5)
 1351 046c 0E94 0000 		call glcd_draw_rect_thick
 1352               	.LVL97:
 256:glcd/unit_tests.c **** 		delay_ms(500);
 1353               		.loc 1 256 3 discriminator 2 view .LVU271
 1354 0470 0E94 0000 		call glcd_write
 1355               	.LVL98:
 257:glcd/unit_tests.c **** 		DEMO_RETURN();
 1356               		.loc 1 257 3 discriminator 2 view .LVU272
 1357               	.LBB143:
 1358               	.LBI143:
 166:/usr/avr/include/util/delay.h **** {
 1359               		.loc 3 166 1 discriminator 2 view .LVU273
 1360               	.LBB144:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1361               		.loc 3 168 2 discriminator 2 view .LVU274
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1362               		.loc 3 190 2 discriminator 2 view .LVU275
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1363               		.loc 3 191 2 discriminator 2 view .LVU276
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1364               		.loc 3 192 2 discriminator 2 view .LVU277
 194:/usr/avr/include/util/delay.h **** 	{
 1365               		.loc 3 194 7 discriminator 2 view .LVU278
 194:/usr/avr/include/util/delay.h **** 	{
 1366               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU279
 1367               	.LBE144:
 1368               	.LBE143:
 256:glcd/unit_tests.c **** 		delay_ms(500);
 1369               		.loc 1 256 3 discriminator 2 view .LVU280
 1370 0474 88E8      		ldi r24,lo8(-120)
 1371 0476 93E1      		ldi r25,lo8(19)
 1372               	.LVL99:
 1373               	.L49:
 1374               	.LBB148:
 1375               	.LBB147:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1376               		.loc 3 201 4 is_stmt 1 view .LVU281
 1377               	.LBB145:
 1378               	.LBI145:
 103:/usr/avr/include/util/delay_basic.h **** {
 1379               		.loc 2 103 1 view .LVU282
 1380               	.LBB146:
 1381               		.loc 2 105 2 view .LVU283
 1382 0478 FE01      		movw r30,r28
 1383               	/* #APP */
 1384               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1385 047a 3197      		1: sbiw r30,1
 1386 047c 01F4      		brne 1b
 1387               	 ;  0 "" 2
 1388               	.LVL100:
 1389               		.loc 2 105 2 is_stmt 0 view .LVU284
 1390               	/* #NOAPP */
 1391               	.LBE146:
 1392               	.LBE145:
 202:/usr/avr/include/util/delay.h **** 		}
 1393               		.loc 3 202 4 is_stmt 1 view .LVU285
 202:/usr/avr/include/util/delay.h **** 		}
 1394               		.loc 3 202 4 is_stmt 0 view .LVU286
 1395 047e 0197      		sbiw r24,1
 1396               	.LVL101:
 198:/usr/avr/include/util/delay.h **** 		{
 1397               		.loc 3 198 8 view .LVU287
 1398 0480 01F4      		brne .L49
 1399               	.LVL102:
 198:/usr/avr/include/util/delay.h **** 		{
 1400               		.loc 3 198 8 view .LVU288
 1401               	.LBE147:
 1402               	.LBE148:
 258:glcd/unit_tests.c **** 		
 1403               		.loc 1 258 3 is_stmt 1 discriminator 2 view .LVU289
 1404 0482 8091 0000 		lds r24,unit_test_return
 1405 0486 8111      		cpse r24,__zero_reg__
 1406 0488 00C0      		rjmp .L68
 258:glcd/unit_tests.c **** 		
 1407               		.loc 1 258 16 discriminator 2 view .LVU290
 260:glcd/unit_tests.c **** 		glcd_write();
 1408               		.loc 1 260 3 discriminator 2 view .LVU291
 1409 048a CC24      		clr r12
 1410 048c C394      		inc r12
 1411 048e 92E0      		ldi r25,lo8(2)
 1412 0490 E92E      		mov r14,r25
 1413 0492 02E0      		ldi r16,lo8(2)
 1414 0494 24E1      		ldi r18,lo8(20)
 1415 0496 44E1      		ldi r20,lo8(20)
 1416 0498 60E0      		ldi r22,0
 1417 049a 80E0      		ldi r24,0
 1418 049c 0E94 0000 		call glcd_draw_rect_thick
 1419               	.LVL103:
 261:glcd/unit_tests.c **** 		delay_ms(500);
 1420               		.loc 1 261 3 discriminator 2 view .LVU292
 1421 04a0 0E94 0000 		call glcd_write
 1422               	.LVL104:
 262:glcd/unit_tests.c **** 		DEMO_RETURN();
 1423               		.loc 1 262 3 discriminator 2 view .LVU293
 1424               	.LBB149:
 1425               	.LBI149:
 166:/usr/avr/include/util/delay.h **** {
 1426               		.loc 3 166 1 discriminator 2 view .LVU294
 1427               	.LBB150:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1428               		.loc 3 168 2 discriminator 2 view .LVU295
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1429               		.loc 3 190 2 discriminator 2 view .LVU296
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1430               		.loc 3 191 2 discriminator 2 view .LVU297
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1431               		.loc 3 192 2 discriminator 2 view .LVU298
 194:/usr/avr/include/util/delay.h **** 	{
 1432               		.loc 3 194 7 discriminator 2 view .LVU299
 194:/usr/avr/include/util/delay.h **** 	{
 1433               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU300
 1434               	.LBE150:
 1435               	.LBE149:
 261:glcd/unit_tests.c **** 		delay_ms(500);
 1436               		.loc 1 261 3 discriminator 2 view .LVU301
 1437 04a4 88E8      		ldi r24,lo8(-120)
 1438 04a6 93E1      		ldi r25,lo8(19)
 1439               	.LVL105:
 1440               	.L51:
 1441               	.LBB154:
 1442               	.LBB153:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1443               		.loc 3 201 4 is_stmt 1 view .LVU302
 1444               	.LBB151:
 1445               	.LBI151:
 103:/usr/avr/include/util/delay_basic.h **** {
 1446               		.loc 2 103 1 view .LVU303
 1447               	.LBB152:
 1448               		.loc 2 105 2 view .LVU304
 1449 04a8 FE01      		movw r30,r28
 1450               	/* #APP */
 1451               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1452 04aa 3197      		1: sbiw r30,1
 1453 04ac 01F4      		brne 1b
 1454               	 ;  0 "" 2
 1455               	.LVL106:
 1456               		.loc 2 105 2 is_stmt 0 view .LVU305
 1457               	/* #NOAPP */
 1458               	.LBE152:
 1459               	.LBE151:
 202:/usr/avr/include/util/delay.h **** 		}
 1460               		.loc 3 202 4 is_stmt 1 view .LVU306
 202:/usr/avr/include/util/delay.h **** 		}
 1461               		.loc 3 202 4 is_stmt 0 view .LVU307
 1462 04ae 0197      		sbiw r24,1
 1463               	.LVL107:
 198:/usr/avr/include/util/delay.h **** 		{
 1464               		.loc 3 198 8 view .LVU308
 1465 04b0 01F4      		brne .L51
 1466               	.LVL108:
 198:/usr/avr/include/util/delay.h **** 		{
 1467               		.loc 3 198 8 view .LVU309
 1468               	.LBE153:
 1469               	.LBE154:
 263:glcd/unit_tests.c **** 		
 1470               		.loc 1 263 3 is_stmt 1 discriminator 2 view .LVU310
 1471 04b2 8091 0000 		lds r24,unit_test_return
 1472 04b6 8111      		cpse r24,__zero_reg__
 1473 04b8 00C0      		rjmp .L68
 263:glcd/unit_tests.c **** 		
 1474               		.loc 1 263 16 discriminator 2 view .LVU311
 265:glcd/unit_tests.c **** 		glcd_write();
 1475               		.loc 1 265 3 discriminator 2 view .LVU312
 1476 04ba CC24      		clr r12
 1477 04bc C394      		inc r12
 1478 04be 85E0      		ldi r24,lo8(5)
 1479 04c0 E82E      		mov r14,r24
 1480 04c2 05E0      		ldi r16,lo8(5)
 1481 04c4 24E1      		ldi r18,lo8(20)
 1482 04c6 44E1      		ldi r20,lo8(20)
 1483 04c8 6AE0      		ldi r22,lo8(10)
 1484 04ca 84E6      		ldi r24,lo8(100)
 1485 04cc 0E94 0000 		call glcd_draw_rect_thick
 1486               	.LVL109:
 266:glcd/unit_tests.c **** 		delay_ms(500);
 1487               		.loc 1 266 3 discriminator 2 view .LVU313
 1488 04d0 0E94 0000 		call glcd_write
 1489               	.LVL110:
 267:glcd/unit_tests.c **** 		DEMO_RETURN();
 1490               		.loc 1 267 3 discriminator 2 view .LVU314
 1491               	.LBB155:
 1492               	.LBI155:
 166:/usr/avr/include/util/delay.h **** {
 1493               		.loc 3 166 1 discriminator 2 view .LVU315
 1494               	.LBB156:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1495               		.loc 3 168 2 discriminator 2 view .LVU316
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1496               		.loc 3 190 2 discriminator 2 view .LVU317
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1497               		.loc 3 191 2 discriminator 2 view .LVU318
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1498               		.loc 3 192 2 discriminator 2 view .LVU319
 194:/usr/avr/include/util/delay.h **** 	{
 1499               		.loc 3 194 7 discriminator 2 view .LVU320
 194:/usr/avr/include/util/delay.h **** 	{
 1500               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU321
 1501               	.LBE156:
 1502               	.LBE155:
 266:glcd/unit_tests.c **** 		delay_ms(500);
 1503               		.loc 1 266 3 discriminator 2 view .LVU322
 1504 04d4 88E8      		ldi r24,lo8(-120)
 1505 04d6 93E1      		ldi r25,lo8(19)
 1506               	.LVL111:
 1507               	.L53:
 1508               	.LBB160:
 1509               	.LBB159:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1510               		.loc 3 201 4 is_stmt 1 view .LVU323
 1511               	.LBB157:
 1512               	.LBI157:
 103:/usr/avr/include/util/delay_basic.h **** {
 1513               		.loc 2 103 1 view .LVU324
 1514               	.LBB158:
 1515               		.loc 2 105 2 view .LVU325
 1516 04d8 FE01      		movw r30,r28
 1517               	/* #APP */
 1518               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1519 04da 3197      		1: sbiw r30,1
 1520 04dc 01F4      		brne 1b
 1521               	 ;  0 "" 2
 1522               	.LVL112:
 1523               		.loc 2 105 2 is_stmt 0 view .LVU326
 1524               	/* #NOAPP */
 1525               	.LBE158:
 1526               	.LBE157:
 202:/usr/avr/include/util/delay.h **** 		}
 1527               		.loc 3 202 4 is_stmt 1 view .LVU327
 202:/usr/avr/include/util/delay.h **** 		}
 1528               		.loc 3 202 4 is_stmt 0 view .LVU328
 1529 04de 0197      		sbiw r24,1
 1530               	.LVL113:
 198:/usr/avr/include/util/delay.h **** 		{
 1531               		.loc 3 198 8 view .LVU329
 1532 04e0 01F4      		brne .L53
 1533               	.LVL114:
 198:/usr/avr/include/util/delay.h **** 		{
 1534               		.loc 3 198 8 view .LVU330
 1535               	.LBE159:
 1536               	.LBE160:
 268:glcd/unit_tests.c **** 
 1537               		.loc 1 268 3 is_stmt 1 discriminator 2 view .LVU331
 1538 04e2 8091 0000 		lds r24,unit_test_return
 1539 04e6 8111      		cpse r24,__zero_reg__
 1540 04e8 00C0      		rjmp .L68
 268:glcd/unit_tests.c **** 
 1541               		.loc 1 268 16 discriminator 2 view .LVU332
 270:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
 1542               		.loc 1 270 3 discriminator 2 view .LVU333
 1543 04ea 0E94 0000 		call glcd_clear
 1544               	.LVL115:
 271:glcd/unit_tests.c **** 		glcd_draw_rect_shadow(0,0,45,30,BLACK);
 1545               		.loc 1 271 3 discriminator 2 view .LVU334
 1546 04ee 40E0      		ldi r20,lo8(.LC7)
 1547 04f0 50E0      		ldi r21,hi8(.LC7)
 1548 04f2 69E0      		ldi r22,lo8(9)
 1549 04f4 80E0      		ldi r24,0
 1550 04f6 0E94 0000 		call glcd_tiny_draw_string
 1551               	.LVL116:
 272:glcd/unit_tests.c **** 		glcd_write();
 1552               		.loc 1 272 3 discriminator 2 view .LVU335
 1553 04fa 01E0      		ldi r16,lo8(1)
 1554 04fc 2EE1      		ldi r18,lo8(30)
 1555 04fe 4DE2      		ldi r20,lo8(45)
 1556 0500 60E0      		ldi r22,0
 1557 0502 80E0      		ldi r24,0
 1558 0504 0E94 0000 		call glcd_draw_rect_shadow
 1559               	.LVL117:
 273:glcd/unit_tests.c **** 		delay_ms(500);
 1560               		.loc 1 273 3 discriminator 2 view .LVU336
 1561 0508 0E94 0000 		call glcd_write
 1562               	.LVL118:
 274:glcd/unit_tests.c **** 		DEMO_RETURN();
 1563               		.loc 1 274 3 discriminator 2 view .LVU337
 1564               	.LBB161:
 1565               	.LBI161:
 166:/usr/avr/include/util/delay.h **** {
 1566               		.loc 3 166 1 discriminator 2 view .LVU338
 1567               	.LBB162:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1568               		.loc 3 168 2 discriminator 2 view .LVU339
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1569               		.loc 3 190 2 discriminator 2 view .LVU340
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1570               		.loc 3 191 2 discriminator 2 view .LVU341
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1571               		.loc 3 192 2 discriminator 2 view .LVU342
 194:/usr/avr/include/util/delay.h **** 	{
 1572               		.loc 3 194 7 discriminator 2 view .LVU343
 194:/usr/avr/include/util/delay.h **** 	{
 1573               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU344
 1574               	.LBE162:
 1575               	.LBE161:
 273:glcd/unit_tests.c **** 		delay_ms(500);
 1576               		.loc 1 273 3 discriminator 2 view .LVU345
 1577 050c 88E8      		ldi r24,lo8(-120)
 1578 050e 93E1      		ldi r25,lo8(19)
 1579               	.LVL119:
 1580               	.L55:
 1581               	.LBB166:
 1582               	.LBB165:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1583               		.loc 3 201 4 is_stmt 1 view .LVU346
 1584               	.LBB163:
 1585               	.LBI163:
 103:/usr/avr/include/util/delay_basic.h **** {
 1586               		.loc 2 103 1 view .LVU347
 1587               	.LBB164:
 1588               		.loc 2 105 2 view .LVU348
 1589 0510 FE01      		movw r30,r28
 1590               	/* #APP */
 1591               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1592 0512 3197      		1: sbiw r30,1
 1593 0514 01F4      		brne 1b
 1594               	 ;  0 "" 2
 1595               	.LVL120:
 1596               		.loc 2 105 2 is_stmt 0 view .LVU349
 1597               	/* #NOAPP */
 1598               	.LBE164:
 1599               	.LBE163:
 202:/usr/avr/include/util/delay.h **** 		}
 1600               		.loc 3 202 4 is_stmt 1 view .LVU350
 202:/usr/avr/include/util/delay.h **** 		}
 1601               		.loc 3 202 4 is_stmt 0 view .LVU351
 1602 0516 0197      		sbiw r24,1
 1603               	.LVL121:
 198:/usr/avr/include/util/delay.h **** 		{
 1604               		.loc 3 198 8 view .LVU352
 1605 0518 01F4      		brne .L55
 1606               	.LVL122:
 198:/usr/avr/include/util/delay.h **** 		{
 1607               		.loc 3 198 8 view .LVU353
 1608               	.LBE165:
 1609               	.LBE166:
 275:glcd/unit_tests.c **** 		
 1610               		.loc 1 275 3 is_stmt 1 discriminator 2 view .LVU354
 1611 051a 8091 0000 		lds r24,unit_test_return
 1612 051e 8111      		cpse r24,__zero_reg__
 1613 0520 00C0      		rjmp .L68
 275:glcd/unit_tests.c **** 		
 1614               		.loc 1 275 16 discriminator 2 view .LVU355
 277:glcd/unit_tests.c **** 		glcd_write();
 1615               		.loc 1 277 3 discriminator 2 view .LVU356
 1616 0522 01E0      		ldi r16,lo8(1)
 1617 0524 2EE1      		ldi r18,lo8(30)
 1618 0526 4EE1      		ldi r20,lo8(30)
 1619 0528 65E0      		ldi r22,lo8(5)
 1620 052a 8FE5      		ldi r24,lo8(95)
 1621 052c 0E94 0000 		call glcd_draw_rect_shadow
 1622               	.LVL123:
 278:glcd/unit_tests.c **** 		delay_ms(500);
 1623               		.loc 1 278 3 discriminator 2 view .LVU357
 1624 0530 0E94 0000 		call glcd_write
 1625               	.LVL124:
 279:glcd/unit_tests.c **** 		DEMO_RETURN();
 1626               		.loc 1 279 3 discriminator 2 view .LVU358
 1627               	.LBB167:
 1628               	.LBI167:
 166:/usr/avr/include/util/delay.h **** {
 1629               		.loc 3 166 1 discriminator 2 view .LVU359
 1630               	.LBB168:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1631               		.loc 3 168 2 discriminator 2 view .LVU360
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1632               		.loc 3 190 2 discriminator 2 view .LVU361
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1633               		.loc 3 191 2 discriminator 2 view .LVU362
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1634               		.loc 3 192 2 discriminator 2 view .LVU363
 194:/usr/avr/include/util/delay.h **** 	{
 1635               		.loc 3 194 7 discriminator 2 view .LVU364
 194:/usr/avr/include/util/delay.h **** 	{
 1636               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU365
 1637               	.LBE168:
 1638               	.LBE167:
 278:glcd/unit_tests.c **** 		delay_ms(500);
 1639               		.loc 1 278 3 discriminator 2 view .LVU366
 1640 0534 88E8      		ldi r24,lo8(-120)
 1641 0536 93E1      		ldi r25,lo8(19)
 1642               	.LVL125:
 1643               	.L57:
 1644               	.LBB172:
 1645               	.LBB171:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1646               		.loc 3 201 4 is_stmt 1 view .LVU367
 1647               	.LBB169:
 1648               	.LBI169:
 103:/usr/avr/include/util/delay_basic.h **** {
 1649               		.loc 2 103 1 view .LVU368
 1650               	.LBB170:
 1651               		.loc 2 105 2 view .LVU369
 1652 0538 FE01      		movw r30,r28
 1653               	/* #APP */
 1654               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1655 053a 3197      		1: sbiw r30,1
 1656 053c 01F4      		brne 1b
 1657               	 ;  0 "" 2
 1658               	.LVL126:
 1659               		.loc 2 105 2 is_stmt 0 view .LVU370
 1660               	/* #NOAPP */
 1661               	.LBE170:
 1662               	.LBE169:
 202:/usr/avr/include/util/delay.h **** 		}
 1663               		.loc 3 202 4 is_stmt 1 view .LVU371
 202:/usr/avr/include/util/delay.h **** 		}
 1664               		.loc 3 202 4 is_stmt 0 view .LVU372
 1665 053e 0197      		sbiw r24,1
 1666               	.LVL127:
 198:/usr/avr/include/util/delay.h **** 		{
 1667               		.loc 3 198 8 view .LVU373
 1668 0540 01F4      		brne .L57
 1669               	.LVL128:
 198:/usr/avr/include/util/delay.h **** 		{
 1670               		.loc 3 198 8 view .LVU374
 1671               	.LBE171:
 1672               	.LBE172:
 280:glcd/unit_tests.c **** 		
 1673               		.loc 1 280 3 is_stmt 1 discriminator 2 view .LVU375
 1674 0542 8091 0000 		lds r24,unit_test_return
 1675 0546 8823      		tst r24
 1676 0548 01F4      		brne .+2
 1677 054a 00C0      		rjmp .L58
 1678 054c 00C0      		rjmp .L68
 1679               		.cfi_endproc
 1680               	.LFE18:
 1682               	.global	glcd_test_scrolling_graph
 1684               	glcd_test_scrolling_graph:
 1685               	.LFB19:
 285:glcd/unit_tests.c **** 
 286:glcd/unit_tests.c **** void glcd_test_scrolling_graph(void)
 287:glcd/unit_tests.c **** {
 1686               		.loc 1 287 1 view -0
 1687               		.cfi_startproc
 1688 054e 0F93      		push r16
 1689               	.LCFI56:
 1690               		.cfi_def_cfa_offset 3
 1691               		.cfi_offset 16, -2
 1692 0550 CF93      		push r28
 1693               	.LCFI57:
 1694               		.cfi_def_cfa_offset 4
 1695               		.cfi_offset 28, -3
 1696 0552 DF93      		push r29
 1697               	.LCFI58:
 1698               		.cfi_def_cfa_offset 5
 1699               		.cfi_offset 29, -4
 1700               	/* prologue: function */
 1701               	/* frame size = 0 */
 1702               	/* stack size = 3 */
 1703               	.L__stack_usage = 3
 288:glcd/unit_tests.c **** 	glcd_clear();
 1704               		.loc 1 288 2 view .LVU377
 1705 0554 0E94 0000 		call glcd_clear
 1706               	.LVL129:
 289:glcd/unit_tests.c **** 	glcd_write();
 1707               		.loc 1 289 2 view .LVU378
 1708 0558 0E94 0000 		call glcd_write
 1709               	.LVL130:
 1710               	.L75:
 290:glcd/unit_tests.c **** 	while(1) {
 1711               		.loc 1 290 2 view .LVU379
 1712               	.LBB173:
 291:glcd/unit_tests.c **** 		uint16_t n;
 1713               		.loc 1 291 3 view .LVU380
 292:glcd/unit_tests.c **** 		for (n=0; n<=255; n += 20) {
 1714               		.loc 1 292 3 view .LVU381
 1715               		.loc 1 292 3 is_stmt 0 view .LVU382
 1716               	.LBE173:
 287:glcd/unit_tests.c **** 	glcd_clear();
 1717               		.loc 1 287 1 view .LVU383
 1718 055c C0E0      		ldi r28,0
 1719               	.LVL131:
 1720               	.L72:
 1721               	.LBB174:
 293:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,n);
 1722               		.loc 1 293 4 is_stmt 1 view .LVU384
 1723 055e 0C2F      		mov r16,r28
 1724 0560 22E3      		ldi r18,lo8(50)
 1725 0562 42E3      		ldi r20,lo8(50)
 1726 0564 60E0      		ldi r22,0
 1727 0566 80E0      		ldi r24,0
 1728 0568 0E94 0000 		call glcd_scrolling_bar_graph
 1729               	.LVL132:
 294:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,0,50,30,n);
 1730               		.loc 1 294 4 view .LVU385
 1731 056c 2EE1      		ldi r18,lo8(30)
 1732 056e 42E3      		ldi r20,lo8(50)
 1733 0570 60E0      		ldi r22,0
 1734 0572 8CE3      		ldi r24,lo8(60)
 1735 0574 0E94 0000 		call glcd_scrolling_bar_graph
 1736               	.LVL133:
 295:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,35,60,20,n);
 1737               		.loc 1 295 4 view .LVU386
 1738 0578 24E1      		ldi r18,lo8(20)
 1739 057a 4CE3      		ldi r20,lo8(60)
 1740 057c 63E2      		ldi r22,lo8(35)
 1741 057e 8CE3      		ldi r24,lo8(60)
 1742 0580 0E94 0000 		call glcd_scrolling_bar_graph
 1743               	.LVL134:
 296:glcd/unit_tests.c **** 			DEMO_RETURN();
 1744               		.loc 1 296 4 view .LVU387
 1745 0584 8091 0000 		lds r24,unit_test_return
 1746 0588 8823      		tst r24
 1747 058a 01F0      		breq .L70
 1748               	.L78:
 297:glcd/unit_tests.c **** 		}
 298:glcd/unit_tests.c **** 		for (n=0; n<=255; n += 20) {
 299:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,255-n);
 300:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,0,50,30,n);
 301:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,35,60,20,n);
 302:glcd/unit_tests.c **** 			DEMO_RETURN();
 1749               		.loc 1 302 4 discriminator 1 view .LVU388
 1750 058c 1092 0000 		sts unit_test_return,__zero_reg__
 1751               		.loc 1 302 4 discriminator 1 view .LVU389
 1752               	/* epilogue start */
 1753               	.LBE174:
 303:glcd/unit_tests.c **** 		}
 304:glcd/unit_tests.c **** 	}	
 305:glcd/unit_tests.c **** }
 1754               		.loc 1 305 1 is_stmt 0 discriminator 1 view .LVU390
 1755 0590 DF91      		pop r29
 1756 0592 CF91      		pop r28
 1757 0594 0F91      		pop r16
 1758 0596 0895      		ret
 1759               	.L70:
 1760               	.LBB175:
 296:glcd/unit_tests.c **** 		}
 1761               		.loc 1 296 17 is_stmt 1 discriminator 2 view .LVU391
 296:glcd/unit_tests.c **** 		}
 1762               		.loc 1 296 17 is_stmt 0 discriminator 2 view .LVU392
 1763 0598 CC5E      		subi r28,lo8(-(20))
 292:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,n);
 1764               		.loc 1 292 3 discriminator 2 view .LVU393
 1765 059a C430      		cpi r28,lo8(4)
 1766 059c 01F4      		brne .L72
 1767 059e CFEF      		ldi r28,lo8(-1)
 1768               	.L74:
 299:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,0,50,30,n);
 1769               		.loc 1 299 4 is_stmt 1 view .LVU394
 1770 05a0 0C2F      		mov r16,r28
 1771 05a2 22E3      		ldi r18,lo8(50)
 1772 05a4 42E3      		ldi r20,lo8(50)
 1773 05a6 60E0      		ldi r22,0
 1774 05a8 80E0      		ldi r24,0
 1775 05aa 0E94 0000 		call glcd_scrolling_bar_graph
 1776               	.LVL135:
 300:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,35,60,20,n);
 1777               		.loc 1 300 4 view .LVU395
 1778 05ae DC2F      		mov r29,r28
 1779 05b0 D095      		com r29
 1780 05b2 0D2F      		mov r16,r29
 1781 05b4 2EE1      		ldi r18,lo8(30)
 1782 05b6 42E3      		ldi r20,lo8(50)
 1783 05b8 60E0      		ldi r22,0
 1784 05ba 8CE3      		ldi r24,lo8(60)
 1785 05bc 0E94 0000 		call glcd_scrolling_bar_graph
 1786               	.LVL136:
 301:glcd/unit_tests.c **** 			DEMO_RETURN();
 1787               		.loc 1 301 4 view .LVU396
 1788 05c0 24E1      		ldi r18,lo8(20)
 1789 05c2 4CE3      		ldi r20,lo8(60)
 1790 05c4 63E2      		ldi r22,lo8(35)
 1791 05c6 8CE3      		ldi r24,lo8(60)
 1792 05c8 0E94 0000 		call glcd_scrolling_bar_graph
 1793               	.LVL137:
 302:glcd/unit_tests.c **** 		}
 1794               		.loc 1 302 4 view .LVU397
 1795 05cc 8091 0000 		lds r24,unit_test_return
 1796 05d0 8111      		cpse r24,__zero_reg__
 1797 05d2 00C0      		rjmp .L78
 302:glcd/unit_tests.c **** 		}
 1798               		.loc 1 302 17 discriminator 2 view .LVU398
 302:glcd/unit_tests.c **** 		}
 1799               		.loc 1 302 17 is_stmt 0 discriminator 2 view .LVU399
 1800 05d4 C451      		subi r28,lo8(-(-20))
 298:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,255-n);
 1801               		.loc 1 298 3 discriminator 2 view .LVU400
 1802 05d6 CB3F      		cpi r28,lo8(-5)
 1803 05d8 01F4      		brne .L74
 1804 05da 00C0      		rjmp .L75
 1805               	.LBE175:
 1806               		.cfi_endproc
 1807               	.LFE19:
 1809               	.global	glcd_test_bitmap_128x64
 1811               	glcd_test_bitmap_128x64:
 1812               	.LFB20:
 306:glcd/unit_tests.c **** 
 307:glcd/unit_tests.c **** #if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
 308:glcd/unit_tests.c **** void glcd_test_bitmap_128x64(void)
 309:glcd/unit_tests.c **** {
 1813               		.loc 1 309 1 is_stmt 1 view -0
 1814               		.cfi_startproc
 1815               	/* prologue: function */
 1816               	/* frame size = 0 */
 1817               	/* stack size = 0 */
 1818               	.L__stack_usage = 0
 310:glcd/unit_tests.c **** 	glcd_draw_bitmap(bmp_oslogo);
 1819               		.loc 1 310 2 view .LVU402
 1820 05dc 80E0      		ldi r24,lo8(bmp_oslogo)
 1821 05de 90E0      		ldi r25,hi8(bmp_oslogo)
 1822 05e0 0E94 0000 		call glcd_draw_bitmap
 1823               	.LVL138:
 311:glcd/unit_tests.c **** 	glcd_write();	
 1824               		.loc 1 311 2 view .LVU403
 1825 05e4 0E94 0000 		call glcd_write
 1826               	.LVL139:
 1827               	.L80:
 312:glcd/unit_tests.c **** 	while (1) {
 1828               		.loc 1 312 2 view .LVU404
 313:glcd/unit_tests.c **** 		DEMO_RETURN();
 1829               		.loc 1 313 3 view .LVU405
 1830 05e8 8091 0000 		lds r24,unit_test_return
 1831 05ec 8823      		tst r24
 1832 05ee 01F0      		breq .L80
 1833               		.loc 1 313 3 discriminator 1 view .LVU406
 1834 05f0 1092 0000 		sts unit_test_return,__zero_reg__
 1835               		.loc 1 313 3 discriminator 1 view .LVU407
 1836               	/* epilogue start */
 314:glcd/unit_tests.c **** 	}
 315:glcd/unit_tests.c **** }
 1837               		.loc 1 315 1 is_stmt 0 discriminator 1 view .LVU408
 1838 05f4 0895      		ret
 1839               		.cfi_endproc
 1840               	.LFE20:
 1842               	.global	font_Earthbound_12x19_48to57
 1843               		.section	.progmem.data,"a",@progbits
 1846               	font_Earthbound_12x19_48to57:
 1847 0000 00        		.byte	0
 1848 0001 E0        		.byte	-32
 1849 0002 F0        		.byte	-16
 1850 0003 38        		.byte	56
 1851 0004 0C        		.byte	12
 1852 0005 0C        		.byte	12
 1853 0006 0C        		.byte	12
 1854 0007 0C        		.byte	12
 1855 0008 38        		.byte	56
 1856 0009 F8        		.byte	-8
 1857 000a C0        		.byte	-64
 1858 000b 00        		.byte	0
 1859 000c 00        		.byte	0
 1860 000d 1F        		.byte	31
 1861 000e 7F        		.byte	127
 1862 000f E0        		.byte	-32
 1863 0010 80        		.byte	-128
 1864 0011 80        		.byte	-128
 1865 0012 80        		.byte	-128
 1866 0013 80        		.byte	-128
 1867 0014 E0        		.byte	-32
 1868 0015 FF        		.byte	-1
 1869 0016 1F        		.byte	31
 1870 0017 00        		.byte	0
 1871 0018 00        		.byte	0
 1872 0019 00        		.byte	0
 1873 001a 00        		.byte	0
 1874 001b 01        		.byte	1
 1875 001c 01        		.byte	1
 1876 001d 01        		.byte	1
 1877 001e 01        		.byte	1
 1878 001f 01        		.byte	1
 1879 0020 00        		.byte	0
 1880 0021 00        		.byte	0
 1881 0022 00        		.byte	0
 1882 0023 00        		.byte	0
 1883 0024 00        		.byte	0
 1884 0025 10        		.byte	16
 1885 0026 18        		.byte	24
 1886 0027 18        		.byte	24
 1887 0028 FC        		.byte	-4
 1888 0029 FC        		.byte	-4
 1889 002a 00        		.byte	0
 1890 002b 00        		.byte	0
 1891 002c 00        		.byte	0
 1892 002d 00        		.byte	0
 1893 002e 00        		.byte	0
 1894 002f 00        		.byte	0
 1895 0030 00        		.byte	0
 1896 0031 00        		.byte	0
 1897 0032 00        		.byte	0
 1898 0033 00        		.byte	0
 1899 0034 FF        		.byte	-1
 1900 0035 FF        		.byte	-1
 1901 0036 00        		.byte	0
 1902 0037 00        		.byte	0
 1903 0038 00        		.byte	0
 1904 0039 00        		.byte	0
 1905 003a 00        		.byte	0
 1906 003b 00        		.byte	0
 1907 003c 00        		.byte	0
 1908 003d 00        		.byte	0
 1909 003e 00        		.byte	0
 1910 003f 00        		.byte	0
 1911 0040 01        		.byte	1
 1912 0041 01        		.byte	1
 1913 0042 00        		.byte	0
 1914 0043 00        		.byte	0
 1915 0044 00        		.byte	0
 1916 0045 00        		.byte	0
 1917 0046 00        		.byte	0
 1918 0047 00        		.byte	0
 1919 0048 00        		.byte	0
 1920 0049 08        		.byte	8
 1921 004a 1C        		.byte	28
 1922 004b 0C        		.byte	12
 1923 004c 0C        		.byte	12
 1924 004d 0C        		.byte	12
 1925 004e 0C        		.byte	12
 1926 004f 8C        		.byte	-116
 1927 0050 F8        		.byte	-8
 1928 0051 F0        		.byte	-16
 1929 0052 00        		.byte	0
 1930 0053 00        		.byte	0
 1931 0054 00        		.byte	0
 1932 0055 F0        		.byte	-16
 1933 0056 F8        		.byte	-8
 1934 0057 9C        		.byte	-100
 1935 0058 8C        		.byte	-116
 1936 0059 86        		.byte	-122
 1937 005a 86        		.byte	-122
 1938 005b 83        		.byte	-125
 1939 005c 83        		.byte	-125
 1940 005d 80        		.byte	-128
 1941 005e 00        		.byte	0
 1942 005f 00        		.byte	0
 1943 0060 00        		.byte	0
 1944 0061 01        		.byte	1
 1945 0062 01        		.byte	1
 1946 0063 01        		.byte	1
 1947 0064 01        		.byte	1
 1948 0065 01        		.byte	1
 1949 0066 01        		.byte	1
 1950 0067 01        		.byte	1
 1951 0068 01        		.byte	1
 1952 0069 01        		.byte	1
 1953 006a 00        		.byte	0
 1954 006b 00        		.byte	0
 1955 006c 00        		.byte	0
 1956 006d 08        		.byte	8
 1957 006e 1C        		.byte	28
 1958 006f 0C        		.byte	12
 1959 0070 0C        		.byte	12
 1960 0071 0C        		.byte	12
 1961 0072 0C        		.byte	12
 1962 0073 8C        		.byte	-116
 1963 0074 F8        		.byte	-8
 1964 0075 F0        		.byte	-16
 1965 0076 00        		.byte	0
 1966 0077 00        		.byte	0
 1967 0078 00        		.byte	0
 1968 0079 80        		.byte	-128
 1969 007a C0        		.byte	-64
 1970 007b 80        		.byte	-128
 1971 007c 81        		.byte	-127
 1972 007d 83        		.byte	-125
 1973 007e 83        		.byte	-125
 1974 007f C7        		.byte	-57
 1975 0080 FF        		.byte	-1
 1976 0081 7C        		.byte	124
 1977 0082 00        		.byte	0
 1978 0083 00        		.byte	0
 1979 0084 00        		.byte	0
 1980 0085 00        		.byte	0
 1981 0086 01        		.byte	1
 1982 0087 01        		.byte	1
 1983 0088 01        		.byte	1
 1984 0089 01        		.byte	1
 1985 008a 01        		.byte	1
 1986 008b 01        		.byte	1
 1987 008c 00        		.byte	0
 1988 008d 00        		.byte	0
 1989 008e 00        		.byte	0
 1990 008f 00        		.byte	0
 1991 0090 00        		.byte	0
 1992 0091 00        		.byte	0
 1993 0092 00        		.byte	0
 1994 0093 80        		.byte	-128
 1995 0094 C0        		.byte	-64
 1996 0095 70        		.byte	112
 1997 0096 38        		.byte	56
 1998 0097 FC        		.byte	-4
 1999 0098 FC        		.byte	-4
 2000 0099 00        		.byte	0
 2001 009a 00        		.byte	0
 2002 009b 00        		.byte	0
 2003 009c 00        		.byte	0
 2004 009d 1C        		.byte	28
 2005 009e 1E        		.byte	30
 2006 009f 1B        		.byte	27
 2007 00a0 11        		.byte	17
 2008 00a1 18        		.byte	24
 2009 00a2 10        		.byte	16
 2010 00a3 FF        		.byte	-1
 2011 00a4 FF        		.byte	-1
 2012 00a5 10        		.byte	16
 2013 00a6 18        		.byte	24
 2014 00a7 00        		.byte	0
 2015 00a8 00        		.byte	0
 2016 00a9 00        		.byte	0
 2017 00aa 00        		.byte	0
 2018 00ab 00        		.byte	0
 2019 00ac 00        		.byte	0
 2020 00ad 00        		.byte	0
 2021 00ae 00        		.byte	0
 2022 00af 01        		.byte	1
 2023 00b0 01        		.byte	1
 2024 00b1 00        		.byte	0
 2025 00b2 00        		.byte	0
 2026 00b3 00        		.byte	0
 2027 00b4 00        		.byte	0
 2028 00b5 00        		.byte	0
 2029 00b6 F4        		.byte	-12
 2030 00b7 FC        		.byte	-4
 2031 00b8 1C        		.byte	28
 2032 00b9 0C        		.byte	12
 2033 00ba 0C        		.byte	12
 2034 00bb 0C        		.byte	12
 2035 00bc 0C        		.byte	12
 2036 00bd 00        		.byte	0
 2037 00be 00        		.byte	0
 2038 00bf 00        		.byte	0
 2039 00c0 00        		.byte	0
 2040 00c1 80        		.byte	-128
 2041 00c2 C3        		.byte	-61
 2042 00c3 83        		.byte	-125
 2043 00c4 83        		.byte	-125
 2044 00c5 83        		.byte	-125
 2045 00c6 83        		.byte	-125
 2046 00c7 C7        		.byte	-57
 2047 00c8 FE        		.byte	-2
 2048 00c9 78        		.byte	120
 2049 00ca 00        		.byte	0
 2050 00cb 00        		.byte	0
 2051 00cc 00        		.byte	0
 2052 00cd 00        		.byte	0
 2053 00ce 00        		.byte	0
 2054 00cf 01        		.byte	1
 2055 00d0 01        		.byte	1
 2056 00d1 01        		.byte	1
 2057 00d2 01        		.byte	1
 2058 00d3 01        		.byte	1
 2059 00d4 00        		.byte	0
 2060 00d5 00        		.byte	0
 2061 00d6 00        		.byte	0
 2062 00d7 00        		.byte	0
 2063 00d8 00        		.byte	0
 2064 00d9 C0        		.byte	-64
 2065 00da F0        		.byte	-16
 2066 00db 78        		.byte	120
 2067 00dc 1C        		.byte	28
 2068 00dd 0C        		.byte	12
 2069 00de 0C        		.byte	12
 2070 00df 0C        		.byte	12
 2071 00e0 08        		.byte	8
 2072 00e1 00        		.byte	0
 2073 00e2 00        		.byte	0
 2074 00e3 00        		.byte	0
 2075 00e4 00        		.byte	0
 2076 00e5 3F        		.byte	63
 2077 00e6 FF        		.byte	-1
 2078 00e7 C3        		.byte	-61
 2079 00e8 83        		.byte	-125
 2080 00e9 83        		.byte	-125
 2081 00ea 83        		.byte	-125
 2082 00eb C3        		.byte	-61
 2083 00ec FE        		.byte	-2
 2084 00ed 7C        		.byte	124
 2085 00ee 00        		.byte	0
 2086 00ef 00        		.byte	0
 2087 00f0 00        		.byte	0
 2088 00f1 00        		.byte	0
 2089 00f2 00        		.byte	0
 2090 00f3 01        		.byte	1
 2091 00f4 01        		.byte	1
 2092 00f5 01        		.byte	1
 2093 00f6 01        		.byte	1
 2094 00f7 01        		.byte	1
 2095 00f8 00        		.byte	0
 2096 00f9 00        		.byte	0
 2097 00fa 00        		.byte	0
 2098 00fb 00        		.byte	0
 2099 00fc 00        		.byte	0
 2100 00fd 0C        		.byte	12
 2101 00fe 0C        		.byte	12
 2102 00ff 0C        		.byte	12
 2103 0100 0C        		.byte	12
 2104 0101 8C        		.byte	-116
 2105 0102 CC        		.byte	-52
 2106 0103 7C        		.byte	124
 2107 0104 3C        		.byte	60
 2108 0105 0C        		.byte	12
 2109 0106 00        		.byte	0
 2110 0107 00        		.byte	0
 2111 0108 00        		.byte	0
 2112 0109 00        		.byte	0
 2113 010a 80        		.byte	-128
 2114 010b F0        		.byte	-16
 2115 010c 7C        		.byte	124
 2116 010d 0F        		.byte	15
 2117 010e 03        		.byte	3
 2118 010f 00        		.byte	0
 2119 0110 00        		.byte	0
 2120 0111 00        		.byte	0
 2121 0112 00        		.byte	0
 2122 0113 00        		.byte	0
 2123 0114 00        		.byte	0
 2124 0115 00        		.byte	0
 2125 0116 01        		.byte	1
 2126 0117 01        		.byte	1
 2127 0118 00        		.byte	0
 2128 0119 00        		.byte	0
 2129 011a 00        		.byte	0
 2130 011b 00        		.byte	0
 2131 011c 00        		.byte	0
 2132 011d 00        		.byte	0
 2133 011e 00        		.byte	0
 2134 011f 00        		.byte	0
 2135 0120 00        		.byte	0
 2136 0121 F0        		.byte	-16
 2137 0122 F8        		.byte	-8
 2138 0123 1C        		.byte	28
 2139 0124 0C        		.byte	12
 2140 0125 0C        		.byte	12
 2141 0126 0C        		.byte	12
 2142 0127 0C        		.byte	12
 2143 0128 F8        		.byte	-8
 2144 0129 F0        		.byte	-16
 2145 012a 00        		.byte	0
 2146 012b 00        		.byte	0
 2147 012c 00        		.byte	0
 2148 012d F8        		.byte	-8
 2149 012e FF        		.byte	-1
 2150 012f 8F        		.byte	-113
 2151 0130 07        		.byte	7
 2152 0131 06        		.byte	6
 2153 0132 06        		.byte	6
 2154 0133 8F        		.byte	-113
 2155 0134 FF        		.byte	-1
 2156 0135 F8        		.byte	-8
 2157 0136 00        		.byte	0
 2158 0137 00        		.byte	0
 2159 0138 00        		.byte	0
 2160 0139 00        		.byte	0
 2161 013a 01        		.byte	1
 2162 013b 03        		.byte	3
 2163 013c 03        		.byte	3
 2164 013d 03        		.byte	3
 2165 013e 03        		.byte	3
 2166 013f 01        		.byte	1
 2167 0140 01        		.byte	1
 2168 0141 00        		.byte	0
 2169 0142 00        		.byte	0
 2170 0143 00        		.byte	0
 2171 0144 00        		.byte	0
 2172 0145 F0        		.byte	-16
 2173 0146 F8        		.byte	-8
 2174 0147 1C        		.byte	28
 2175 0148 0C        		.byte	12
 2176 0149 0C        		.byte	12
 2177 014a 0C        		.byte	12
 2178 014b 1C        		.byte	28
 2179 014c F8        		.byte	-8
 2180 014d E0        		.byte	-32
 2181 014e 00        		.byte	0
 2182 014f 00        		.byte	0
 2183 0150 00        		.byte	0
 2184 0151 01        		.byte	1
 2185 0152 87        		.byte	-121
 2186 0153 8E        		.byte	-114
 2187 0154 8C        		.byte	-116
 2188 0155 8C        		.byte	-116
 2189 0156 8C        		.byte	-116
 2190 0157 EE        		.byte	-18
 2191 0158 7F        		.byte	127
 2192 0159 1F        		.byte	31
 2193 015a 00        		.byte	0
 2194 015b 00        		.byte	0
 2195 015c 00        		.byte	0
 2196 015d 00        		.byte	0
 2197 015e 01        		.byte	1
 2198 015f 01        		.byte	1
 2199 0160 01        		.byte	1
 2200 0161 01        		.byte	1
 2201 0162 01        		.byte	1
 2202 0163 00        		.byte	0
 2203 0164 00        		.byte	0
 2204 0165 00        		.byte	0
 2205 0166 00        		.byte	0
 2206 0167 00        		.byte	0
 2207               	.global	bmp_oslogo
 2210               	bmp_oslogo:
 2211 0168 00        		.byte	0
 2212 0169 00        		.byte	0
 2213 016a 00        		.byte	0
 2214 016b 00        		.byte	0
 2215 016c 00        		.byte	0
 2216 016d 00        		.byte	0
 2217 016e 00        		.byte	0
 2218 016f 00        		.byte	0
 2219 0170 00        		.byte	0
 2220 0171 00        		.byte	0
 2221 0172 00        		.byte	0
 2222 0173 00        		.byte	0
 2223 0174 00        		.byte	0
 2224 0175 00        		.byte	0
 2225 0176 00        		.byte	0
 2226 0177 00        		.byte	0
 2227 0178 00        		.byte	0
 2228 0179 00        		.byte	0
 2229 017a 00        		.byte	0
 2230 017b 00        		.byte	0
 2231 017c 00        		.byte	0
 2232 017d 00        		.byte	0
 2233 017e 00        		.byte	0
 2234 017f 00        		.byte	0
 2235 0180 00        		.byte	0
 2236 0181 00        		.byte	0
 2237 0182 00        		.byte	0
 2238 0183 00        		.byte	0
 2239 0184 00        		.byte	0
 2240 0185 00        		.byte	0
 2241 0186 00        		.byte	0
 2242 0187 00        		.byte	0
 2243 0188 00        		.byte	0
 2244 0189 00        		.byte	0
 2245 018a 00        		.byte	0
 2246 018b 00        		.byte	0
 2247 018c 00        		.byte	0
 2248 018d 00        		.byte	0
 2249 018e 00        		.byte	0
 2250 018f 00        		.byte	0
 2251 0190 00        		.byte	0
 2252 0191 00        		.byte	0
 2253 0192 00        		.byte	0
 2254 0193 00        		.byte	0
 2255 0194 00        		.byte	0
 2256 0195 00        		.byte	0
 2257 0196 00        		.byte	0
 2258 0197 00        		.byte	0
 2259 0198 00        		.byte	0
 2260 0199 00        		.byte	0
 2261 019a 00        		.byte	0
 2262 019b 80        		.byte	-128
 2263 019c 80        		.byte	-128
 2264 019d C0        		.byte	-64
 2265 019e C0        		.byte	-64
 2266 019f C0        		.byte	-64
 2267 01a0 E0        		.byte	-32
 2268 01a1 E0        		.byte	-32
 2269 01a2 E0        		.byte	-32
 2270 01a3 E0        		.byte	-32
 2271 01a4 E0        		.byte	-32
 2272 01a5 E0        		.byte	-32
 2273 01a6 E0        		.byte	-32
 2274 01a7 E0        		.byte	-32
 2275 01a8 E0        		.byte	-32
 2276 01a9 E0        		.byte	-32
 2277 01aa E0        		.byte	-32
 2278 01ab E0        		.byte	-32
 2279 01ac E0        		.byte	-32
 2280 01ad E0        		.byte	-32
 2281 01ae C0        		.byte	-64
 2282 01af C0        		.byte	-64
 2283 01b0 C0        		.byte	-64
 2284 01b1 80        		.byte	-128
 2285 01b2 80        		.byte	-128
 2286 01b3 00        		.byte	0
 2287 01b4 00        		.byte	0
 2288 01b5 00        		.byte	0
 2289 01b6 00        		.byte	0
 2290 01b7 00        		.byte	0
 2291 01b8 00        		.byte	0
 2292 01b9 00        		.byte	0
 2293 01ba 00        		.byte	0
 2294 01bb 00        		.byte	0
 2295 01bc 00        		.byte	0
 2296 01bd 00        		.byte	0
 2297 01be 00        		.byte	0
 2298 01bf 00        		.byte	0
 2299 01c0 00        		.byte	0
 2300 01c1 00        		.byte	0
 2301 01c2 00        		.byte	0
 2302 01c3 00        		.byte	0
 2303 01c4 00        		.byte	0
 2304 01c5 00        		.byte	0
 2305 01c6 00        		.byte	0
 2306 01c7 00        		.byte	0
 2307 01c8 00        		.byte	0
 2308 01c9 00        		.byte	0
 2309 01ca 00        		.byte	0
 2310 01cb 00        		.byte	0
 2311 01cc 00        		.byte	0
 2312 01cd 00        		.byte	0
 2313 01ce 00        		.byte	0
 2314 01cf 00        		.byte	0
 2315 01d0 00        		.byte	0
 2316 01d1 00        		.byte	0
 2317 01d2 00        		.byte	0
 2318 01d3 00        		.byte	0
 2319 01d4 00        		.byte	0
 2320 01d5 00        		.byte	0
 2321 01d6 00        		.byte	0
 2322 01d7 00        		.byte	0
 2323 01d8 00        		.byte	0
 2324 01d9 00        		.byte	0
 2325 01da 00        		.byte	0
 2326 01db 00        		.byte	0
 2327 01dc 00        		.byte	0
 2328 01dd 00        		.byte	0
 2329 01de 00        		.byte	0
 2330 01df 00        		.byte	0
 2331 01e0 00        		.byte	0
 2332 01e1 00        		.byte	0
 2333 01e2 00        		.byte	0
 2334 01e3 00        		.byte	0
 2335 01e4 00        		.byte	0
 2336 01e5 00        		.byte	0
 2337 01e6 00        		.byte	0
 2338 01e7 00        		.byte	0
 2339 01e8 00        		.byte	0
 2340 01e9 00        		.byte	0
 2341 01ea 00        		.byte	0
 2342 01eb 00        		.byte	0
 2343 01ec 00        		.byte	0
 2344 01ed 00        		.byte	0
 2345 01ee 00        		.byte	0
 2346 01ef 00        		.byte	0
 2347 01f0 00        		.byte	0
 2348 01f1 00        		.byte	0
 2349 01f2 00        		.byte	0
 2350 01f3 00        		.byte	0
 2351 01f4 00        		.byte	0
 2352 01f5 00        		.byte	0
 2353 01f6 00        		.byte	0
 2354 01f7 00        		.byte	0
 2355 01f8 00        		.byte	0
 2356 01f9 00        		.byte	0
 2357 01fa 00        		.byte	0
 2358 01fb 00        		.byte	0
 2359 01fc 00        		.byte	0
 2360 01fd 00        		.byte	0
 2361 01fe 00        		.byte	0
 2362 01ff 00        		.byte	0
 2363 0200 00        		.byte	0
 2364 0201 00        		.byte	0
 2365 0202 00        		.byte	0
 2366 0203 00        		.byte	0
 2367 0204 00        		.byte	0
 2368 0205 00        		.byte	0
 2369 0206 00        		.byte	0
 2370 0207 00        		.byte	0
 2371 0208 00        		.byte	0
 2372 0209 00        		.byte	0
 2373 020a 00        		.byte	0
 2374 020b 00        		.byte	0
 2375 020c 00        		.byte	0
 2376 020d 00        		.byte	0
 2377 020e 00        		.byte	0
 2378 020f 00        		.byte	0
 2379 0210 00        		.byte	0
 2380 0211 80        		.byte	-128
 2381 0212 C0        		.byte	-64
 2382 0213 E0        		.byte	-32
 2383 0214 F0        		.byte	-16
 2384 0215 F8        		.byte	-8
 2385 0216 FC        		.byte	-4
 2386 0217 FC        		.byte	-4
 2387 0218 FE        		.byte	-2
 2388 0219 FF        		.byte	-1
 2389 021a FF        		.byte	-1
 2390 021b FF        		.byte	-1
 2391 021c FF        		.byte	-1
 2392 021d FF        		.byte	-1
 2393 021e FF        		.byte	-1
 2394 021f FF        		.byte	-1
 2395 0220 FF        		.byte	-1
 2396 0221 FF        		.byte	-1
 2397 0222 FF        		.byte	-1
 2398 0223 FF        		.byte	-1
 2399 0224 FF        		.byte	-1
 2400 0225 FF        		.byte	-1
 2401 0226 FF        		.byte	-1
 2402 0227 FF        		.byte	-1
 2403 0228 FF        		.byte	-1
 2404 0229 FF        		.byte	-1
 2405 022a FF        		.byte	-1
 2406 022b FF        		.byte	-1
 2407 022c FF        		.byte	-1
 2408 022d FF        		.byte	-1
 2409 022e FF        		.byte	-1
 2410 022f FF        		.byte	-1
 2411 0230 FF        		.byte	-1
 2412 0231 FF        		.byte	-1
 2413 0232 FF        		.byte	-1
 2414 0233 FF        		.byte	-1
 2415 0234 FF        		.byte	-1
 2416 0235 FE        		.byte	-2
 2417 0236 FC        		.byte	-4
 2418 0237 FC        		.byte	-4
 2419 0238 F8        		.byte	-8
 2420 0239 F0        		.byte	-16
 2421 023a E0        		.byte	-32
 2422 023b C0        		.byte	-64
 2423 023c 80        		.byte	-128
 2424 023d 00        		.byte	0
 2425 023e 00        		.byte	0
 2426 023f 00        		.byte	0
 2427 0240 00        		.byte	0
 2428 0241 00        		.byte	0
 2429 0242 00        		.byte	0
 2430 0243 00        		.byte	0
 2431 0244 00        		.byte	0
 2432 0245 00        		.byte	0
 2433 0246 00        		.byte	0
 2434 0247 00        		.byte	0
 2435 0248 00        		.byte	0
 2436 0249 00        		.byte	0
 2437 024a 00        		.byte	0
 2438 024b 00        		.byte	0
 2439 024c 00        		.byte	0
 2440 024d 00        		.byte	0
 2441 024e 00        		.byte	0
 2442 024f 00        		.byte	0
 2443 0250 00        		.byte	0
 2444 0251 00        		.byte	0
 2445 0252 00        		.byte	0
 2446 0253 00        		.byte	0
 2447 0254 00        		.byte	0
 2448 0255 00        		.byte	0
 2449 0256 00        		.byte	0
 2450 0257 00        		.byte	0
 2451 0258 00        		.byte	0
 2452 0259 00        		.byte	0
 2453 025a 00        		.byte	0
 2454 025b 00        		.byte	0
 2455 025c 00        		.byte	0
 2456 025d 00        		.byte	0
 2457 025e 00        		.byte	0
 2458 025f 00        		.byte	0
 2459 0260 00        		.byte	0
 2460 0261 00        		.byte	0
 2461 0262 00        		.byte	0
 2462 0263 00        		.byte	0
 2463 0264 00        		.byte	0
 2464 0265 00        		.byte	0
 2465 0266 00        		.byte	0
 2466 0267 00        		.byte	0
 2467 0268 00        		.byte	0
 2468 0269 00        		.byte	0
 2469 026a 00        		.byte	0
 2470 026b 00        		.byte	0
 2471 026c 00        		.byte	0
 2472 026d 00        		.byte	0
 2473 026e 00        		.byte	0
 2474 026f 00        		.byte	0
 2475 0270 00        		.byte	0
 2476 0271 00        		.byte	0
 2477 0272 00        		.byte	0
 2478 0273 00        		.byte	0
 2479 0274 00        		.byte	0
 2480 0275 00        		.byte	0
 2481 0276 00        		.byte	0
 2482 0277 00        		.byte	0
 2483 0278 00        		.byte	0
 2484 0279 00        		.byte	0
 2485 027a 00        		.byte	0
 2486 027b 00        		.byte	0
 2487 027c 00        		.byte	0
 2488 027d 00        		.byte	0
 2489 027e 00        		.byte	0
 2490 027f 00        		.byte	0
 2491 0280 00        		.byte	0
 2492 0281 00        		.byte	0
 2493 0282 00        		.byte	0
 2494 0283 00        		.byte	0
 2495 0284 00        		.byte	0
 2496 0285 00        		.byte	0
 2497 0286 00        		.byte	0
 2498 0287 00        		.byte	0
 2499 0288 00        		.byte	0
 2500 0289 00        		.byte	0
 2501 028a 00        		.byte	0
 2502 028b 00        		.byte	0
 2503 028c 00        		.byte	0
 2504 028d 80        		.byte	-128
 2505 028e F0        		.byte	-16
 2506 028f FC        		.byte	-4
 2507 0290 FE        		.byte	-2
 2508 0291 FF        		.byte	-1
 2509 0292 FF        		.byte	-1
 2510 0293 FF        		.byte	-1
 2511 0294 FF        		.byte	-1
 2512 0295 FF        		.byte	-1
 2513 0296 FF        		.byte	-1
 2514 0297 FF        		.byte	-1
 2515 0298 FF        		.byte	-1
 2516 0299 FF        		.byte	-1
 2517 029a FF        		.byte	-1
 2518 029b FF        		.byte	-1
 2519 029c FF        		.byte	-1
 2520 029d FF        		.byte	-1
 2521 029e FF        		.byte	-1
 2522 029f FF        		.byte	-1
 2523 02a0 FF        		.byte	-1
 2524 02a1 FF        		.byte	-1
 2525 02a2 FF        		.byte	-1
 2526 02a3 FF        		.byte	-1
 2527 02a4 FF        		.byte	-1
 2528 02a5 FF        		.byte	-1
 2529 02a6 FF        		.byte	-1
 2530 02a7 FF        		.byte	-1
 2531 02a8 FF        		.byte	-1
 2532 02a9 FF        		.byte	-1
 2533 02aa FF        		.byte	-1
 2534 02ab FF        		.byte	-1
 2535 02ac FF        		.byte	-1
 2536 02ad FF        		.byte	-1
 2537 02ae FF        		.byte	-1
 2538 02af FF        		.byte	-1
 2539 02b0 FF        		.byte	-1
 2540 02b1 FF        		.byte	-1
 2541 02b2 FF        		.byte	-1
 2542 02b3 FF        		.byte	-1
 2543 02b4 FF        		.byte	-1
 2544 02b5 FF        		.byte	-1
 2545 02b6 FF        		.byte	-1
 2546 02b7 FF        		.byte	-1
 2547 02b8 FF        		.byte	-1
 2548 02b9 FF        		.byte	-1
 2549 02ba FF        		.byte	-1
 2550 02bb FF        		.byte	-1
 2551 02bc FF        		.byte	-1
 2552 02bd FE        		.byte	-2
 2553 02be FC        		.byte	-4
 2554 02bf F0        		.byte	-16
 2555 02c0 C0        		.byte	-64
 2556 02c1 00        		.byte	0
 2557 02c2 00        		.byte	0
 2558 02c3 00        		.byte	0
 2559 02c4 00        		.byte	0
 2560 02c5 00        		.byte	0
 2561 02c6 00        		.byte	0
 2562 02c7 00        		.byte	0
 2563 02c8 00        		.byte	0
 2564 02c9 00        		.byte	0
 2565 02ca 00        		.byte	0
 2566 02cb 00        		.byte	0
 2567 02cc 00        		.byte	0
 2568 02cd 00        		.byte	0
 2569 02ce 00        		.byte	0
 2570 02cf 00        		.byte	0
 2571 02d0 00        		.byte	0
 2572 02d1 00        		.byte	0
 2573 02d2 00        		.byte	0
 2574 02d3 00        		.byte	0
 2575 02d4 00        		.byte	0
 2576 02d5 00        		.byte	0
 2577 02d6 00        		.byte	0
 2578 02d7 00        		.byte	0
 2579 02d8 00        		.byte	0
 2580 02d9 00        		.byte	0
 2581 02da 00        		.byte	0
 2582 02db 00        		.byte	0
 2583 02dc 00        		.byte	0
 2584 02dd 00        		.byte	0
 2585 02de 00        		.byte	0
 2586 02df 00        		.byte	0
 2587 02e0 00        		.byte	0
 2588 02e1 00        		.byte	0
 2589 02e2 00        		.byte	0
 2590 02e3 00        		.byte	0
 2591 02e4 00        		.byte	0
 2592 02e5 00        		.byte	0
 2593 02e6 00        		.byte	0
 2594 02e7 00        		.byte	0
 2595 02e8 00        		.byte	0
 2596 02e9 00        		.byte	0
 2597 02ea 00        		.byte	0
 2598 02eb 00        		.byte	0
 2599 02ec 00        		.byte	0
 2600 02ed 00        		.byte	0
 2601 02ee 00        		.byte	0
 2602 02ef 00        		.byte	0
 2603 02f0 00        		.byte	0
 2604 02f1 00        		.byte	0
 2605 02f2 00        		.byte	0
 2606 02f3 00        		.byte	0
 2607 02f4 00        		.byte	0
 2608 02f5 00        		.byte	0
 2609 02f6 00        		.byte	0
 2610 02f7 00        		.byte	0
 2611 02f8 00        		.byte	0
 2612 02f9 00        		.byte	0
 2613 02fa 00        		.byte	0
 2614 02fb 00        		.byte	0
 2615 02fc 00        		.byte	0
 2616 02fd 00        		.byte	0
 2617 02fe 00        		.byte	0
 2618 02ff 00        		.byte	0
 2619 0300 00        		.byte	0
 2620 0301 00        		.byte	0
 2621 0302 00        		.byte	0
 2622 0303 00        		.byte	0
 2623 0304 00        		.byte	0
 2624 0305 00        		.byte	0
 2625 0306 00        		.byte	0
 2626 0307 00        		.byte	0
 2627 0308 00        		.byte	0
 2628 0309 00        		.byte	0
 2629 030a 00        		.byte	0
 2630 030b 00        		.byte	0
 2631 030c FC        		.byte	-4
 2632 030d FF        		.byte	-1
 2633 030e FF        		.byte	-1
 2634 030f FF        		.byte	-1
 2635 0310 FF        		.byte	-1
 2636 0311 FF        		.byte	-1
 2637 0312 FF        		.byte	-1
 2638 0313 FF        		.byte	-1
 2639 0314 FF        		.byte	-1
 2640 0315 FF        		.byte	-1
 2641 0316 FF        		.byte	-1
 2642 0317 FF        		.byte	-1
 2643 0318 FF        		.byte	-1
 2644 0319 FF        		.byte	-1
 2645 031a FF        		.byte	-1
 2646 031b FF        		.byte	-1
 2647 031c FF        		.byte	-1
 2648 031d FF        		.byte	-1
 2649 031e FF        		.byte	-1
 2650 031f 1F        		.byte	31
 2651 0320 07        		.byte	7
 2652 0321 03        		.byte	3
 2653 0322 01        		.byte	1
 2654 0323 01        		.byte	1
 2655 0324 00        		.byte	0
 2656 0325 00        		.byte	0
 2657 0326 00        		.byte	0
 2658 0327 00        		.byte	0
 2659 0328 00        		.byte	0
 2660 0329 00        		.byte	0
 2661 032a 00        		.byte	0
 2662 032b 01        		.byte	1
 2663 032c 03        		.byte	3
 2664 032d 07        		.byte	7
 2665 032e 1F        		.byte	31
 2666 032f FF        		.byte	-1
 2667 0330 FF        		.byte	-1
 2668 0331 FF        		.byte	-1
 2669 0332 FF        		.byte	-1
 2670 0333 FF        		.byte	-1
 2671 0334 FF        		.byte	-1
 2672 0335 FF        		.byte	-1
 2673 0336 FF        		.byte	-1
 2674 0337 FF        		.byte	-1
 2675 0338 FF        		.byte	-1
 2676 0339 FF        		.byte	-1
 2677 033a FF        		.byte	-1
 2678 033b FF        		.byte	-1
 2679 033c FF        		.byte	-1
 2680 033d FF        		.byte	-1
 2681 033e FF        		.byte	-1
 2682 033f FF        		.byte	-1
 2683 0340 FF        		.byte	-1
 2684 0341 FC        		.byte	-4
 2685 0342 00        		.byte	0
 2686 0343 00        		.byte	0
 2687 0344 00        		.byte	0
 2688 0345 00        		.byte	0
 2689 0346 00        		.byte	0
 2690 0347 00        		.byte	0
 2691 0348 00        		.byte	0
 2692 0349 00        		.byte	0
 2693 034a 00        		.byte	0
 2694 034b 00        		.byte	0
 2695 034c 00        		.byte	0
 2696 034d 00        		.byte	0
 2697 034e 00        		.byte	0
 2698 034f 00        		.byte	0
 2699 0350 00        		.byte	0
 2700 0351 00        		.byte	0
 2701 0352 00        		.byte	0
 2702 0353 00        		.byte	0
 2703 0354 00        		.byte	0
 2704 0355 00        		.byte	0
 2705 0356 00        		.byte	0
 2706 0357 00        		.byte	0
 2707 0358 00        		.byte	0
 2708 0359 00        		.byte	0
 2709 035a 00        		.byte	0
 2710 035b 00        		.byte	0
 2711 035c 00        		.byte	0
 2712 035d 00        		.byte	0
 2713 035e 00        		.byte	0
 2714 035f 00        		.byte	0
 2715 0360 00        		.byte	0
 2716 0361 00        		.byte	0
 2717 0362 00        		.byte	0
 2718 0363 00        		.byte	0
 2719 0364 00        		.byte	0
 2720 0365 00        		.byte	0
 2721 0366 00        		.byte	0
 2722 0367 00        		.byte	0
 2723 0368 00        		.byte	0
 2724 0369 00        		.byte	0
 2725 036a 00        		.byte	0
 2726 036b 00        		.byte	0
 2727 036c 00        		.byte	0
 2728 036d 00        		.byte	0
 2729 036e 00        		.byte	0
 2730 036f 00        		.byte	0
 2731 0370 00        		.byte	0
 2732 0371 00        		.byte	0
 2733 0372 00        		.byte	0
 2734 0373 00        		.byte	0
 2735 0374 00        		.byte	0
 2736 0375 00        		.byte	0
 2737 0376 00        		.byte	0
 2738 0377 00        		.byte	0
 2739 0378 00        		.byte	0
 2740 0379 00        		.byte	0
 2741 037a 00        		.byte	0
 2742 037b 00        		.byte	0
 2743 037c 00        		.byte	0
 2744 037d 00        		.byte	0
 2745 037e 00        		.byte	0
 2746 037f 00        		.byte	0
 2747 0380 00        		.byte	0
 2748 0381 00        		.byte	0
 2749 0382 00        		.byte	0
 2750 0383 00        		.byte	0
 2751 0384 00        		.byte	0
 2752 0385 00        		.byte	0
 2753 0386 00        		.byte	0
 2754 0387 00        		.byte	0
 2755 0388 00        		.byte	0
 2756 0389 00        		.byte	0
 2757 038a 00        		.byte	0
 2758 038b 00        		.byte	0
 2759 038c 1F        		.byte	31
 2760 038d FF        		.byte	-1
 2761 038e FF        		.byte	-1
 2762 038f FF        		.byte	-1
 2763 0390 FF        		.byte	-1
 2764 0391 FF        		.byte	-1
 2765 0392 FF        		.byte	-1
 2766 0393 FF        		.byte	-1
 2767 0394 FF        		.byte	-1
 2768 0395 FF        		.byte	-1
 2769 0396 FF        		.byte	-1
 2770 0397 FF        		.byte	-1
 2771 0398 FF        		.byte	-1
 2772 0399 FF        		.byte	-1
 2773 039a FF        		.byte	-1
 2774 039b FF        		.byte	-1
 2775 039c FF        		.byte	-1
 2776 039d FF        		.byte	-1
 2777 039e FF        		.byte	-1
 2778 039f FC        		.byte	-4
 2779 03a0 F0        		.byte	-16
 2780 03a1 E0        		.byte	-32
 2781 03a2 C0        		.byte	-64
 2782 03a3 80        		.byte	-128
 2783 03a4 80        		.byte	-128
 2784 03a5 00        		.byte	0
 2785 03a6 00        		.byte	0
 2786 03a7 00        		.byte	0
 2787 03a8 00        		.byte	0
 2788 03a9 00        		.byte	0
 2789 03aa 80        		.byte	-128
 2790 03ab C0        		.byte	-64
 2791 03ac C0        		.byte	-64
 2792 03ad F0        		.byte	-16
 2793 03ae FC        		.byte	-4
 2794 03af FF        		.byte	-1
 2795 03b0 FF        		.byte	-1
 2796 03b1 FF        		.byte	-1
 2797 03b2 FF        		.byte	-1
 2798 03b3 FF        		.byte	-1
 2799 03b4 FF        		.byte	-1
 2800 03b5 FF        		.byte	-1
 2801 03b6 FF        		.byte	-1
 2802 03b7 FF        		.byte	-1
 2803 03b8 FF        		.byte	-1
 2804 03b9 FF        		.byte	-1
 2805 03ba FF        		.byte	-1
 2806 03bb FF        		.byte	-1
 2807 03bc FF        		.byte	-1
 2808 03bd FF        		.byte	-1
 2809 03be FF        		.byte	-1
 2810 03bf FF        		.byte	-1
 2811 03c0 FF        		.byte	-1
 2812 03c1 3F        		.byte	63
 2813 03c2 00        		.byte	0
 2814 03c3 00        		.byte	0
 2815 03c4 00        		.byte	0
 2816 03c5 00        		.byte	0
 2817 03c6 00        		.byte	0
 2818 03c7 00        		.byte	0
 2819 03c8 00        		.byte	0
 2820 03c9 00        		.byte	0
 2821 03ca 00        		.byte	0
 2822 03cb 00        		.byte	0
 2823 03cc 00        		.byte	0
 2824 03cd 00        		.byte	0
 2825 03ce 00        		.byte	0
 2826 03cf 00        		.byte	0
 2827 03d0 00        		.byte	0
 2828 03d1 00        		.byte	0
 2829 03d2 00        		.byte	0
 2830 03d3 00        		.byte	0
 2831 03d4 00        		.byte	0
 2832 03d5 00        		.byte	0
 2833 03d6 00        		.byte	0
 2834 03d7 00        		.byte	0
 2835 03d8 00        		.byte	0
 2836 03d9 00        		.byte	0
 2837 03da 00        		.byte	0
 2838 03db 00        		.byte	0
 2839 03dc 00        		.byte	0
 2840 03dd 00        		.byte	0
 2841 03de 00        		.byte	0
 2842 03df 00        		.byte	0
 2843 03e0 00        		.byte	0
 2844 03e1 00        		.byte	0
 2845 03e2 00        		.byte	0
 2846 03e3 00        		.byte	0
 2847 03e4 00        		.byte	0
 2848 03e5 00        		.byte	0
 2849 03e6 00        		.byte	0
 2850 03e7 00        		.byte	0
 2851 03e8 00        		.byte	0
 2852 03e9 00        		.byte	0
 2853 03ea 00        		.byte	0
 2854 03eb 00        		.byte	0
 2855 03ec 00        		.byte	0
 2856 03ed 00        		.byte	0
 2857 03ee 00        		.byte	0
 2858 03ef 00        		.byte	0
 2859 03f0 00        		.byte	0
 2860 03f1 00        		.byte	0
 2861 03f2 00        		.byte	0
 2862 03f3 00        		.byte	0
 2863 03f4 00        		.byte	0
 2864 03f5 00        		.byte	0
 2865 03f6 00        		.byte	0
 2866 03f7 00        		.byte	0
 2867 03f8 00        		.byte	0
 2868 03f9 00        		.byte	0
 2869 03fa 00        		.byte	0
 2870 03fb 00        		.byte	0
 2871 03fc 00        		.byte	0
 2872 03fd 00        		.byte	0
 2873 03fe 00        		.byte	0
 2874 03ff 00        		.byte	0
 2875 0400 00        		.byte	0
 2876 0401 00        		.byte	0
 2877 0402 00        		.byte	0
 2878 0403 00        		.byte	0
 2879 0404 00        		.byte	0
 2880 0405 00        		.byte	0
 2881 0406 00        		.byte	0
 2882 0407 00        		.byte	0
 2883 0408 00        		.byte	0
 2884 0409 00        		.byte	0
 2885 040a 00        		.byte	0
 2886 040b 00        		.byte	0
 2887 040c 00        		.byte	0
 2888 040d 01        		.byte	1
 2889 040e 07        		.byte	7
 2890 040f 1F        		.byte	31
 2891 0410 7F        		.byte	127
 2892 0411 FF        		.byte	-1
 2893 0412 FF        		.byte	-1
 2894 0413 FF        		.byte	-1
 2895 0414 FF        		.byte	-1
 2896 0415 FF        		.byte	-1
 2897 0416 FF        		.byte	-1
 2898 0417 FF        		.byte	-1
 2899 0418 FF        		.byte	-1
 2900 0419 FF        		.byte	-1
 2901 041a FF        		.byte	-1
 2902 041b FF        		.byte	-1
 2903 041c FF        		.byte	-1
 2904 041d FF        		.byte	-1
 2905 041e FF        		.byte	-1
 2906 041f FF        		.byte	-1
 2907 0420 FF        		.byte	-1
 2908 0421 FF        		.byte	-1
 2909 0422 7F        		.byte	127
 2910 0423 0F        		.byte	15
 2911 0424 03        		.byte	3
 2912 0425 00        		.byte	0
 2913 0426 00        		.byte	0
 2914 0427 00        		.byte	0
 2915 0428 00        		.byte	0
 2916 0429 01        		.byte	1
 2917 042a 0F        		.byte	15
 2918 042b 3F        		.byte	63
 2919 042c FF        		.byte	-1
 2920 042d FF        		.byte	-1
 2921 042e FF        		.byte	-1
 2922 042f FF        		.byte	-1
 2923 0430 FF        		.byte	-1
 2924 0431 FF        		.byte	-1
 2925 0432 FF        		.byte	-1
 2926 0433 FF        		.byte	-1
 2927 0434 FF        		.byte	-1
 2928 0435 FF        		.byte	-1
 2929 0436 FF        		.byte	-1
 2930 0437 FF        		.byte	-1
 2931 0438 FF        		.byte	-1
 2932 0439 FF        		.byte	-1
 2933 043a FF        		.byte	-1
 2934 043b FF        		.byte	-1
 2935 043c FF        		.byte	-1
 2936 043d 7F        		.byte	127
 2937 043e 1F        		.byte	31
 2938 043f 07        		.byte	7
 2939 0440 01        		.byte	1
 2940 0441 00        		.byte	0
 2941 0442 00        		.byte	0
 2942 0443 00        		.byte	0
 2943 0444 00        		.byte	0
 2944 0445 00        		.byte	0
 2945 0446 00        		.byte	0
 2946 0447 00        		.byte	0
 2947 0448 00        		.byte	0
 2948 0449 00        		.byte	0
 2949 044a 00        		.byte	0
 2950 044b 00        		.byte	0
 2951 044c 00        		.byte	0
 2952 044d 00        		.byte	0
 2953 044e 00        		.byte	0
 2954 044f 00        		.byte	0
 2955 0450 00        		.byte	0
 2956 0451 00        		.byte	0
 2957 0452 00        		.byte	0
 2958 0453 00        		.byte	0
 2959 0454 00        		.byte	0
 2960 0455 00        		.byte	0
 2961 0456 00        		.byte	0
 2962 0457 00        		.byte	0
 2963 0458 00        		.byte	0
 2964 0459 00        		.byte	0
 2965 045a 00        		.byte	0
 2966 045b 00        		.byte	0
 2967 045c 00        		.byte	0
 2968 045d 00        		.byte	0
 2969 045e 00        		.byte	0
 2970 045f 00        		.byte	0
 2971 0460 00        		.byte	0
 2972 0461 00        		.byte	0
 2973 0462 00        		.byte	0
 2974 0463 00        		.byte	0
 2975 0464 00        		.byte	0
 2976 0465 00        		.byte	0
 2977 0466 00        		.byte	0
 2978 0467 00        		.byte	0
 2979 0468 00        		.byte	0
 2980 0469 00        		.byte	0
 2981 046a 00        		.byte	0
 2982 046b 00        		.byte	0
 2983 046c 00        		.byte	0
 2984 046d 00        		.byte	0
 2985 046e 00        		.byte	0
 2986 046f 00        		.byte	0
 2987 0470 00        		.byte	0
 2988 0471 00        		.byte	0
 2989 0472 00        		.byte	0
 2990 0473 00        		.byte	0
 2991 0474 00        		.byte	0
 2992 0475 00        		.byte	0
 2993 0476 00        		.byte	0
 2994 0477 00        		.byte	0
 2995 0478 00        		.byte	0
 2996 0479 00        		.byte	0
 2997 047a 00        		.byte	0
 2998 047b 00        		.byte	0
 2999 047c 00        		.byte	0
 3000 047d 00        		.byte	0
 3001 047e 00        		.byte	0
 3002 047f 00        		.byte	0
 3003 0480 00        		.byte	0
 3004 0481 00        		.byte	0
 3005 0482 00        		.byte	0
 3006 0483 00        		.byte	0
 3007 0484 00        		.byte	0
 3008 0485 00        		.byte	0
 3009 0486 00        		.byte	0
 3010 0487 00        		.byte	0
 3011 0488 00        		.byte	0
 3012 0489 00        		.byte	0
 3013 048a 00        		.byte	0
 3014 048b 00        		.byte	0
 3015 048c 00        		.byte	0
 3016 048d 00        		.byte	0
 3017 048e 00        		.byte	0
 3018 048f 00        		.byte	0
 3019 0490 00        		.byte	0
 3020 0491 00        		.byte	0
 3021 0492 01        		.byte	1
 3022 0493 03        		.byte	3
 3023 0494 07        		.byte	7
 3024 0495 0F        		.byte	15
 3025 0496 1F        		.byte	31
 3026 0497 3F        		.byte	63
 3027 0498 3F        		.byte	63
 3028 0499 7F        		.byte	127
 3029 049a FF        		.byte	-1
 3030 049b FF        		.byte	-1
 3031 049c FF        		.byte	-1
 3032 049d FF        		.byte	-1
 3033 049e FF        		.byte	-1
 3034 049f 7F        		.byte	127
 3035 04a0 0F        		.byte	15
 3036 04a1 03        		.byte	3
 3037 04a2 00        		.byte	0
 3038 04a3 00        		.byte	0
 3039 04a4 00        		.byte	0
 3040 04a5 00        		.byte	0
 3041 04a6 00        		.byte	0
 3042 04a7 00        		.byte	0
 3043 04a8 00        		.byte	0
 3044 04a9 00        		.byte	0
 3045 04aa 00        		.byte	0
 3046 04ab 00        		.byte	0
 3047 04ac 01        		.byte	1
 3048 04ad 0F        		.byte	15
 3049 04ae 3F        		.byte	63
 3050 04af FF        		.byte	-1
 3051 04b0 FF        		.byte	-1
 3052 04b1 FF        		.byte	-1
 3053 04b2 FF        		.byte	-1
 3054 04b3 FF        		.byte	-1
 3055 04b4 7F        		.byte	127
 3056 04b5 7F        		.byte	127
 3057 04b6 3F        		.byte	63
 3058 04b7 1F        		.byte	31
 3059 04b8 0F        		.byte	15
 3060 04b9 07        		.byte	7
 3061 04ba 03        		.byte	3
 3062 04bb 01        		.byte	1
 3063 04bc 00        		.byte	0
 3064 04bd 00        		.byte	0
 3065 04be 00        		.byte	0
 3066 04bf 00        		.byte	0
 3067 04c0 00        		.byte	0
 3068 04c1 00        		.byte	0
 3069 04c2 00        		.byte	0
 3070 04c3 00        		.byte	0
 3071 04c4 00        		.byte	0
 3072 04c5 00        		.byte	0
 3073 04c6 00        		.byte	0
 3074 04c7 00        		.byte	0
 3075 04c8 00        		.byte	0
 3076 04c9 00        		.byte	0
 3077 04ca 00        		.byte	0
 3078 04cb 00        		.byte	0
 3079 04cc 00        		.byte	0
 3080 04cd 00        		.byte	0
 3081 04ce 00        		.byte	0
 3082 04cf 00        		.byte	0
 3083 04d0 00        		.byte	0
 3084 04d1 00        		.byte	0
 3085 04d2 00        		.byte	0
 3086 04d3 00        		.byte	0
 3087 04d4 00        		.byte	0
 3088 04d5 00        		.byte	0
 3089 04d6 00        		.byte	0
 3090 04d7 00        		.byte	0
 3091 04d8 00        		.byte	0
 3092 04d9 00        		.byte	0
 3093 04da 00        		.byte	0
 3094 04db 00        		.byte	0
 3095 04dc 00        		.byte	0
 3096 04dd 00        		.byte	0
 3097 04de 00        		.byte	0
 3098 04df 00        		.byte	0
 3099 04e0 00        		.byte	0
 3100 04e1 00        		.byte	0
 3101 04e2 00        		.byte	0
 3102 04e3 00        		.byte	0
 3103 04e4 00        		.byte	0
 3104 04e5 00        		.byte	0
 3105 04e6 00        		.byte	0
 3106 04e7 00        		.byte	0
 3107 04e8 00        		.byte	0
 3108 04e9 00        		.byte	0
 3109 04ea 00        		.byte	0
 3110 04eb 00        		.byte	0
 3111 04ec 00        		.byte	0
 3112 04ed 00        		.byte	0
 3113 04ee 00        		.byte	0
 3114 04ef 00        		.byte	0
 3115 04f0 00        		.byte	0
 3116 04f1 00        		.byte	0
 3117 04f2 00        		.byte	0
 3118 04f3 00        		.byte	0
 3119 04f4 00        		.byte	0
 3120 04f5 00        		.byte	0
 3121 04f6 00        		.byte	0
 3122 04f7 00        		.byte	0
 3123 04f8 00        		.byte	0
 3124 04f9 00        		.byte	0
 3125 04fa 00        		.byte	0
 3126 04fb 00        		.byte	0
 3127 04fc 00        		.byte	0
 3128 04fd 00        		.byte	0
 3129 04fe 00        		.byte	0
 3130 04ff 00        		.byte	0
 3131 0500 00        		.byte	0
 3132 0501 00        		.byte	0
 3133 0502 00        		.byte	0
 3134 0503 00        		.byte	0
 3135 0504 00        		.byte	0
 3136 0505 00        		.byte	0
 3137 0506 00        		.byte	0
 3138 0507 00        		.byte	0
 3139 0508 00        		.byte	0
 3140 0509 00        		.byte	0
 3141 050a 00        		.byte	0
 3142 050b 00        		.byte	0
 3143 050c 00        		.byte	0
 3144 050d 00        		.byte	0
 3145 050e 00        		.byte	0
 3146 050f 00        		.byte	0
 3147 0510 00        		.byte	0
 3148 0511 00        		.byte	0
 3149 0512 00        		.byte	0
 3150 0513 00        		.byte	0
 3151 0514 00        		.byte	0
 3152 0515 00        		.byte	0
 3153 0516 00        		.byte	0
 3154 0517 00        		.byte	0
 3155 0518 00        		.byte	0
 3156 0519 00        		.byte	0
 3157 051a 00        		.byte	0
 3158 051b 00        		.byte	0
 3159 051c 00        		.byte	0
 3160 051d 01        		.byte	1
 3161 051e 01        		.byte	1
 3162 051f 00        		.byte	0
 3163 0520 00        		.byte	0
 3164 0521 00        		.byte	0
 3165 0522 00        		.byte	0
 3166 0523 00        		.byte	0
 3167 0524 00        		.byte	0
 3168 0525 00        		.byte	0
 3169 0526 00        		.byte	0
 3170 0527 00        		.byte	0
 3171 0528 00        		.byte	0
 3172 0529 00        		.byte	0
 3173 052a 00        		.byte	0
 3174 052b 00        		.byte	0
 3175 052c 00        		.byte	0
 3176 052d 00        		.byte	0
 3177 052e 00        		.byte	0
 3178 052f 01        		.byte	1
 3179 0530 01        		.byte	1
 3180 0531 01        		.byte	1
 3181 0532 00        		.byte	0
 3182 0533 00        		.byte	0
 3183 0534 00        		.byte	0
 3184 0535 00        		.byte	0
 3185 0536 00        		.byte	0
 3186 0537 00        		.byte	0
 3187 0538 00        		.byte	0
 3188 0539 00        		.byte	0
 3189 053a 00        		.byte	0
 3190 053b 00        		.byte	0
 3191 053c 00        		.byte	0
 3192 053d 00        		.byte	0
 3193 053e 00        		.byte	0
 3194 053f 00        		.byte	0
 3195 0540 00        		.byte	0
 3196 0541 00        		.byte	0
 3197 0542 00        		.byte	0
 3198 0543 00        		.byte	0
 3199 0544 00        		.byte	0
 3200 0545 00        		.byte	0
 3201 0546 00        		.byte	0
 3202 0547 00        		.byte	0
 3203 0548 00        		.byte	0
 3204 0549 00        		.byte	0
 3205 054a 00        		.byte	0
 3206 054b 00        		.byte	0
 3207 054c 00        		.byte	0
 3208 054d 00        		.byte	0
 3209 054e 00        		.byte	0
 3210 054f 00        		.byte	0
 3211 0550 00        		.byte	0
 3212 0551 00        		.byte	0
 3213 0552 00        		.byte	0
 3214 0553 00        		.byte	0
 3215 0554 00        		.byte	0
 3216 0555 00        		.byte	0
 3217 0556 00        		.byte	0
 3218 0557 00        		.byte	0
 3219 0558 00        		.byte	0
 3220 0559 00        		.byte	0
 3221 055a 00        		.byte	0
 3222 055b 00        		.byte	0
 3223 055c 00        		.byte	0
 3224 055d 00        		.byte	0
 3225 055e 00        		.byte	0
 3226 055f 00        		.byte	0
 3227 0560 00        		.byte	0
 3228 0561 00        		.byte	0
 3229 0562 00        		.byte	0
 3230 0563 00        		.byte	0
 3231 0564 00        		.byte	0
 3232 0565 00        		.byte	0
 3233 0566 00        		.byte	0
 3234 0567 00        		.byte	0
 3235               	.global	unit_test_return
 3236               		.section .bss
 3239               	unit_test_return:
 3240 0000 00        		.zero	1
 3241               		.section	.progmem.data,"a",@progbits
 3244               	Liberation_Sans15x21_Numbers:
 3245 0568 06        		.byte	6
 3246 0569 00        		.byte	0
 3247 056a 00        		.byte	0
 3248 056b 00        		.byte	0
 3249 056c 00        		.byte	0
 3250 056d 00        		.byte	0
 3251 056e 00        		.byte	0
 3252 056f 00        		.byte	0
 3253 0570 00        		.byte	0
 3254 0571 0F        		.byte	15
 3255 0572 00        		.byte	0
 3256 0573 00        		.byte	0
 3257 0574 0F        		.byte	15
 3258 0575 00        		.byte	0
 3259 0576 00        		.byte	0
 3260 0577 0F        		.byte	15
 3261 0578 00        		.byte	0
 3262 0579 00        		.byte	0
 3263 057a 0F        		.byte	15
 3264 057b 00        		.byte	0
 3265 057c 00        		.byte	0
 3266 057d 00        		.byte	0
 3267 057e 00        		.byte	0
 3268 057f 00        		.byte	0
 3269 0580 00        		.byte	0
 3270 0581 00        		.byte	0
 3271 0582 00        		.byte	0
 3272 0583 00        		.byte	0
 3273 0584 00        		.byte	0
 3274 0585 00        		.byte	0
 3275 0586 00        		.byte	0
 3276 0587 00        		.byte	0
 3277 0588 00        		.byte	0
 3278 0589 00        		.byte	0
 3279 058a 00        		.byte	0
 3280 058b 00        		.byte	0
 3281 058c 00        		.byte	0
 3282 058d 00        		.byte	0
 3283 058e 00        		.byte	0
 3284 058f 00        		.byte	0
 3285 0590 00        		.byte	0
 3286 0591 00        		.byte	0
 3287 0592 00        		.byte	0
 3288 0593 00        		.byte	0
 3289 0594 00        		.byte	0
 3290 0595 00        		.byte	0
 3291 0596 07        		.byte	7
 3292 0597 00        		.byte	0
 3293 0598 00        		.byte	0
 3294 0599 1E        		.byte	30
 3295 059a 00        		.byte	0
 3296 059b E0        		.byte	-32
 3297 059c 1F        		.byte	31
 3298 059d 00        		.byte	0
 3299 059e FF        		.byte	-1
 3300 059f 1F        		.byte	31
 3301 05a0 F8        		.byte	-8
 3302 05a1 FF        		.byte	-1
 3303 05a2 03        		.byte	3
 3304 05a3 FF        		.byte	-1
 3305 05a4 1F        		.byte	31
 3306 05a5 00        		.byte	0
 3307 05a6 FF        		.byte	-1
 3308 05a7 01        		.byte	1
 3309 05a8 00        		.byte	0
 3310 05a9 0F        		.byte	15
 3311 05aa 00        		.byte	0
 3312 05ab 00        		.byte	0
 3313 05ac 00        		.byte	0
 3314 05ad 00        		.byte	0
 3315 05ae 00        		.byte	0
 3316 05af 00        		.byte	0
 3317 05b0 00        		.byte	0
 3318 05b1 00        		.byte	0
 3319 05b2 00        		.byte	0
 3320 05b3 00        		.byte	0
 3321 05b4 00        		.byte	0
 3322 05b5 00        		.byte	0
 3323 05b6 00        		.byte	0
 3324 05b7 00        		.byte	0
 3325 05b8 00        		.byte	0
 3326 05b9 00        		.byte	0
 3327 05ba 00        		.byte	0
 3328 05bb 00        		.byte	0
 3329 05bc 00        		.byte	0
 3330 05bd 00        		.byte	0
 3331 05be 00        		.byte	0
 3332 05bf 00        		.byte	0
 3333 05c0 00        		.byte	0
 3334 05c1 00        		.byte	0
 3335 05c2 00        		.byte	0
 3336 05c3 00        		.byte	0
 3337 05c4 0E        		.byte	14
 3338 05c5 00        		.byte	0
 3339 05c6 00        		.byte	0
 3340 05c7 00        		.byte	0
 3341 05c8 C0        		.byte	-64
 3342 05c9 7F        		.byte	127
 3343 05ca 00        		.byte	0
 3344 05cb F8        		.byte	-8
 3345 05cc FF        		.byte	-1
 3346 05cd 01        		.byte	1
 3347 05ce FC        		.byte	-4
 3348 05cf FF        		.byte	-1
 3349 05d0 07        		.byte	7
 3350 05d1 FC        		.byte	-4
 3351 05d2 FF        		.byte	-1
 3352 05d3 07        		.byte	7
 3353 05d4 3E        		.byte	62
 3354 05d5 80        		.byte	-128
 3355 05d6 0F        		.byte	15
 3356 05d7 0E        		.byte	14
 3357 05d8 00        		.byte	0
 3358 05d9 0E        		.byte	14
 3359 05da 0E        		.byte	14
 3360 05db 00        		.byte	0
 3361 05dc 0E        		.byte	14
 3362 05dd 0E        		.byte	14
 3363 05de 00        		.byte	0
 3364 05df 0E        		.byte	14
 3365 05e0 1E        		.byte	30
 3366 05e1 80        		.byte	-128
 3367 05e2 0F        		.byte	15
 3368 05e3 FC        		.byte	-4
 3369 05e4 FF        		.byte	-1
 3370 05e5 07        		.byte	7
 3371 05e6 FC        		.byte	-4
 3372 05e7 FF        		.byte	-1
 3373 05e8 07        		.byte	7
 3374 05e9 F8        		.byte	-8
 3375 05ea FF        		.byte	-1
 3376 05eb 01        		.byte	1
 3377 05ec C0        		.byte	-64
 3378 05ed 7F        		.byte	127
 3379 05ee 00        		.byte	0
 3380 05ef 00        		.byte	0
 3381 05f0 00        		.byte	0
 3382 05f1 00        		.byte	0
 3383 05f2 0E        		.byte	14
 3384 05f3 00        		.byte	0
 3385 05f4 00        		.byte	0
 3386 05f5 00        		.byte	0
 3387 05f6 70        		.byte	112
 3388 05f7 00        		.byte	0
 3389 05f8 0E        		.byte	14
 3390 05f9 38        		.byte	56
 3391 05fa 00        		.byte	0
 3392 05fb 0E        		.byte	14
 3393 05fc 38        		.byte	56
 3394 05fd 00        		.byte	0
 3395 05fe 0E        		.byte	14
 3396 05ff 1C        		.byte	28
 3397 0600 00        		.byte	0
 3398 0601 0E        		.byte	14
 3399 0602 0E        		.byte	14
 3400 0603 00        		.byte	0
 3401 0604 0E        		.byte	14
 3402 0605 FE        		.byte	-2
 3403 0606 FF        		.byte	-1
 3404 0607 0F        		.byte	15
 3405 0608 FE        		.byte	-2
 3406 0609 FF        		.byte	-1
 3407 060a 0F        		.byte	15
 3408 060b FE        		.byte	-2
 3409 060c FF        		.byte	-1
 3410 060d 0F        		.byte	15
 3411 060e FE        		.byte	-2
 3412 060f FF        		.byte	-1
 3413 0610 0F        		.byte	15
 3414 0611 00        		.byte	0
 3415 0612 00        		.byte	0
 3416 0613 0E        		.byte	14
 3417 0614 00        		.byte	0
 3418 0615 00        		.byte	0
 3419 0616 0E        		.byte	14
 3420 0617 00        		.byte	0
 3421 0618 00        		.byte	0
 3422 0619 0E        		.byte	14
 3423 061a 00        		.byte	0
 3424 061b 00        		.byte	0
 3425 061c 0E        		.byte	14
 3426 061d 00        		.byte	0
 3427 061e 00        		.byte	0
 3428 061f 00        		.byte	0
 3429 0620 0E        		.byte	14
 3430 0621 00        		.byte	0
 3431 0622 00        		.byte	0
 3432 0623 00        		.byte	0
 3433 0624 60        		.byte	96
 3434 0625 00        		.byte	0
 3435 0626 0F        		.byte	15
 3436 0627 78        		.byte	120
 3437 0628 80        		.byte	-128
 3438 0629 0F        		.byte	15
 3439 062a 7C        		.byte	124
 3440 062b C0        		.byte	-64
 3441 062c 0F        		.byte	15
 3442 062d 7C        		.byte	124
 3443 062e E0        		.byte	-32
 3444 062f 0F        		.byte	15
 3445 0630 1E        		.byte	30
 3446 0631 F0        		.byte	-16
 3447 0632 0F        		.byte	15
 3448 0633 0E        		.byte	14
 3449 0634 F8        		.byte	-8
 3450 0635 0E        		.byte	14
 3451 0636 0E        		.byte	14
 3452 0637 7C        		.byte	124
 3453 0638 0E        		.byte	14
 3454 0639 0E        		.byte	14
 3455 063a 3E        		.byte	62
 3456 063b 0E        		.byte	14
 3457 063c 1E        		.byte	30
 3458 063d 1F        		.byte	31
 3459 063e 0E        		.byte	14
 3460 063f FE        		.byte	-2
 3461 0640 0F        		.byte	15
 3462 0641 0E        		.byte	14
 3463 0642 FC        		.byte	-4
 3464 0643 07        		.byte	7
 3465 0644 0E        		.byte	14
 3466 0645 F8        		.byte	-8
 3467 0646 03        		.byte	3
 3468 0647 0E        		.byte	14
 3469 0648 F0        		.byte	-16
 3470 0649 01        		.byte	1
 3471 064a 0E        		.byte	14
 3472 064b 00        		.byte	0
 3473 064c 00        		.byte	0
 3474 064d 00        		.byte	0
 3475 064e 0E        		.byte	14
 3476 064f 00        		.byte	0
 3477 0650 00        		.byte	0
 3478 0651 00        		.byte	0
 3479 0652 30        		.byte	48
 3480 0653 80        		.byte	-128
 3481 0654 01        		.byte	1
 3482 0655 38        		.byte	56
 3483 0656 80        		.byte	-128
 3484 0657 03        		.byte	3
 3485 0658 3C        		.byte	60
 3486 0659 80        		.byte	-128
 3487 065a 07        		.byte	7
 3488 065b 3C        		.byte	60
 3489 065c 80        		.byte	-128
 3490 065d 0F        		.byte	15
 3491 065e 1E        		.byte	30
 3492 065f 00        		.byte	0
 3493 0660 0F        		.byte	15
 3494 0661 0E        		.byte	14
 3495 0662 0E        		.byte	14
 3496 0663 0E        		.byte	14
 3497 0664 0E        		.byte	14
 3498 0665 0E        		.byte	14
 3499 0666 0E        		.byte	14
 3500 0667 0E        		.byte	14
 3501 0668 0E        		.byte	14
 3502 0669 0E        		.byte	14
 3503 066a 1E        		.byte	30
 3504 066b 1F        		.byte	31
 3505 066c 0F        		.byte	15
 3506 066d FE        		.byte	-2
 3507 066e FF        		.byte	-1
 3508 066f 0F        		.byte	15
 3509 0670 FC        		.byte	-4
 3510 0671 FB        		.byte	-5
 3511 0672 07        		.byte	7
 3512 0673 FC        		.byte	-4
 3513 0674 F9        		.byte	-7
 3514 0675 03        		.byte	3
 3515 0676 F0        		.byte	-16
 3516 0677 E0        		.byte	-32
 3517 0678 01        		.byte	1
 3518 0679 00        		.byte	0
 3519 067a 00        		.byte	0
 3520 067b 00        		.byte	0
 3521 067c 0F        		.byte	15
 3522 067d 00        		.byte	0
 3523 067e 00        		.byte	0
 3524 067f 00        		.byte	0
 3525 0680 00        		.byte	0
 3526 0681 F0        		.byte	-16
 3527 0682 00        		.byte	0
 3528 0683 00        		.byte	0
 3529 0684 F8        		.byte	-8
 3530 0685 00        		.byte	0
 3531 0686 00        		.byte	0
 3532 0687 FE        		.byte	-2
 3533 0688 00        		.byte	0
 3534 0689 80        		.byte	-128
 3535 068a EF        		.byte	-17
 3536 068b 00        		.byte	0
 3537 068c C0        		.byte	-64
 3538 068d E7        		.byte	-25
 3539 068e 00        		.byte	0
 3540 068f F0        		.byte	-16
 3541 0690 E1        		.byte	-31
 3542 0691 00        		.byte	0
 3543 0692 7C        		.byte	124
 3544 0693 E0        		.byte	-32
 3545 0694 00        		.byte	0
 3546 0695 3E        		.byte	62
 3547 0696 E0        		.byte	-32
 3548 0697 00        		.byte	0
 3549 0698 FE        		.byte	-2
 3550 0699 FF        		.byte	-1
 3551 069a 0F        		.byte	15
 3552 069b FE        		.byte	-2
 3553 069c FF        		.byte	-1
 3554 069d 0F        		.byte	15
 3555 069e FE        		.byte	-2
 3556 069f FF        		.byte	-1
 3557 06a0 0F        		.byte	15
 3558 06a1 FE        		.byte	-2
 3559 06a2 FF        		.byte	-1
 3560 06a3 0F        		.byte	15
 3561 06a4 00        		.byte	0
 3562 06a5 E0        		.byte	-32
 3563 06a6 00        		.byte	0
 3564 06a7 00        		.byte	0
 3565 06a8 E0        		.byte	-32
 3566 06a9 00        		.byte	0
 3567 06aa 0E        		.byte	14
 3568 06ab 00        		.byte	0
 3569 06ac 00        		.byte	0
 3570 06ad 00        		.byte	0
 3571 06ae 00        		.byte	0
 3572 06af 80        		.byte	-128
 3573 06b0 01        		.byte	1
 3574 06b1 F8        		.byte	-8
 3575 06b2 87        		.byte	-121
 3576 06b3 03        		.byte	3
 3577 06b4 FE        		.byte	-2
 3578 06b5 87        		.byte	-121
 3579 06b6 07        		.byte	7
 3580 06b7 FE        		.byte	-2
 3581 06b8 87        		.byte	-121
 3582 06b9 0F        		.byte	15
 3583 06ba FE        		.byte	-2
 3584 06bb 07        		.byte	7
 3585 06bc 0F        		.byte	15
 3586 06bd 0E        		.byte	14
 3587 06be 03        		.byte	3
 3588 06bf 0E        		.byte	14
 3589 06c0 8E        		.byte	-114
 3590 06c1 03        		.byte	3
 3591 06c2 0E        		.byte	14
 3592 06c3 8E        		.byte	-114
 3593 06c4 03        		.byte	3
 3594 06c5 0E        		.byte	14
 3595 06c6 8E        		.byte	-114
 3596 06c7 07        		.byte	7
 3597 06c8 0F        		.byte	15
 3598 06c9 8E        		.byte	-114
 3599 06ca FF        		.byte	-1
 3600 06cb 07        		.byte	7
 3601 06cc 0E        		.byte	14
 3602 06cd FF        		.byte	-1
 3603 06ce 07        		.byte	7
 3604 06cf 0E        		.byte	14
 3605 06d0 FE        		.byte	-2
 3606 06d1 03        		.byte	3
 3607 06d2 00        		.byte	0
 3608 06d3 FC        		.byte	-4
 3609 06d4 00        		.byte	0
 3610 06d5 00        		.byte	0
 3611 06d6 00        		.byte	0
 3612 06d7 00        		.byte	0
 3613 06d8 0E        		.byte	14
 3614 06d9 00        		.byte	0
 3615 06da 00        		.byte	0
 3616 06db 00        		.byte	0
 3617 06dc C0        		.byte	-64
 3618 06dd 7F        		.byte	127
 3619 06de 00        		.byte	0
 3620 06df F0        		.byte	-16
 3621 06e0 FF        		.byte	-1
 3622 06e1 01        		.byte	1
 3623 06e2 F8        		.byte	-8
 3624 06e3 FF        		.byte	-1
 3625 06e4 07        		.byte	7
 3626 06e5 FC        		.byte	-4
 3627 06e6 FF        		.byte	-1
 3628 06e7 07        		.byte	7
 3629 06e8 3E        		.byte	62
 3630 06e9 0E        		.byte	14
 3631 06ea 0F        		.byte	15
 3632 06eb 0E        		.byte	14
 3633 06ec 07        		.byte	7
 3634 06ed 0E        		.byte	14
 3635 06ee 0E        		.byte	14
 3636 06ef 07        		.byte	7
 3637 06f0 0E        		.byte	14
 3638 06f1 0E        		.byte	14
 3639 06f2 07        		.byte	7
 3640 06f3 0E        		.byte	14
 3641 06f4 1E        		.byte	30
 3642 06f5 0F        		.byte	15
 3643 06f6 0F        		.byte	15
 3644 06f7 3E        		.byte	62
 3645 06f8 FF        		.byte	-1
 3646 06f9 0F        		.byte	15
 3647 06fa 3C        		.byte	60
 3648 06fb FE        		.byte	-2
 3649 06fc 07        		.byte	7
 3650 06fd 38        		.byte	56
 3651 06fe FE        		.byte	-2
 3652 06ff 03        		.byte	3
 3653 0700 30        		.byte	48
 3654 0701 F8        		.byte	-8
 3655 0702 01        		.byte	1
 3656 0703 00        		.byte	0
 3657 0704 00        		.byte	0
 3658 0705 00        		.byte	0
 3659 0706 0E        		.byte	14
 3660 0707 00        		.byte	0
 3661 0708 00        		.byte	0
 3662 0709 00        		.byte	0
 3663 070a 0E        		.byte	14
 3664 070b 00        		.byte	0
 3665 070c 00        		.byte	0
 3666 070d 0E        		.byte	14
 3667 070e 00        		.byte	0
 3668 070f 00        		.byte	0
 3669 0710 0E        		.byte	14
 3670 0711 00        		.byte	0
 3671 0712 00        		.byte	0
 3672 0713 0E        		.byte	14
 3673 0714 00        		.byte	0
 3674 0715 0F        		.byte	15
 3675 0716 0E        		.byte	14
 3676 0717 E0        		.byte	-32
 3677 0718 0F        		.byte	15
 3678 0719 0E        		.byte	14
 3679 071a F8        		.byte	-8
 3680 071b 0F        		.byte	15
 3681 071c 0E        		.byte	14
 3682 071d FE        		.byte	-2
 3683 071e 0F        		.byte	15
 3684 071f 8E        		.byte	-114
 3685 0720 FF        		.byte	-1
 3686 0721 00        		.byte	0
 3687 0722 CE        		.byte	-50
 3688 0723 0F        		.byte	15
 3689 0724 00        		.byte	0
 3690 0725 FE        		.byte	-2
 3691 0726 03        		.byte	3
 3692 0727 00        		.byte	0
 3693 0728 FE        		.byte	-2
 3694 0729 00        		.byte	0
 3695 072a 00        		.byte	0
 3696 072b 3E        		.byte	62
 3697 072c 00        		.byte	0
 3698 072d 00        		.byte	0
 3699 072e 1E        		.byte	30
 3700 072f 00        		.byte	0
 3701 0730 00        		.byte	0
 3702 0731 00        		.byte	0
 3703 0732 00        		.byte	0
 3704 0733 00        		.byte	0
 3705 0734 0E        		.byte	14
 3706 0735 00        		.byte	0
 3707 0736 00        		.byte	0
 3708 0737 00        		.byte	0
 3709 0738 F0        		.byte	-16
 3710 0739 E0        		.byte	-32
 3711 073a 01        		.byte	1
 3712 073b F8        		.byte	-8
 3713 073c FB        		.byte	-5
 3714 073d 03        		.byte	3
 3715 073e FC        		.byte	-4
 3716 073f FB        		.byte	-5
 3717 0740 07        		.byte	7
 3718 0741 FE        		.byte	-2
 3719 0742 FF        		.byte	-1
 3720 0743 0F        		.byte	15
 3721 0744 1E        		.byte	30
 3722 0745 1F        		.byte	31
 3723 0746 0F        		.byte	15
 3724 0747 0E        		.byte	14
 3725 0748 0E        		.byte	14
 3726 0749 0E        		.byte	14
 3727 074a 0E        		.byte	14
 3728 074b 0E        		.byte	14
 3729 074c 0E        		.byte	14
 3730 074d 0E        		.byte	14
 3731 074e 0E        		.byte	14
 3732 074f 0E        		.byte	14
 3733 0750 1E        		.byte	30
 3734 0751 1F        		.byte	31
 3735 0752 0F        		.byte	15
 3736 0753 FE        		.byte	-2
 3737 0754 FF        		.byte	-1
 3738 0755 0F        		.byte	15
 3739 0756 FC        		.byte	-4
 3740 0757 FB        		.byte	-5
 3741 0758 07        		.byte	7
 3742 0759 FC        		.byte	-4
 3743 075a FB        		.byte	-5
 3744 075b 03        		.byte	3
 3745 075c F0        		.byte	-16
 3746 075d E0        		.byte	-32
 3747 075e 01        		.byte	1
 3748 075f 00        		.byte	0
 3749 0760 00        		.byte	0
 3750 0761 00        		.byte	0
 3751 0762 0E        		.byte	14
 3752 0763 00        		.byte	0
 3753 0764 00        		.byte	0
 3754 0765 00        		.byte	0
 3755 0766 F0        		.byte	-16
 3756 0767 83        		.byte	-125
 3757 0768 01        		.byte	1
 3758 0769 F8        		.byte	-8
 3759 076a 87        		.byte	-121
 3760 076b 03        		.byte	3
 3761 076c FC        		.byte	-4
 3762 076d 8F        		.byte	-113
 3763 076e 07        		.byte	7
 3764 076f FE        		.byte	-2
 3765 0770 9F        		.byte	-97
 3766 0771 0F        		.byte	15
 3767 0772 1E        		.byte	30
 3768 0773 1E        		.byte	30
 3769 0774 0F        		.byte	15
 3770 0775 0E        		.byte	14
 3771 0776 1C        		.byte	28
 3772 0777 0E        		.byte	14
 3773 0778 0E        		.byte	14
 3774 0779 1C        		.byte	28
 3775 077a 0E        		.byte	14
 3776 077b 0E        		.byte	14
 3777 077c 1C        		.byte	28
 3778 077d 0E        		.byte	14
 3779 077e 1E        		.byte	30
 3780 077f 8E        		.byte	-114
 3781 0780 0F        		.byte	15
 3782 0781 FC        		.byte	-4
 3783 0782 FF        		.byte	-1
 3784 0783 07        		.byte	7
 3785 0784 FC        		.byte	-4
 3786 0785 FF        		.byte	-1
 3787 0786 03        		.byte	3
 3788 0787 F8        		.byte	-8
 3789 0788 FF        		.byte	-1
 3790 0789 01        		.byte	1
 3791 078a C0        		.byte	-64
 3792 078b 7F        		.byte	127
 3793 078c 00        		.byte	0
 3794 078d 00        		.byte	0
 3795 078e 00        		.byte	0
 3796 078f 00        		.byte	0
 3799               	Font5x7:
 3800 0790 00        		.byte	0
 3801 0791 00        		.byte	0
 3802 0792 00        		.byte	0
 3803 0793 00        		.byte	0
 3804 0794 00        		.byte	0
 3805 0795 00        		.byte	0
 3806 0796 00        		.byte	0
 3807 0797 5F        		.byte	95
 3808 0798 00        		.byte	0
 3809 0799 00        		.byte	0
 3810 079a 00        		.byte	0
 3811 079b 07        		.byte	7
 3812 079c 00        		.byte	0
 3813 079d 07        		.byte	7
 3814 079e 00        		.byte	0
 3815 079f 14        		.byte	20
 3816 07a0 7F        		.byte	127
 3817 07a1 14        		.byte	20
 3818 07a2 7F        		.byte	127
 3819 07a3 14        		.byte	20
 3820 07a4 24        		.byte	36
 3821 07a5 2A        		.byte	42
 3822 07a6 7F        		.byte	127
 3823 07a7 2A        		.byte	42
 3824 07a8 12        		.byte	18
 3825 07a9 23        		.byte	35
 3826 07aa 13        		.byte	19
 3827 07ab 08        		.byte	8
 3828 07ac 64        		.byte	100
 3829 07ad 62        		.byte	98
 3830 07ae 36        		.byte	54
 3831 07af 49        		.byte	73
 3832 07b0 55        		.byte	85
 3833 07b1 22        		.byte	34
 3834 07b2 50        		.byte	80
 3835 07b3 00        		.byte	0
 3836 07b4 05        		.byte	5
 3837 07b5 03        		.byte	3
 3838 07b6 00        		.byte	0
 3839 07b7 00        		.byte	0
 3840 07b8 00        		.byte	0
 3841 07b9 1C        		.byte	28
 3842 07ba 22        		.byte	34
 3843 07bb 41        		.byte	65
 3844 07bc 00        		.byte	0
 3845 07bd 00        		.byte	0
 3846 07be 41        		.byte	65
 3847 07bf 22        		.byte	34
 3848 07c0 1C        		.byte	28
 3849 07c1 00        		.byte	0
 3850 07c2 08        		.byte	8
 3851 07c3 2A        		.byte	42
 3852 07c4 1C        		.byte	28
 3853 07c5 2A        		.byte	42
 3854 07c6 08        		.byte	8
 3855 07c7 08        		.byte	8
 3856 07c8 08        		.byte	8
 3857 07c9 3E        		.byte	62
 3858 07ca 08        		.byte	8
 3859 07cb 08        		.byte	8
 3860 07cc 00        		.byte	0
 3861 07cd 50        		.byte	80
 3862 07ce 30        		.byte	48
 3863 07cf 00        		.byte	0
 3864 07d0 00        		.byte	0
 3865 07d1 08        		.byte	8
 3866 07d2 08        		.byte	8
 3867 07d3 08        		.byte	8
 3868 07d4 08        		.byte	8
 3869 07d5 08        		.byte	8
 3870 07d6 00        		.byte	0
 3871 07d7 60        		.byte	96
 3872 07d8 60        		.byte	96
 3873 07d9 00        		.byte	0
 3874 07da 00        		.byte	0
 3875 07db 20        		.byte	32
 3876 07dc 10        		.byte	16
 3877 07dd 08        		.byte	8
 3878 07de 04        		.byte	4
 3879 07df 02        		.byte	2
 3880 07e0 3E        		.byte	62
 3881 07e1 51        		.byte	81
 3882 07e2 49        		.byte	73
 3883 07e3 45        		.byte	69
 3884 07e4 3E        		.byte	62
 3885 07e5 00        		.byte	0
 3886 07e6 42        		.byte	66
 3887 07e7 7F        		.byte	127
 3888 07e8 40        		.byte	64
 3889 07e9 00        		.byte	0
 3890 07ea 42        		.byte	66
 3891 07eb 61        		.byte	97
 3892 07ec 51        		.byte	81
 3893 07ed 49        		.byte	73
 3894 07ee 46        		.byte	70
 3895 07ef 21        		.byte	33
 3896 07f0 41        		.byte	65
 3897 07f1 45        		.byte	69
 3898 07f2 4B        		.byte	75
 3899 07f3 31        		.byte	49
 3900 07f4 18        		.byte	24
 3901 07f5 14        		.byte	20
 3902 07f6 12        		.byte	18
 3903 07f7 7F        		.byte	127
 3904 07f8 10        		.byte	16
 3905 07f9 27        		.byte	39
 3906 07fa 45        		.byte	69
 3907 07fb 45        		.byte	69
 3908 07fc 45        		.byte	69
 3909 07fd 39        		.byte	57
 3910 07fe 3C        		.byte	60
 3911 07ff 4A        		.byte	74
 3912 0800 49        		.byte	73
 3913 0801 49        		.byte	73
 3914 0802 30        		.byte	48
 3915 0803 01        		.byte	1
 3916 0804 71        		.byte	113
 3917 0805 09        		.byte	9
 3918 0806 05        		.byte	5
 3919 0807 03        		.byte	3
 3920 0808 36        		.byte	54
 3921 0809 49        		.byte	73
 3922 080a 49        		.byte	73
 3923 080b 49        		.byte	73
 3924 080c 36        		.byte	54
 3925 080d 06        		.byte	6
 3926 080e 49        		.byte	73
 3927 080f 49        		.byte	73
 3928 0810 29        		.byte	41
 3929 0811 1E        		.byte	30
 3930 0812 00        		.byte	0
 3931 0813 36        		.byte	54
 3932 0814 36        		.byte	54
 3933 0815 00        		.byte	0
 3934 0816 00        		.byte	0
 3935 0817 00        		.byte	0
 3936 0818 56        		.byte	86
 3937 0819 36        		.byte	54
 3938 081a 00        		.byte	0
 3939 081b 00        		.byte	0
 3940 081c 00        		.byte	0
 3941 081d 08        		.byte	8
 3942 081e 14        		.byte	20
 3943 081f 22        		.byte	34
 3944 0820 41        		.byte	65
 3945 0821 14        		.byte	20
 3946 0822 14        		.byte	20
 3947 0823 14        		.byte	20
 3948 0824 14        		.byte	20
 3949 0825 14        		.byte	20
 3950 0826 41        		.byte	65
 3951 0827 22        		.byte	34
 3952 0828 14        		.byte	20
 3953 0829 08        		.byte	8
 3954 082a 00        		.byte	0
 3955 082b 02        		.byte	2
 3956 082c 01        		.byte	1
 3957 082d 51        		.byte	81
 3958 082e 09        		.byte	9
 3959 082f 06        		.byte	6
 3960 0830 32        		.byte	50
 3961 0831 49        		.byte	73
 3962 0832 79        		.byte	121
 3963 0833 41        		.byte	65
 3964 0834 3E        		.byte	62
 3965 0835 7E        		.byte	126
 3966 0836 11        		.byte	17
 3967 0837 11        		.byte	17
 3968 0838 11        		.byte	17
 3969 0839 7E        		.byte	126
 3970 083a 7F        		.byte	127
 3971 083b 49        		.byte	73
 3972 083c 49        		.byte	73
 3973 083d 49        		.byte	73
 3974 083e 36        		.byte	54
 3975 083f 3E        		.byte	62
 3976 0840 41        		.byte	65
 3977 0841 41        		.byte	65
 3978 0842 41        		.byte	65
 3979 0843 22        		.byte	34
 3980 0844 7F        		.byte	127
 3981 0845 41        		.byte	65
 3982 0846 41        		.byte	65
 3983 0847 22        		.byte	34
 3984 0848 1C        		.byte	28
 3985 0849 7F        		.byte	127
 3986 084a 49        		.byte	73
 3987 084b 49        		.byte	73
 3988 084c 49        		.byte	73
 3989 084d 41        		.byte	65
 3990 084e 7F        		.byte	127
 3991 084f 09        		.byte	9
 3992 0850 09        		.byte	9
 3993 0851 01        		.byte	1
 3994 0852 01        		.byte	1
 3995 0853 3E        		.byte	62
 3996 0854 41        		.byte	65
 3997 0855 41        		.byte	65
 3998 0856 51        		.byte	81
 3999 0857 32        		.byte	50
 4000 0858 7F        		.byte	127
 4001 0859 08        		.byte	8
 4002 085a 08        		.byte	8
 4003 085b 08        		.byte	8
 4004 085c 7F        		.byte	127
 4005 085d 00        		.byte	0
 4006 085e 41        		.byte	65
 4007 085f 7F        		.byte	127
 4008 0860 41        		.byte	65
 4009 0861 00        		.byte	0
 4010 0862 20        		.byte	32
 4011 0863 40        		.byte	64
 4012 0864 41        		.byte	65
 4013 0865 3F        		.byte	63
 4014 0866 01        		.byte	1
 4015 0867 7F        		.byte	127
 4016 0868 08        		.byte	8
 4017 0869 14        		.byte	20
 4018 086a 22        		.byte	34
 4019 086b 41        		.byte	65
 4020 086c 7F        		.byte	127
 4021 086d 40        		.byte	64
 4022 086e 40        		.byte	64
 4023 086f 40        		.byte	64
 4024 0870 40        		.byte	64
 4025 0871 7F        		.byte	127
 4026 0872 02        		.byte	2
 4027 0873 04        		.byte	4
 4028 0874 02        		.byte	2
 4029 0875 7F        		.byte	127
 4030 0876 7F        		.byte	127
 4031 0877 04        		.byte	4
 4032 0878 08        		.byte	8
 4033 0879 10        		.byte	16
 4034 087a 7F        		.byte	127
 4035 087b 3E        		.byte	62
 4036 087c 41        		.byte	65
 4037 087d 41        		.byte	65
 4038 087e 41        		.byte	65
 4039 087f 3E        		.byte	62
 4040 0880 7F        		.byte	127
 4041 0881 09        		.byte	9
 4042 0882 09        		.byte	9
 4043 0883 09        		.byte	9
 4044 0884 06        		.byte	6
 4045 0885 3E        		.byte	62
 4046 0886 41        		.byte	65
 4047 0887 51        		.byte	81
 4048 0888 21        		.byte	33
 4049 0889 5E        		.byte	94
 4050 088a 7F        		.byte	127
 4051 088b 09        		.byte	9
 4052 088c 19        		.byte	25
 4053 088d 29        		.byte	41
 4054 088e 46        		.byte	70
 4055 088f 46        		.byte	70
 4056 0890 49        		.byte	73
 4057 0891 49        		.byte	73
 4058 0892 49        		.byte	73
 4059 0893 31        		.byte	49
 4060 0894 01        		.byte	1
 4061 0895 01        		.byte	1
 4062 0896 7F        		.byte	127
 4063 0897 01        		.byte	1
 4064 0898 01        		.byte	1
 4065 0899 3F        		.byte	63
 4066 089a 40        		.byte	64
 4067 089b 40        		.byte	64
 4068 089c 40        		.byte	64
 4069 089d 3F        		.byte	63
 4070 089e 1F        		.byte	31
 4071 089f 20        		.byte	32
 4072 08a0 40        		.byte	64
 4073 08a1 20        		.byte	32
 4074 08a2 1F        		.byte	31
 4075 08a3 7F        		.byte	127
 4076 08a4 20        		.byte	32
 4077 08a5 18        		.byte	24
 4078 08a6 20        		.byte	32
 4079 08a7 7F        		.byte	127
 4080 08a8 63        		.byte	99
 4081 08a9 14        		.byte	20
 4082 08aa 08        		.byte	8
 4083 08ab 14        		.byte	20
 4084 08ac 63        		.byte	99
 4085 08ad 03        		.byte	3
 4086 08ae 04        		.byte	4
 4087 08af 78        		.byte	120
 4088 08b0 04        		.byte	4
 4089 08b1 03        		.byte	3
 4090 08b2 61        		.byte	97
 4091 08b3 51        		.byte	81
 4092 08b4 49        		.byte	73
 4093 08b5 45        		.byte	69
 4094 08b6 43        		.byte	67
 4095 08b7 00        		.byte	0
 4096 08b8 00        		.byte	0
 4097 08b9 7F        		.byte	127
 4098 08ba 41        		.byte	65
 4099 08bb 41        		.byte	65
 4100 08bc 02        		.byte	2
 4101 08bd 04        		.byte	4
 4102 08be 08        		.byte	8
 4103 08bf 10        		.byte	16
 4104 08c0 20        		.byte	32
 4105 08c1 41        		.byte	65
 4106 08c2 41        		.byte	65
 4107 08c3 7F        		.byte	127
 4108 08c4 00        		.byte	0
 4109 08c5 00        		.byte	0
 4110 08c6 04        		.byte	4
 4111 08c7 02        		.byte	2
 4112 08c8 01        		.byte	1
 4113 08c9 02        		.byte	2
 4114 08ca 04        		.byte	4
 4115 08cb 40        		.byte	64
 4116 08cc 40        		.byte	64
 4117 08cd 40        		.byte	64
 4118 08ce 40        		.byte	64
 4119 08cf 40        		.byte	64
 4120 08d0 00        		.byte	0
 4121 08d1 01        		.byte	1
 4122 08d2 02        		.byte	2
 4123 08d3 04        		.byte	4
 4124 08d4 00        		.byte	0
 4125 08d5 20        		.byte	32
 4126 08d6 54        		.byte	84
 4127 08d7 54        		.byte	84
 4128 08d8 54        		.byte	84
 4129 08d9 78        		.byte	120
 4130 08da 7F        		.byte	127
 4131 08db 48        		.byte	72
 4132 08dc 44        		.byte	68
 4133 08dd 44        		.byte	68
 4134 08de 38        		.byte	56
 4135 08df 38        		.byte	56
 4136 08e0 44        		.byte	68
 4137 08e1 44        		.byte	68
 4138 08e2 44        		.byte	68
 4139 08e3 20        		.byte	32
 4140 08e4 38        		.byte	56
 4141 08e5 44        		.byte	68
 4142 08e6 44        		.byte	68
 4143 08e7 48        		.byte	72
 4144 08e8 7F        		.byte	127
 4145 08e9 38        		.byte	56
 4146 08ea 54        		.byte	84
 4147 08eb 54        		.byte	84
 4148 08ec 54        		.byte	84
 4149 08ed 18        		.byte	24
 4150 08ee 08        		.byte	8
 4151 08ef 7E        		.byte	126
 4152 08f0 09        		.byte	9
 4153 08f1 01        		.byte	1
 4154 08f2 02        		.byte	2
 4155 08f3 08        		.byte	8
 4156 08f4 14        		.byte	20
 4157 08f5 54        		.byte	84
 4158 08f6 54        		.byte	84
 4159 08f7 3C        		.byte	60
 4160 08f8 7F        		.byte	127
 4161 08f9 08        		.byte	8
 4162 08fa 04        		.byte	4
 4163 08fb 04        		.byte	4
 4164 08fc 78        		.byte	120
 4165 08fd 00        		.byte	0
 4166 08fe 44        		.byte	68
 4167 08ff 7D        		.byte	125
 4168 0900 40        		.byte	64
 4169 0901 00        		.byte	0
 4170 0902 20        		.byte	32
 4171 0903 40        		.byte	64
 4172 0904 44        		.byte	68
 4173 0905 3D        		.byte	61
 4174 0906 00        		.byte	0
 4175 0907 00        		.byte	0
 4176 0908 7F        		.byte	127
 4177 0909 10        		.byte	16
 4178 090a 28        		.byte	40
 4179 090b 44        		.byte	68
 4180 090c 00        		.byte	0
 4181 090d 41        		.byte	65
 4182 090e 7F        		.byte	127
 4183 090f 40        		.byte	64
 4184 0910 00        		.byte	0
 4185 0911 7C        		.byte	124
 4186 0912 04        		.byte	4
 4187 0913 18        		.byte	24
 4188 0914 04        		.byte	4
 4189 0915 78        		.byte	120
 4190 0916 7C        		.byte	124
 4191 0917 08        		.byte	8
 4192 0918 04        		.byte	4
 4193 0919 04        		.byte	4
 4194 091a 78        		.byte	120
 4195 091b 38        		.byte	56
 4196 091c 44        		.byte	68
 4197 091d 44        		.byte	68
 4198 091e 44        		.byte	68
 4199 091f 38        		.byte	56
 4200 0920 7C        		.byte	124
 4201 0921 14        		.byte	20
 4202 0922 14        		.byte	20
 4203 0923 14        		.byte	20
 4204 0924 08        		.byte	8
 4205 0925 08        		.byte	8
 4206 0926 14        		.byte	20
 4207 0927 14        		.byte	20
 4208 0928 18        		.byte	24
 4209 0929 7C        		.byte	124
 4210 092a 7C        		.byte	124
 4211 092b 08        		.byte	8
 4212 092c 04        		.byte	4
 4213 092d 04        		.byte	4
 4214 092e 08        		.byte	8
 4215 092f 48        		.byte	72
 4216 0930 54        		.byte	84
 4217 0931 54        		.byte	84
 4218 0932 54        		.byte	84
 4219 0933 20        		.byte	32
 4220 0934 04        		.byte	4
 4221 0935 3F        		.byte	63
 4222 0936 44        		.byte	68
 4223 0937 40        		.byte	64
 4224 0938 20        		.byte	32
 4225 0939 3C        		.byte	60
 4226 093a 40        		.byte	64
 4227 093b 40        		.byte	64
 4228 093c 20        		.byte	32
 4229 093d 7C        		.byte	124
 4230 093e 1C        		.byte	28
 4231 093f 20        		.byte	32
 4232 0940 40        		.byte	64
 4233 0941 20        		.byte	32
 4234 0942 1C        		.byte	28
 4235 0943 3C        		.byte	60
 4236 0944 40        		.byte	64
 4237 0945 30        		.byte	48
 4238 0946 40        		.byte	64
 4239 0947 3C        		.byte	60
 4240 0948 44        		.byte	68
 4241 0949 28        		.byte	40
 4242 094a 10        		.byte	16
 4243 094b 28        		.byte	40
 4244 094c 44        		.byte	68
 4245 094d 0C        		.byte	12
 4246 094e 50        		.byte	80
 4247 094f 50        		.byte	80
 4248 0950 50        		.byte	80
 4249 0951 3C        		.byte	60
 4250 0952 44        		.byte	68
 4251 0953 64        		.byte	100
 4252 0954 54        		.byte	84
 4253 0955 4C        		.byte	76
 4254 0956 44        		.byte	68
 4255 0957 00        		.byte	0
 4256 0958 08        		.byte	8
 4257 0959 36        		.byte	54
 4258 095a 41        		.byte	65
 4259 095b 00        		.byte	0
 4260 095c 00        		.byte	0
 4261 095d 00        		.byte	0
 4262 095e 7F        		.byte	127
 4263 095f 00        		.byte	0
 4264 0960 00        		.byte	0
 4265 0961 00        		.byte	0
 4266 0962 41        		.byte	65
 4267 0963 36        		.byte	54
 4268 0964 08        		.byte	8
 4269 0965 00        		.byte	0
 4270 0966 08        		.byte	8
 4271 0967 08        		.byte	8
 4272 0968 2A        		.byte	42
 4273 0969 1C        		.byte	28
 4274 096a 08        		.byte	8
 4275 096b 08        		.byte	8
 4276 096c 1C        		.byte	28
 4277 096d 2A        		.byte	42
 4278 096e 08        		.byte	8
 4279 096f 08        		.byte	8
 4280               		.text
 4281               	.Letext0:
 4282               		.file 4 "/usr/avr/include/stdint.h"
 4283               		.file 5 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 4284               		.file 6 "/usr/avr/include/stdio.h"
 4285               		.file 7 "/usr/avr/include/stdlib.h"
 4286               		.file 8 "glcd/glcd.h"
 4287               		.file 9 "glcd/unit_tests.h"
 4288               		.file 10 "glcd/fonts/font5x7.h"
 4289               		.file 11 "glcd/fonts/Liberation_Sans15x21_Numbers.h"
 4290               		.file 12 "glcd/fonts/Earthbound_12x19_48to57.h"
 4291               		.file 13 "glcd/glcd_graphics.h"
 4292               		.file 14 "glcd/glcd_controllers.h"
 4293               		.file 15 "glcd/glcd_graphs.h"
 4294               		.file 16 "glcd/glcd_text_tiny.h"
 4295               		.file 17 "glcd/glcd_text.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 unit_tests.c
     /tmp/ccH7UWna.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccH7UWna.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccH7UWna.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccH7UWna.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccH7UWna.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccH7UWna.s:12     .text:0000000000000000 glcd_test_circles
     /tmp/ccH7UWna.s:3239   .bss:0000000000000000 unit_test_return
     /tmp/ccH7UWna.s:295    .text:00000000000000ca glcd_test_counter_and_graph
     /tmp/ccH7UWna.s:3244   .progmem.data:0000000000000568 Liberation_Sans15x21_Numbers
     /tmp/ccH7UWna.s:464    .text:0000000000000198 glcd_test_glcdutils
     /tmp/ccH7UWna.s:1846   .progmem.data:0000000000000000 font_Earthbound_12x19_48to57
     /tmp/ccH7UWna.s:635    .text:0000000000000256 glcd_test_text_up_down
     /tmp/ccH7UWna.s:867    .text:00000000000002f0 glcd_test_tiny_text
     /tmp/ccH7UWna.s:3799   .progmem.data:0000000000000790 Font5x7
     /tmp/ccH7UWna.s:1063   .text:0000000000000384 glcd_test_hello_world
     /tmp/ccH7UWna.s:1125   .text:00000000000003ba glcd_test_rectangles
     /tmp/ccH7UWna.s:1684   .text:000000000000054e glcd_test_scrolling_graph
     /tmp/ccH7UWna.s:1811   .text:00000000000005dc glcd_test_bitmap_128x64
     /tmp/ccH7UWna.s:2210   .progmem.data:0000000000000168 bmp_oslogo

UNDEFINED SYMBOLS
glcd_clear
rand
__divmodhi4
glcd_fill_circle
glcd_write
glcd_clear_buffer
glcd_set_font
sprintf
glcd_draw_string_xy
glcd_bar_graph_horizontal
glcd_bar_graph_vertical
glcd_font
font_current
glcd_tiny_set_font
glcd_tiny_draw_string_ammend
glcd_tiny_draw_string
glcd_draw_rect
glcd_draw_rect_thick
glcd_draw_rect_shadow
glcd_scrolling_bar_graph
glcd_draw_bitmap
__do_copy_data
__do_clear_bss
