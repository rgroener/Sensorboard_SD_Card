   1               		.file	"graphics.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	glcd_set_pixel
  12               	glcd_set_pixel:
  13               	.LVL0:
  14               	.LFB12:
  15               		.file 1 "glcd/graphics.c"
   1:glcd/graphics.c **** /**
   2:glcd/graphics.c ****    \file graphics.c
   3:glcd/graphics.c ****    \brief Functions relating to graphics. e.g drawing lines, rectangles, circles etc.
   4:glcd/graphics.c ****    \author Andy Gock
   5:glcd/graphics.c **** 
   6:glcd/graphics.c ****    Some functions based on Limor Fried's PCD8544 Arduino library.
   7:glcd/graphics.c **** 
   8:glcd/graphics.c ****  */ 
   9:glcd/graphics.c **** 
  10:glcd/graphics.c **** /*
  11:glcd/graphics.c **** 	Copyright (c) 2012, Andy Gock
  12:glcd/graphics.c **** 
  13:glcd/graphics.c **** 	Copyright (c) 2012, Adafruit Industries
  14:glcd/graphics.c **** 
  15:glcd/graphics.c **** 	All rights reserved.
  16:glcd/graphics.c **** 
  17:glcd/graphics.c **** 	Redistribution and use in source and binary forms, with or without
  18:glcd/graphics.c **** 	modification, are permitted provided that the following conditions are met:
  19:glcd/graphics.c **** 		* Redistributions of source code must retain the above copyright
  20:glcd/graphics.c **** 		  notice, this list of conditions and the following disclaimer.
  21:glcd/graphics.c **** 		* Redistributions in binary form must reproduce the above copyright
  22:glcd/graphics.c **** 		  notice, this list of conditions and the following disclaimer in the
  23:glcd/graphics.c **** 		  documentation and/or other materials provided with the distribution.
  24:glcd/graphics.c **** 		* Neither the name of Andy Gock nor the
  25:glcd/graphics.c **** 		  names of its contributors may be used to endorse or promote products
  26:glcd/graphics.c **** 		  derived from this software without specific prior written permission.
  27:glcd/graphics.c **** 
  28:glcd/graphics.c **** 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  29:glcd/graphics.c **** 	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30:glcd/graphics.c **** 	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:glcd/graphics.c **** 	DISCLAIMED. IN NO EVENT SHALL ANDY GOCK BE LIABLE FOR ANY
  32:glcd/graphics.c **** 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  33:glcd/graphics.c **** 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:glcd/graphics.c **** 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  35:glcd/graphics.c **** 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  36:glcd/graphics.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  37:glcd/graphics.c **** 	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:glcd/graphics.c **** */
  39:glcd/graphics.c **** 
  40:glcd/graphics.c **** #include <stdio.h>
  41:glcd/graphics.c **** #include <stdlib.h>
  42:glcd/graphics.c **** #include <string.h>
  43:glcd/graphics.c **** #include "glcd.h"
  44:glcd/graphics.c **** 
  45:glcd/graphics.c **** /* Based on PCD8544 library by Limor Fried */
  46:glcd/graphics.c **** void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
  16               		.loc 1 46 58 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  47:glcd/graphics.c **** 	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
  22               		.loc 1 47 2 view .LVU1
  23               		.loc 1 47 5 is_stmt 0 view .LVU2
  24 0000 8435      		cpi r24,lo8(84)
  25 0002 00F4      		brsh .L1
  26               		.loc 1 47 29 discriminator 1 view .LVU3
  27 0004 6033      		cpi r22,lo8(48)
  28 0006 00F4      		brsh .L1
  29               	.LVL1:
  30               	.LBB4:
  31               	.LBI4:
  46:glcd/graphics.c **** 	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
  32               		.loc 1 46 6 is_stmt 1 view .LVU4
  33               	.LBB5:
  48:glcd/graphics.c **** 		/* don't do anything if x/y is outside bounds of display size */
  49:glcd/graphics.c **** 		return;
  50:glcd/graphics.c **** 	}
  51:glcd/graphics.c **** 
  52:glcd/graphics.c **** 	if (color) {
  34               		.loc 1 52 2 view .LVU5
  35 0008 E82F      		mov r30,r24
  36 000a F0E0      		ldi r31,0
  37 000c 962F      		mov r25,r22
  38 000e 9695      		lsr r25
  39 0010 9695      		lsr r25
  40 0012 9695      		lsr r25
  41 0014 24E5      		ldi r18,lo8(84)
  42 0016 929F      		mul r25,r18
  43 0018 E00D      		add r30,r0
  44 001a F11D      		adc r31,r1
  45 001c 1124      		clr __zero_reg__
  46 001e E050      		subi r30,lo8(-(glcd_buffer))
  47 0020 F040      		sbci r31,hi8(-(glcd_buffer))
  48 0022 9081      		ld r25,Z
  49 0024 562F      		mov r21,r22
  50 0026 5770      		andi r21,lo8(7)
  51 0028 21E0      		ldi r18,lo8(1)
  52 002a 30E0      		ldi r19,0
  53 002c 00C0      		rjmp 2f
  54               		1:
  55 002e 220F      		lsl r18
  56               		2:
  57 0030 5A95      		dec r21
  58 0032 02F4      		brpl 1b
  59               		.loc 1 52 5 is_stmt 0 view .LVU6
  60 0034 4423      		tst r20
  61 0036 01F0      		breq .L3
  53:glcd/graphics.c **** 		/* Set black */
  54:glcd/graphics.c **** 		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
  62               		.loc 1 54 3 is_stmt 1 view .LVU7
  63               		.loc 1 54 40 is_stmt 0 view .LVU8
  64 0038 292B      		or r18,r25
  65               	.L5:
  55:glcd/graphics.c **** 	} else {
  56:glcd/graphics.c **** 		/* Set white */
  57:glcd/graphics.c **** 		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
  66               		.loc 1 57 40 view .LVU9
  67 003a 2083      		st Z,r18
  58:glcd/graphics.c **** 	}
  59:glcd/graphics.c **** 
  60:glcd/graphics.c **** 	glcd_update_bbox(x,y,x,y);
  68               		.loc 1 60 2 is_stmt 1 view .LVU10
  69 003c 262F      		mov r18,r22
  70 003e 482F      		mov r20,r24
  71               	.LVL2:
  72               		.loc 1 60 2 is_stmt 0 view .LVU11
  73 0040 0C94 0000 		jmp glcd_update_bbox
  74               	.LVL3:
  75               	.L3:
  57:glcd/graphics.c **** 	}
  76               		.loc 1 57 3 is_stmt 1 view .LVU12
  57:glcd/graphics.c **** 	}
  77               		.loc 1 57 40 is_stmt 0 view .LVU13
  78 0044 2095      		com r18
  79 0046 2923      		and r18,r25
  80 0048 00C0      		rjmp .L5
  81               	.LVL4:
  82               	.L1:
  83               	/* epilogue start */
  57:glcd/graphics.c **** 	}
  84               		.loc 1 57 40 view .LVU14
  85               	.LBE5:
  86               	.LBE4:
  61:glcd/graphics.c **** }
  87               		.loc 1 61 1 view .LVU15
  88 004a 0895      		ret
  89               		.cfi_endproc
  90               	.LFE12:
  92               	.global	glcd_get_pixel
  94               	glcd_get_pixel:
  95               	.LVL5:
  96               	.LFB13:
  62:glcd/graphics.c **** 
  63:glcd/graphics.c **** /* Based on PCD8544 library by Limor Fried */
  64:glcd/graphics.c **** uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
  97               		.loc 1 64 46 is_stmt 1 view -0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
  65:glcd/graphics.c **** 	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
 103               		.loc 1 65 2 view .LVU17
 104               		.loc 1 65 5 is_stmt 0 view .LVU18
 105 004c 8435      		cpi r24,lo8(84)
 106 004e 00F4      		brsh .L9
 107               		.loc 1 65 28 discriminator 1 view .LVU19
 108 0050 6033      		cpi r22,lo8(48)
 109 0052 00F4      		brsh .L9
  66:glcd/graphics.c **** 		return 0;
  67:glcd/graphics.c **** 	}
  68:glcd/graphics.c **** 	
  69:glcd/graphics.c **** 	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
 110               		.loc 1 69 2 is_stmt 1 view .LVU20
 111               		.loc 1 69 24 is_stmt 0 view .LVU21
 112 0054 962F      		mov r25,r22
 113 0056 9695      		lsr r25
 114 0058 9695      		lsr r25
 115 005a 9695      		lsr r25
 116               		.loc 1 69 27 view .LVU22
 117 005c 44E5      		ldi r20,lo8(84)
 118 005e 949F      		mul r25,r20
 119 0060 9001      		movw r18,r0
 120 0062 1124      		clr __zero_reg__
 121               		.loc 1 69 18 view .LVU23
 122 0064 2050      		subi r18,lo8(-(glcd_buffer))
 123 0066 3040      		sbci r19,hi8(-(glcd_buffer))
 124 0068 280F      		add r18,r24
 125 006a 311D      		adc r19,__zero_reg__
 126 006c F901      		movw r30,r18
 127 006e 8081      		ld r24,Z
 128               	.LVL6:
 129               		.loc 1 69 18 view .LVU24
 130 0070 90E0      		ldi r25,0
 131               		.loc 1 69 55 view .LVU25
 132 0072 6770      		andi r22,lo8(7)
 133               	.LVL7:
 134               		.loc 1 69 7 view .LVU26
 135 0074 00C0      		rjmp 2f
 136               		1:
 137 0076 9595      		asr r25
 138 0078 8795      		ror r24
 139               		2:
 140 007a 6A95      		dec r22
 141 007c 02F4      		brpl 1b
 142               		.loc 1 69 5 view .LVU27
 143 007e 8170      		andi r24,lo8(1)
 144 0080 0895      		ret
 145               	.LVL8:
 146               	.L9:
  66:glcd/graphics.c **** 		return 0;
 147               		.loc 1 66 10 view .LVU28
 148 0082 80E0      		ldi r24,0
 149               	.LVL9:
 150               	/* epilogue start */
  70:glcd/graphics.c **** 		return 1;
  71:glcd/graphics.c **** 	} else {
  72:glcd/graphics.c **** 		return 0;
  73:glcd/graphics.c **** 	}
  74:glcd/graphics.c **** }
 151               		.loc 1 74 1 view .LVU29
 152 0084 0895      		ret
 153               		.cfi_endproc
 154               	.LFE13:
 156               	.global	glcd_invert_pixel
 158               	glcd_invert_pixel:
 159               	.LVL10:
 160               	.LFB14:
  75:glcd/graphics.c **** 
  76:glcd/graphics.c **** void glcd_invert_pixel(uint8_t x, uint8_t y) {
 161               		.loc 1 76 46 is_stmt 1 view -0
 162               		.cfi_startproc
 163               		.loc 1 76 46 is_stmt 0 view .LVU31
 164 0086 CF93      		push r28
 165               	.LCFI0:
 166               		.cfi_def_cfa_offset 3
 167               		.cfi_offset 28, -2
 168 0088 DF93      		push r29
 169               	.LCFI1:
 170               		.cfi_def_cfa_offset 4
 171               		.cfi_offset 29, -3
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 2 */
 175               	.L__stack_usage = 2
 176 008a C82F      		mov r28,r24
 177 008c D62F      		mov r29,r22
  77:glcd/graphics.c **** 	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
 178               		.loc 1 77 2 is_stmt 1 view .LVU32
 179               		.loc 1 77 5 is_stmt 0 view .LVU33
 180 008e 8435      		cpi r24,lo8(84)
 181 0090 00F4      		brsh .L10
 182               		.loc 1 77 28 discriminator 1 view .LVU34
 183 0092 6033      		cpi r22,lo8(48)
 184 0094 00F4      		brsh .L10
 185               	.LVL11:
 186               	.LBB8:
 187               	.LBI8:
  76:glcd/graphics.c **** 	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
 188               		.loc 1 76 6 is_stmt 1 view .LVU35
 189               	.LBB9:
  78:glcd/graphics.c **** 		return;
  79:glcd/graphics.c **** 	}
  80:glcd/graphics.c **** 	glcd_update_bbox(x,y,x,y);
 190               		.loc 1 80 2 view .LVU36
 191 0096 262F      		mov r18,r22
 192 0098 482F      		mov r20,r24
 193 009a 0E94 0000 		call glcd_update_bbox
 194               	.LVL12:
  81:glcd/graphics.c **** 	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
 195               		.loc 1 81 2 view .LVU37
 196               		.loc 1 81 39 is_stmt 0 view .LVU38
 197 009e 8D2F      		mov r24,r29
 198 00a0 8695      		lsr r24
 199 00a2 8695      		lsr r24
 200 00a4 8695      		lsr r24
 201 00a6 EC2F      		mov r30,r28
 202 00a8 F0E0      		ldi r31,0
 203 00aa 94E5      		ldi r25,lo8(84)
 204 00ac 899F      		mul r24,r25
 205 00ae E00D      		add r30,r0
 206 00b0 F11D      		adc r31,r1
 207 00b2 1124      		clr __zero_reg__
 208 00b4 E050      		subi r30,lo8(-(glcd_buffer))
 209 00b6 F040      		sbci r31,hi8(-(glcd_buffer))
 210               		.loc 1 81 51 view .LVU39
 211 00b8 D770      		andi r29,lo8(7)
 212               	.LVL13:
 213               		.loc 1 81 46 view .LVU40
 214 00ba 21E0      		ldi r18,lo8(1)
 215 00bc 30E0      		ldi r19,0
 216 00be 00C0      		rjmp 2f
 217               		1:
 218 00c0 220F      		lsl r18
 219               		2:
 220 00c2 DA95      		dec r29
 221 00c4 02F4      		brpl 1b
 222               		.loc 1 81 39 view .LVU41
 223 00c6 8081      		ld r24,Z
 224 00c8 8227      		eor r24,r18
 225 00ca 8083      		st Z,r24
 226               	.LVL14:
 227               	.L10:
 228               	/* epilogue start */
 229               		.loc 1 81 39 view .LVU42
 230               	.LBE9:
 231               	.LBE8:
  82:glcd/graphics.c **** }
 232               		.loc 1 82 1 view .LVU43
 233 00cc DF91      		pop r29
 234 00ce CF91      		pop r28
 235               	.LVL15:
 236               		.loc 1 82 1 view .LVU44
 237 00d0 0895      		ret
 238               		.cfi_endproc
 239               	.LFE14:
 241               	.global	glcd_draw_line
 243               	glcd_draw_line:
 244               	.LVL16:
 245               	.LFB15:
  83:glcd/graphics.c **** 
  84:glcd/graphics.c **** /* Bresenham's algorithm - based on PCD8544 library Limor Fried */
  85:glcd/graphics.c **** void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 246               		.loc 1 85 84 is_stmt 1 view -0
 247               		.cfi_startproc
 248               		.loc 1 85 84 is_stmt 0 view .LVU46
 249 00d2 8F92      		push r8
 250               	.LCFI2:
 251               		.cfi_def_cfa_offset 3
 252               		.cfi_offset 8, -2
 253 00d4 9F92      		push r9
 254               	.LCFI3:
 255               		.cfi_def_cfa_offset 4
 256               		.cfi_offset 9, -3
 257 00d6 AF92      		push r10
 258               	.LCFI4:
 259               		.cfi_def_cfa_offset 5
 260               		.cfi_offset 10, -4
 261 00d8 BF92      		push r11
 262               	.LCFI5:
 263               		.cfi_def_cfa_offset 6
 264               		.cfi_offset 11, -5
 265 00da CF92      		push r12
 266               	.LCFI6:
 267               		.cfi_def_cfa_offset 7
 268               		.cfi_offset 12, -6
 269 00dc DF92      		push r13
 270               	.LCFI7:
 271               		.cfi_def_cfa_offset 8
 272               		.cfi_offset 13, -7
 273 00de EF92      		push r14
 274               	.LCFI8:
 275               		.cfi_def_cfa_offset 9
 276               		.cfi_offset 14, -8
 277 00e0 FF92      		push r15
 278               	.LCFI9:
 279               		.cfi_def_cfa_offset 10
 280               		.cfi_offset 15, -9
 281 00e2 0F93      		push r16
 282               	.LCFI10:
 283               		.cfi_def_cfa_offset 11
 284               		.cfi_offset 16, -10
 285 00e4 1F93      		push r17
 286               	.LCFI11:
 287               		.cfi_def_cfa_offset 12
 288               		.cfi_offset 17, -11
 289 00e6 CF93      		push r28
 290               	.LCFI12:
 291               		.cfi_def_cfa_offset 13
 292               		.cfi_offset 28, -12
 293 00e8 DF93      		push r29
 294               	.LCFI13:
 295               		.cfi_def_cfa_offset 14
 296               		.cfi_offset 29, -13
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 12 */
 300               	.L__stack_usage = 12
 301 00ea C82F      		mov r28,r24
 302 00ec D62F      		mov r29,r22
 303 00ee 142F      		mov r17,r20
 304 00f0 F22E      		mov r15,r18
  86:glcd/graphics.c **** 	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 305               		.loc 1 86 2 is_stmt 1 view .LVU47
 306               		.loc 1 86 18 is_stmt 0 view .LVU48
 307 00f2 261B      		sub r18,r22
 308 00f4 330B      		sbc r19,r19
 309               	.LVL17:
 310               		.loc 1 86 18 view .LVU49
 311 00f6 6901      		movw r12,r18
 312 00f8 37FF      		sbrs r19,7
 313 00fa 00C0      		rjmp .L13
 314 00fc D194      		neg r13
 315 00fe C194      		neg r12
 316 0100 D108      		sbc r13,__zero_reg__
 317               	.L13:
 318               		.loc 1 86 33 view .LVU50
 319 0102 812F      		mov r24,r17
 320               	.LVL18:
 321               		.loc 1 86 33 view .LVU51
 322 0104 8C1B      		sub r24,r28
 323 0106 990B      		sbc r25,r25
 324 0108 5C01      		movw r10,r24
 325 010a 97FF      		sbrs r25,7
 326 010c 00C0      		rjmp .L14
 327 010e B194      		neg r11
 328 0110 A194      		neg r10
 329 0112 B108      		sbc r11,__zero_reg__
 330               	.L14:
 331               	.LVL19:
  87:glcd/graphics.c **** 	uint8_t dx, dy;
 332               		.loc 1 87 2 is_stmt 1 view .LVU52
  88:glcd/graphics.c **** 	int8_t err;
 333               		.loc 1 88 2 view .LVU53
  89:glcd/graphics.c **** 	int8_t ystep;
 334               		.loc 1 89 2 view .LVU54
  90:glcd/graphics.c **** 	
  91:glcd/graphics.c **** 	if (steep) {
 335               		.loc 1 91 2 view .LVU55
 336               		.loc 1 91 5 is_stmt 0 view .LVU56
 337 0114 AC14      		cp r10,r12
 338 0116 BD04      		cpc r11,r13
 339 0118 04F4      		brge .L15
 340 011a 812F      		mov r24,r17
 341               	.LBB10:
  92:glcd/graphics.c **** 		swap(x0, y0);
  93:glcd/graphics.c **** 		swap(x1, y1);
 342               		.loc 1 93 3 view .LVU57
 343 011c 1F2D      		mov r17,r15
 344 011e F82E      		mov r15,r24
 345               	.LVL20:
 346               		.loc 1 93 3 view .LVU58
 347               	.LBE10:
  91:glcd/graphics.c **** 		swap(x0, y0);
 348               		.loc 1 91 5 view .LVU59
 349 0120 8C2F      		mov r24,r28
 350               	.LBB11:
  92:glcd/graphics.c **** 		swap(x0, y0);
 351               		.loc 1 92 3 view .LVU60
 352 0122 CD2F      		mov r28,r29
 353               	.LVL21:
  92:glcd/graphics.c **** 		swap(x0, y0);
 354               		.loc 1 92 3 view .LVU61
 355 0124 D82F      		mov r29,r24
 356               	.LVL22:
 357               	.L15:
  92:glcd/graphics.c **** 		swap(x0, y0);
 358               		.loc 1 92 3 view .LVU62
 359               	.LBE11:
 360               		.loc 1 93 15 is_stmt 1 discriminator 1 view .LVU63
  94:glcd/graphics.c **** 	}
  95:glcd/graphics.c **** 	
  96:glcd/graphics.c **** 	if (x0 > x1) {
 361               		.loc 1 96 2 discriminator 1 view .LVU64
 362               		.loc 1 96 5 is_stmt 0 discriminator 1 view .LVU65
 363 0126 1C17      		cp r17,r28
 364 0128 00F4      		brsh .L16
 365               		.loc 1 96 5 view .LVU66
 366 012a 8D2F      		mov r24,r29
 367               	.LBB12:
  97:glcd/graphics.c **** 		swap(x0, x1);
  98:glcd/graphics.c **** 		swap(y0, y1);
 368               		.loc 1 98 3 view .LVU67
 369 012c DF2D      		mov r29,r15
 370               	.LVL23:
 371               		.loc 1 98 3 view .LVU68
 372 012e F82E      		mov r15,r24
 373               	.LVL24:
 374               		.loc 1 98 3 view .LVU69
 375               	.LBE12:
  96:glcd/graphics.c **** 		swap(x0, x1);
 376               		.loc 1 96 5 view .LVU70
 377 0130 8C2F      		mov r24,r28
 378               	.LVL25:
  96:glcd/graphics.c **** 		swap(x0, x1);
 379               		.loc 1 96 5 view .LVU71
 380 0132 C12F      		mov r28,r17
 381               	.LVL26:
  96:glcd/graphics.c **** 		swap(x0, x1);
 382               		.loc 1 96 5 view .LVU72
 383 0134 182F      		mov r17,r24
 384               	.LVL27:
 385               	.L16:
 386               		.loc 1 98 15 is_stmt 1 discriminator 1 view .LVU73
  99:glcd/graphics.c **** 	}
 100:glcd/graphics.c **** 	
 101:glcd/graphics.c **** 	glcd_update_bbox( x0, y0, x1, y1 );
 387               		.loc 1 101 2 discriminator 1 view .LVU74
 388 0136 2F2D      		mov r18,r15
 389 0138 412F      		mov r20,r17
 390 013a 6D2F      		mov r22,r29
 391 013c 8C2F      		mov r24,r28
 392 013e 0E94 0000 		call glcd_update_bbox
 393               	.LVL28:
 102:glcd/graphics.c **** 
 103:glcd/graphics.c **** 	dx = x1 - x0;
 394               		.loc 1 103 2 discriminator 1 view .LVU75
 395               		.loc 1 103 5 is_stmt 0 discriminator 1 view .LVU76
 396 0142 812E      		mov r8,r17
 397 0144 8C1A      		sub r8,r28
 398               	.LVL29:
 104:glcd/graphics.c **** 	dy = abs(y1 - y0);
 399               		.loc 1 104 2 is_stmt 1 discriminator 1 view .LVU77
 400               		.loc 1 104 7 is_stmt 0 discriminator 1 view .LVU78
 401 0146 2F2D      		mov r18,r15
 402 0148 2D1B      		sub r18,r29
 403 014a 330B      		sbc r19,r19
 404 014c C901      		movw r24,r18
 405 014e 37FF      		sbrs r19,7
 406 0150 00C0      		rjmp .L17
 407 0152 9195      		neg r25
 408 0154 8195      		neg r24
 409 0156 9109      		sbc r25,__zero_reg__
 410               	.L17:
 411               		.loc 1 104 5 discriminator 1 view .LVU79
 412 0158 E82E      		mov r14,r24
 413               	.LVL30:
 105:glcd/graphics.c **** 	
 106:glcd/graphics.c **** 	err = dx / 2;
 414               		.loc 1 106 2 is_stmt 1 discriminator 1 view .LVU80
 415               		.loc 1 106 6 is_stmt 0 discriminator 1 view .LVU81
 416 015a 982C      		mov r9,r8
 417 015c 9694      		lsr r9
 418               	.LVL31:
 107:glcd/graphics.c **** 	
 108:glcd/graphics.c **** 	if (y0 < y1) {
 419               		.loc 1 108 2 is_stmt 1 discriminator 1 view .LVU82
 420               		.loc 1 108 5 is_stmt 0 discriminator 1 view .LVU83
 421 015e DF15      		cp r29,r15
 422 0160 00F0      		brlo .L24
 109:glcd/graphics.c **** 		ystep = 1;
 110:glcd/graphics.c **** 	} else {
 111:glcd/graphics.c **** 		ystep = -1;
 423               		.loc 1 111 9 view .LVU84
 424 0162 FF24      		clr r15
 425 0164 FA94      		dec r15
 426               	.LVL32:
 427               	.L22:
 112:glcd/graphics.c **** 	}
 113:glcd/graphics.c **** 	
 114:glcd/graphics.c **** 	for (; x0<=x1; x0++) {
 428               		.loc 1 114 2 discriminator 1 view .LVU85
 429 0166 1C17      		cp r17,r28
 430 0168 00F4      		brsh .L23
 431               	/* epilogue start */
 115:glcd/graphics.c **** 		if (steep) {
 116:glcd/graphics.c **** 			glcd_set_pixel(y0, x0, color);
 117:glcd/graphics.c **** 		} else {
 118:glcd/graphics.c **** 			glcd_set_pixel(x0, y0, color);
 119:glcd/graphics.c **** 		}
 120:glcd/graphics.c **** 		err -= dy;
 121:glcd/graphics.c **** 		if (err < 0) {
 122:glcd/graphics.c **** 			y0 += ystep;
 123:glcd/graphics.c **** 			err += dx;
 124:glcd/graphics.c **** 		}
 125:glcd/graphics.c **** 	}
 126:glcd/graphics.c **** }
 432               		.loc 1 126 1 view .LVU86
 433 016a DF91      		pop r29
 434               	.LVL33:
 435               		.loc 1 126 1 view .LVU87
 436 016c CF91      		pop r28
 437               	.LVL34:
 438               		.loc 1 126 1 view .LVU88
 439 016e 1F91      		pop r17
 440               	.LVL35:
 441               		.loc 1 126 1 view .LVU89
 442 0170 0F91      		pop r16
 443               	.LVL36:
 444               		.loc 1 126 1 view .LVU90
 445 0172 FF90      		pop r15
 446               	.LVL37:
 447               		.loc 1 126 1 view .LVU91
 448 0174 EF90      		pop r14
 449 0176 DF90      		pop r13
 450 0178 CF90      		pop r12
 451               		.loc 1 126 1 view .LVU92
 452 017a BF90      		pop r11
 453 017c AF90      		pop r10
 454 017e 9F90      		pop r9
 455               	.LVL38:
 456               		.loc 1 126 1 view .LVU93
 457 0180 8F90      		pop r8
 458               	.LVL39:
 459               		.loc 1 126 1 view .LVU94
 460 0182 0895      		ret
 461               	.LVL40:
 462               	.L23:
 115:glcd/graphics.c **** 		if (steep) {
 463               		.loc 1 115 3 is_stmt 1 view .LVU95
 116:glcd/graphics.c **** 		} else {
 464               		.loc 1 116 4 is_stmt 0 view .LVU96
 465 0184 402F      		mov r20,r16
 466 0186 6C2F      		mov r22,r28
 467 0188 8D2F      		mov r24,r29
 115:glcd/graphics.c **** 		if (steep) {
 468               		.loc 1 115 6 view .LVU97
 469 018a AC14      		cp r10,r12
 470 018c BD04      		cpc r11,r13
 471 018e 04F0      		brlt .L25
 472               	.LVL41:
 118:glcd/graphics.c **** 		}
 473               		.loc 1 118 4 is_stmt 1 view .LVU98
 474 0190 6D2F      		mov r22,r29
 475               	.LVL42:
 118:glcd/graphics.c **** 		}
 476               		.loc 1 118 4 is_stmt 0 view .LVU99
 477 0192 8C2F      		mov r24,r28
 478               	.LVL43:
 479               	.L25:
 118:glcd/graphics.c **** 		}
 480               		.loc 1 118 4 view .LVU100
 481 0194 0E94 0000 		call glcd_set_pixel
 482               	.LVL44:
 120:glcd/graphics.c **** 		if (err < 0) {
 483               		.loc 1 120 3 is_stmt 1 view .LVU101
 120:glcd/graphics.c **** 		if (err < 0) {
 484               		.loc 1 120 7 is_stmt 0 view .LVU102
 485 0198 9E18      		sub r9,r14
 486               	.LVL45:
 121:glcd/graphics.c **** 			y0 += ystep;
 487               		.loc 1 121 3 is_stmt 1 view .LVU103
 121:glcd/graphics.c **** 			y0 += ystep;
 488               		.loc 1 121 6 is_stmt 0 view .LVU104
 489 019a 97FE      		sbrs r9,7
 490 019c 00C0      		rjmp .L21
 122:glcd/graphics.c **** 			err += dx;
 491               		.loc 1 122 4 is_stmt 1 view .LVU105
 122:glcd/graphics.c **** 			err += dx;
 492               		.loc 1 122 7 is_stmt 0 view .LVU106
 493 019e DF0D      		add r29,r15
 494               	.LVL46:
 123:glcd/graphics.c **** 		}
 495               		.loc 1 123 4 is_stmt 1 view .LVU107
 123:glcd/graphics.c **** 		}
 496               		.loc 1 123 8 is_stmt 0 view .LVU108
 497 01a0 980C      		add r9,r8
 498               	.LVL47:
 499               	.L21:
 114:glcd/graphics.c **** 		if (steep) {
 500               		.loc 1 114 19 view .LVU109
 501 01a2 CF5F      		subi r28,lo8(-(1))
 502               	.LVL48:
 114:glcd/graphics.c **** 		if (steep) {
 503               		.loc 1 114 19 view .LVU110
 504 01a4 00C0      		rjmp .L22
 505               	.LVL49:
 506               	.L24:
 109:glcd/graphics.c **** 	} else {
 507               		.loc 1 109 9 view .LVU111
 508 01a6 FF24      		clr r15
 509 01a8 F394      		inc r15
 510               	.LVL50:
 109:glcd/graphics.c **** 	} else {
 511               		.loc 1 109 9 view .LVU112
 512 01aa 00C0      		rjmp .L22
 513               		.cfi_endproc
 514               	.LFE15:
 516               	.global	glcd_fill_rect
 518               	glcd_fill_rect:
 519               	.LVL51:
 520               	.LFB16:
 127:glcd/graphics.c **** 
 128:glcd/graphics.c **** void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
 129:glcd/graphics.c **** {
 521               		.loc 1 129 1 is_stmt 1 view -0
 522               		.cfi_startproc
 523               		.loc 1 129 1 is_stmt 0 view .LVU114
 524 01ac 5F92      		push r5
 525               	.LCFI14:
 526               		.cfi_def_cfa_offset 3
 527               		.cfi_offset 5, -2
 528 01ae 6F92      		push r6
 529               	.LCFI15:
 530               		.cfi_def_cfa_offset 4
 531               		.cfi_offset 6, -3
 532 01b0 7F92      		push r7
 533               	.LCFI16:
 534               		.cfi_def_cfa_offset 5
 535               		.cfi_offset 7, -4
 536 01b2 8F92      		push r8
 537               	.LCFI17:
 538               		.cfi_def_cfa_offset 6
 539               		.cfi_offset 8, -5
 540 01b4 9F92      		push r9
 541               	.LCFI18:
 542               		.cfi_def_cfa_offset 7
 543               		.cfi_offset 9, -6
 544 01b6 AF92      		push r10
 545               	.LCFI19:
 546               		.cfi_def_cfa_offset 8
 547               		.cfi_offset 10, -7
 548 01b8 BF92      		push r11
 549               	.LCFI20:
 550               		.cfi_def_cfa_offset 9
 551               		.cfi_offset 11, -8
 552 01ba CF92      		push r12
 553               	.LCFI21:
 554               		.cfi_def_cfa_offset 10
 555               		.cfi_offset 12, -9
 556 01bc DF92      		push r13
 557               	.LCFI22:
 558               		.cfi_def_cfa_offset 11
 559               		.cfi_offset 13, -10
 560 01be EF92      		push r14
 561               	.LCFI23:
 562               		.cfi_def_cfa_offset 12
 563               		.cfi_offset 14, -11
 564 01c0 FF92      		push r15
 565               	.LCFI24:
 566               		.cfi_def_cfa_offset 13
 567               		.cfi_offset 15, -12
 568 01c2 0F93      		push r16
 569               	.LCFI25:
 570               		.cfi_def_cfa_offset 14
 571               		.cfi_offset 16, -13
 572 01c4 1F93      		push r17
 573               	.LCFI26:
 574               		.cfi_def_cfa_offset 15
 575               		.cfi_offset 17, -14
 576 01c6 CF93      		push r28
 577               	.LCFI27:
 578               		.cfi_def_cfa_offset 16
 579               		.cfi_offset 28, -15
 580 01c8 DF93      		push r29
 581               	.LCFI28:
 582               		.cfi_def_cfa_offset 17
 583               		.cfi_offset 29, -16
 584               	/* prologue: function */
 585               	/* frame size = 0 */
 586               	/* stack size = 15 */
 587               	.L__stack_usage = 15
 588 01ca 182F      		mov r17,r24
 589 01cc 562E      		mov r5,r22
 590 01ce C42F      		mov r28,r20
 591 01d0 D22F      		mov r29,r18
 130:glcd/graphics.c **** 	int16_t i;
 592               		.loc 1 130 2 is_stmt 1 view .LVU115
 131:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 593               		.loc 1 131 2 view .LVU116
 594               		.loc 1 131 8 is_stmt 0 view .LVU117
 595 01d2 E82E      		mov r14,r24
 596 01d4 F12C      		mov r15,__zero_reg__
 597               	.LVL52:
 598               		.loc 1 131 15 view .LVU118
 599 01d6 5701      		movw r10,r14
 600 01d8 A40E      		add r10,r20
 601 01da B11C      		adc r11,__zero_reg__
 602               	.LBB13:
 132:glcd/graphics.c **** 		int16_t j;
 133:glcd/graphics.c **** 		for (j=y; j<y+h; j++) {
 603               		.loc 1 133 9 view .LVU119
 604 01dc 662E      		mov r6,r22
 605 01de 712C      		mov r7,__zero_reg__
 606               		.loc 1 133 16 view .LVU120
 607 01e0 4301      		movw r8,r6
 608 01e2 820E      		add r8,r18
 609 01e4 911C      		adc r9,__zero_reg__
 610               	.LVL53:
 611               	.L27:
 612               		.loc 1 133 16 view .LVU121
 613               	.LBE13:
 131:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 614               		.loc 1 131 2 discriminator 1 view .LVU122
 615 01e6 EA14      		cp r14,r10
 616 01e8 FB04      		cpc r15,r11
 617 01ea 04F0      		brlt .L30
 134:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 135:glcd/graphics.c **** 		}
 136:glcd/graphics.c **** 	}
 137:glcd/graphics.c **** 	glcd_update_bbox(x, y, x+w-1, y+h-1);
 618               		.loc 1 137 2 is_stmt 1 view .LVU123
 619 01ec 2FEF      		ldi r18,lo8(-1)
 620 01ee 2D0F      		add r18,r29
 621 01f0 250D      		add r18,r5
 622 01f2 4FEF      		ldi r20,lo8(-1)
 623 01f4 4C0F      		add r20,r28
 624 01f6 410F      		add r20,r17
 625 01f8 652D      		mov r22,r5
 626 01fa 812F      		mov r24,r17
 627               	/* epilogue start */
 138:glcd/graphics.c **** }
 628               		.loc 1 138 1 is_stmt 0 view .LVU124
 629 01fc DF91      		pop r29
 630               	.LVL54:
 631               		.loc 1 138 1 view .LVU125
 632 01fe CF91      		pop r28
 633               	.LVL55:
 634               		.loc 1 138 1 view .LVU126
 635 0200 1F91      		pop r17
 636               	.LVL56:
 637               		.loc 1 138 1 view .LVU127
 638 0202 0F91      		pop r16
 639               	.LVL57:
 640               		.loc 1 138 1 view .LVU128
 641 0204 FF90      		pop r15
 642 0206 EF90      		pop r14
 643               	.LVL58:
 644               		.loc 1 138 1 view .LVU129
 645 0208 DF90      		pop r13
 646 020a CF90      		pop r12
 647 020c BF90      		pop r11
 648 020e AF90      		pop r10
 649 0210 9F90      		pop r9
 650 0212 8F90      		pop r8
 651 0214 7F90      		pop r7
 652 0216 6F90      		pop r6
 653 0218 5F90      		pop r5
 654               	.LVL59:
 137:glcd/graphics.c **** }
 655               		.loc 1 137 2 view .LVU130
 656 021a 0C94 0000 		jmp glcd_update_bbox
 657               	.LVL60:
 658               	.L30:
 659               	.LBB14:
 132:glcd/graphics.c **** 		for (j=y; j<y+h; j++) {
 660               		.loc 1 132 3 is_stmt 1 view .LVU131
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 661               		.loc 1 133 3 view .LVU132
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 662               		.loc 1 133 9 is_stmt 0 view .LVU133
 663 021e 6301      		movw r12,r6
 664               	.LVL61:
 665               	.L28:
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 666               		.loc 1 133 3 discriminator 1 view .LVU134
 667 0220 C814      		cp r12,r8
 668 0222 D904      		cpc r13,r9
 669 0224 04F0      		brlt .L29
 670               	.LBE14:
 131:glcd/graphics.c **** 		int16_t j;
 671               		.loc 1 131 20 discriminator 2 view .LVU135
 672 0226 8FEF      		ldi r24,-1
 673 0228 E81A      		sub r14,r24
 674 022a F80A      		sbc r15,r24
 675               	.LVL62:
 131:glcd/graphics.c **** 		int16_t j;
 676               		.loc 1 131 20 discriminator 2 view .LVU136
 677 022c 00C0      		rjmp .L27
 678               	.L29:
 679               	.LBB15:
 134:glcd/graphics.c **** 		}
 680               		.loc 1 134 4 is_stmt 1 discriminator 3 view .LVU137
 681 022e 402F      		mov r20,r16
 682 0230 6C2D      		mov r22,r12
 683 0232 8E2D      		mov r24,r14
 684 0234 0E94 0000 		call glcd_set_pixel
 685               	.LVL63:
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 686               		.loc 1 133 21 is_stmt 0 discriminator 3 view .LVU138
 687 0238 8FEF      		ldi r24,-1
 688 023a C81A      		sub r12,r24
 689 023c D80A      		sbc r13,r24
 690               	.LVL64:
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 691               		.loc 1 133 21 discriminator 3 view .LVU139
 692 023e 00C0      		rjmp .L28
 693               	.LBE15:
 694               		.cfi_endproc
 695               	.LFE16:
 697               	.global	glcd_draw_rect
 699               	glcd_draw_rect:
 700               	.LVL65:
 701               	.LFB17:
 139:glcd/graphics.c **** 
 140:glcd/graphics.c **** void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
 141:glcd/graphics.c **** {
 702               		.loc 1 141 1 is_stmt 1 view -0
 703               		.cfi_startproc
 704               		.loc 1 141 1 is_stmt 0 view .LVU141
 705 0240 8F92      		push r8
 706               	.LCFI29:
 707               		.cfi_def_cfa_offset 3
 708               		.cfi_offset 8, -2
 709 0242 9F92      		push r9
 710               	.LCFI30:
 711               		.cfi_def_cfa_offset 4
 712               		.cfi_offset 9, -3
 713 0244 AF92      		push r10
 714               	.LCFI31:
 715               		.cfi_def_cfa_offset 5
 716               		.cfi_offset 10, -4
 717 0246 BF92      		push r11
 718               	.LCFI32:
 719               		.cfi_def_cfa_offset 6
 720               		.cfi_offset 11, -5
 721 0248 DF92      		push r13
 722               	.LCFI33:
 723               		.cfi_def_cfa_offset 7
 724               		.cfi_offset 13, -6
 725 024a EF92      		push r14
 726               	.LCFI34:
 727               		.cfi_def_cfa_offset 8
 728               		.cfi_offset 14, -7
 729 024c FF92      		push r15
 730               	.LCFI35:
 731               		.cfi_def_cfa_offset 9
 732               		.cfi_offset 15, -8
 733 024e 0F93      		push r16
 734               	.LCFI36:
 735               		.cfi_def_cfa_offset 10
 736               		.cfi_offset 16, -9
 737 0250 1F93      		push r17
 738               	.LCFI37:
 739               		.cfi_def_cfa_offset 11
 740               		.cfi_offset 17, -10
 741 0252 CF93      		push r28
 742               	.LCFI38:
 743               		.cfi_def_cfa_offset 12
 744               		.cfi_offset 28, -11
 745 0254 DF93      		push r29
 746               	.LCFI39:
 747               		.cfi_def_cfa_offset 13
 748               		.cfi_offset 29, -12
 749               	/* prologue: function */
 750               	/* frame size = 0 */
 751               	/* stack size = 11 */
 752               	.L__stack_usage = 11
 753 0256 D82F      		mov r29,r24
 754 0258 162F      		mov r17,r22
 755 025a C42F      		mov r28,r20
 756 025c A22E      		mov r10,r18
 142:glcd/graphics.c **** 	int16_t i;
 757               		.loc 1 142 2 is_stmt 1 view .LVU142
 143:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 758               		.loc 1 143 2 view .LVU143
 759               		.loc 1 143 8 is_stmt 0 view .LVU144
 760 025e E82E      		mov r14,r24
 761 0260 F12C      		mov r15,__zero_reg__
 762               	.LVL66:
 763               		.loc 1 143 8 view .LVU145
 764 0262 DD24      		clr r13
 765 0264 DA94      		dec r13
 766 0266 D20E      		add r13,r18
 767 0268 D60E      		add r13,r22
 768               		.loc 1 143 15 view .LVU146
 769 026a 4701      		movw r8,r14
 770 026c 840E      		add r8,r20
 771 026e 911C      		adc r9,__zero_reg__
 772               	.LVL67:
 773               	.L32:
 774               		.loc 1 143 2 discriminator 1 view .LVU147
 775 0270 E814      		cp r14,r8
 776 0272 F904      		cpc r15,r9
 777 0274 04F0      		brlt .L33
 144:glcd/graphics.c **** 		glcd_set_pixel(i, y, color);
 145:glcd/graphics.c **** 		glcd_set_pixel(i, y+h-1, color);
 146:glcd/graphics.c **** 	}
 147:glcd/graphics.c **** 	for (i=y; i<y+h; i++) {
 778               		.loc 1 147 2 is_stmt 1 view .LVU148
 779               		.loc 1 147 8 is_stmt 0 view .LVU149
 780 0276 E12E      		mov r14,r17
 781               	.LVL68:
 782               		.loc 1 147 8 view .LVU150
 783 0278 F12C      		mov r15,__zero_reg__
 784               	.LVL69:
 785               		.loc 1 147 8 view .LVU151
 786 027a C150      		subi r28,lo8(-(-1))
 787               	.LVL70:
 788               		.loc 1 147 8 view .LVU152
 789 027c CD0F      		add r28,r29
 790               	.LVL71:
 791               		.loc 1 147 15 view .LVU153
 792 027e AE0C      		add r10,r14
 793 0280 BF2C      		mov r11,r15
 794 0282 B11C      		adc r11,__zero_reg__
 795               	.LVL72:
 796               	.L34:
 797               		.loc 1 147 2 discriminator 1 view .LVU154
 798 0284 EA14      		cp r14,r10
 799 0286 FB04      		cpc r15,r11
 800 0288 04F0      		brlt .L35
 148:glcd/graphics.c **** 		glcd_set_pixel(x, i, color);
 149:glcd/graphics.c **** 		glcd_set_pixel(x+w-1, i, color);
 150:glcd/graphics.c **** 	} 
 151:glcd/graphics.c **** 	glcd_update_bbox(x, y, x+w-1, y+h-1);
 801               		.loc 1 151 2 is_stmt 1 view .LVU155
 802 028a 2D2D      		mov r18,r13
 803 028c 4C2F      		mov r20,r28
 804 028e 612F      		mov r22,r17
 805 0290 8D2F      		mov r24,r29
 806               	/* epilogue start */
 152:glcd/graphics.c **** }
 807               		.loc 1 152 1 is_stmt 0 view .LVU156
 808 0292 DF91      		pop r29
 809               	.LVL73:
 810               		.loc 1 152 1 view .LVU157
 811 0294 CF91      		pop r28
 812 0296 1F91      		pop r17
 813               	.LVL74:
 814               		.loc 1 152 1 view .LVU158
 815 0298 0F91      		pop r16
 816               	.LVL75:
 817               		.loc 1 152 1 view .LVU159
 818 029a FF90      		pop r15
 819 029c EF90      		pop r14
 820               	.LVL76:
 821               		.loc 1 152 1 view .LVU160
 822 029e DF90      		pop r13
 823 02a0 BF90      		pop r11
 824 02a2 AF90      		pop r10
 825 02a4 9F90      		pop r9
 826 02a6 8F90      		pop r8
 151:glcd/graphics.c **** }
 827               		.loc 1 151 2 view .LVU161
 828 02a8 0C94 0000 		jmp glcd_update_bbox
 829               	.LVL77:
 830               	.L33:
 144:glcd/graphics.c **** 		glcd_set_pixel(i, y+h-1, color);
 831               		.loc 1 144 3 is_stmt 1 discriminator 3 view .LVU162
 832 02ac 402F      		mov r20,r16
 833 02ae 612F      		mov r22,r17
 834 02b0 8E2D      		mov r24,r14
 835 02b2 0E94 0000 		call glcd_set_pixel
 836               	.LVL78:
 145:glcd/graphics.c **** 	}
 837               		.loc 1 145 3 discriminator 3 view .LVU163
 838 02b6 402F      		mov r20,r16
 839 02b8 6D2D      		mov r22,r13
 840 02ba 8E2D      		mov r24,r14
 841 02bc 0E94 0000 		call glcd_set_pixel
 842               	.LVL79:
 143:glcd/graphics.c **** 		glcd_set_pixel(i, y, color);
 843               		.loc 1 143 20 is_stmt 0 discriminator 3 view .LVU164
 844 02c0 8FEF      		ldi r24,-1
 845 02c2 E81A      		sub r14,r24
 846 02c4 F80A      		sbc r15,r24
 847               	.LVL80:
 143:glcd/graphics.c **** 		glcd_set_pixel(i, y, color);
 848               		.loc 1 143 20 discriminator 3 view .LVU165
 849 02c6 00C0      		rjmp .L32
 850               	.LVL81:
 851               	.L35:
 148:glcd/graphics.c **** 		glcd_set_pixel(x+w-1, i, color);
 852               		.loc 1 148 3 is_stmt 1 discriminator 3 view .LVU166
 853 02c8 402F      		mov r20,r16
 854 02ca 6E2D      		mov r22,r14
 855 02cc 8D2F      		mov r24,r29
 856 02ce 0E94 0000 		call glcd_set_pixel
 857               	.LVL82:
 149:glcd/graphics.c **** 	} 
 858               		.loc 1 149 3 discriminator 3 view .LVU167
 859 02d2 402F      		mov r20,r16
 860 02d4 6E2D      		mov r22,r14
 861 02d6 8C2F      		mov r24,r28
 862 02d8 0E94 0000 		call glcd_set_pixel
 863               	.LVL83:
 147:glcd/graphics.c **** 		glcd_set_pixel(x, i, color);
 864               		.loc 1 147 20 is_stmt 0 discriminator 3 view .LVU168
 865 02dc 8FEF      		ldi r24,-1
 866 02de E81A      		sub r14,r24
 867 02e0 F80A      		sbc r15,r24
 868               	.LVL84:
 147:glcd/graphics.c **** 		glcd_set_pixel(x, i, color);
 869               		.loc 1 147 20 discriminator 3 view .LVU169
 870 02e2 00C0      		rjmp .L34
 871               		.cfi_endproc
 872               	.LFE17:
 874               	.global	glcd_draw_rect_thick
 876               	glcd_draw_rect_thick:
 877               	.LVL85:
 878               	.LFB18:
 153:glcd/graphics.c **** 
 154:glcd/graphics.c **** void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8
 155:glcd/graphics.c **** {
 879               		.loc 1 155 1 is_stmt 1 view -0
 880               		.cfi_startproc
 881               		.loc 1 155 1 is_stmt 0 view .LVU171
 882 02e4 6F92      		push r6
 883               	.LCFI40:
 884               		.cfi_def_cfa_offset 3
 885               		.cfi_offset 6, -2
 886 02e6 7F92      		push r7
 887               	.LCFI41:
 888               		.cfi_def_cfa_offset 4
 889               		.cfi_offset 7, -3
 890 02e8 8F92      		push r8
 891               	.LCFI42:
 892               		.cfi_def_cfa_offset 5
 893               		.cfi_offset 8, -4
 894 02ea 9F92      		push r9
 895               	.LCFI43:
 896               		.cfi_def_cfa_offset 6
 897               		.cfi_offset 9, -5
 898 02ec AF92      		push r10
 899               	.LCFI44:
 900               		.cfi_def_cfa_offset 7
 901               		.cfi_offset 10, -6
 902 02ee BF92      		push r11
 903               	.LCFI45:
 904               		.cfi_def_cfa_offset 8
 905               		.cfi_offset 11, -7
 906 02f0 CF92      		push r12
 907               	.LCFI46:
 908               		.cfi_def_cfa_offset 9
 909               		.cfi_offset 12, -8
 910 02f2 DF92      		push r13
 911               	.LCFI47:
 912               		.cfi_def_cfa_offset 10
 913               		.cfi_offset 13, -9
 914 02f4 EF92      		push r14
 915               	.LCFI48:
 916               		.cfi_def_cfa_offset 11
 917               		.cfi_offset 14, -10
 918 02f6 FF92      		push r15
 919               	.LCFI49:
 920               		.cfi_def_cfa_offset 12
 921               		.cfi_offset 15, -11
 922 02f8 0F93      		push r16
 923               	.LCFI50:
 924               		.cfi_def_cfa_offset 13
 925               		.cfi_offset 16, -12
 926 02fa 1F93      		push r17
 927               	.LCFI51:
 928               		.cfi_def_cfa_offset 14
 929               		.cfi_offset 17, -13
 930 02fc CF93      		push r28
 931               	.LCFI52:
 932               		.cfi_def_cfa_offset 15
 933               		.cfi_offset 28, -14
 934 02fe DF93      		push r29
 935               	.LCFI53:
 936               		.cfi_def_cfa_offset 16
 937               		.cfi_offset 29, -15
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 14 */
 941               	.L__stack_usage = 14
 942 0300 182F      		mov r17,r24
 943 0302 F62E      		mov r15,r22
 944 0304 C42F      		mov r28,r20
 945 0306 D22F      		mov r29,r18
 156:glcd/graphics.c **** 	int16_t i, t;
 946               		.loc 1 156 2 is_stmt 1 view .LVU172
 157:glcd/graphics.c **** 	
 158:glcd/graphics.c **** 	if (tx == 0) {
 947               		.loc 1 158 2 view .LVU173
 948               		.loc 1 158 5 is_stmt 0 view .LVU174
 949 0308 0111      		cpse r16,__zero_reg__
 950 030a 00C0      		rjmp .L37
 159:glcd/graphics.c **** 		tx = 1;
 951               		.loc 1 159 6 view .LVU175
 952 030c 01E0      		ldi r16,lo8(1)
 953               	.LVL86:
 954               	.L37:
 160:glcd/graphics.c **** 	}
 161:glcd/graphics.c **** 
 162:glcd/graphics.c **** 	if (ty == 0) {
 955               		.loc 1 162 2 is_stmt 1 view .LVU176
 956               		.loc 1 162 5 is_stmt 0 view .LVU177
 957 030e E110      		cpse r14,__zero_reg__
 958 0310 00C0      		rjmp .L38
 163:glcd/graphics.c **** 		ty = 1;
 959               		.loc 1 163 6 view .LVU178
 960 0312 EE24      		clr r14
 961 0314 E394      		inc r14
 962               	.LVL87:
 963               	.L38:
 164:glcd/graphics.c **** 	}
 165:glcd/graphics.c **** 	
 166:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 964               		.loc 1 166 2 is_stmt 1 view .LVU179
 965               		.loc 1 166 8 is_stmt 0 view .LVU180
 966 0316 A12E      		mov r10,r17
 967 0318 B12C      		mov r11,__zero_reg__
 968               	.LVL88:
 969               		.loc 1 166 15 view .LVU181
 970 031a 4501      		movw r8,r10
 971 031c 8C0E      		add r8,r28
 972 031e 911C      		adc r9,__zero_reg__
 973 0320 6624      		clr r6
 974 0322 6A94      		dec r6
 975 0324 6D0E      		add r6,r29
 976 0326 EF0C      		add r14,r15
 977               	.LVL89:
 978               	.L39:
 979               		.loc 1 166 2 discriminator 1 view .LVU182
 980 0328 A814      		cp r10,r8
 981 032a B904      		cpc r11,r9
 982 032c 04F0      		brlt .L41
 167:glcd/graphics.c **** 		/* Top and bottom sides */
 168:glcd/graphics.c **** 		for (t=0; t<(ty); t++) {
 169:glcd/graphics.c **** 			glcd_set_pixel(i, y+t, color);
 170:glcd/graphics.c **** 			glcd_set_pixel(i, y+h-1-t, color);
 171:glcd/graphics.c **** 		}
 172:glcd/graphics.c **** 	}
 173:glcd/graphics.c **** 	for (i=y; i<y+h; i++) {
 983               		.loc 1 173 2 is_stmt 1 view .LVU183
 984               		.loc 1 173 8 is_stmt 0 view .LVU184
 985 032e AF2C      		mov r10,r15
 986               	.LVL90:
 987               		.loc 1 173 8 view .LVU185
 988 0330 B12C      		mov r11,__zero_reg__
 989               	.LVL91:
 990               		.loc 1 173 15 view .LVU186
 991 0332 4501      		movw r8,r10
 992 0334 8D0E      		add r8,r29
 993 0336 911C      		adc r9,__zero_reg__
 994 0338 C150      		subi r28,lo8(-(-1))
 995               	.LVL92:
 996               		.loc 1 173 15 view .LVU187
 997 033a 010F      		add r16,r17
 998               	.LVL93:
 999               	.L42:
 1000               		.loc 1 173 2 discriminator 1 view .LVU188
 1001 033c A814      		cp r10,r8
 1002 033e B904      		cpc r11,r9
 1003 0340 04F0      		brlt .L44
 174:glcd/graphics.c **** 		/* Left and right sides */
 175:glcd/graphics.c **** 		for (t=0; t<(tx); t++) {
 176:glcd/graphics.c **** 			glcd_set_pixel(x+t, i, color);
 177:glcd/graphics.c **** 			glcd_set_pixel(x+w-1-t, i, color);
 178:glcd/graphics.c **** 		}
 179:glcd/graphics.c **** 	} 
 180:glcd/graphics.c **** 	glcd_update_bbox(x, y, x+w-1, y+h-1);
 1004               		.loc 1 180 2 is_stmt 1 view .LVU189
 1005 0342 2FEF      		ldi r18,lo8(-1)
 1006 0344 2D0F      		add r18,r29
 1007 0346 2F0D      		add r18,r15
 1008 0348 4C2F      		mov r20,r28
 1009 034a 410F      		add r20,r17
 1010 034c 6F2D      		mov r22,r15
 1011 034e 812F      		mov r24,r17
 1012               	/* epilogue start */
 181:glcd/graphics.c **** }
 1013               		.loc 1 181 1 is_stmt 0 view .LVU190
 1014 0350 DF91      		pop r29
 1015               	.LVL94:
 1016               		.loc 1 181 1 view .LVU191
 1017 0352 CF91      		pop r28
 1018               	.LVL95:
 1019               		.loc 1 181 1 view .LVU192
 1020 0354 1F91      		pop r17
 1021               	.LVL96:
 1022               		.loc 1 181 1 view .LVU193
 1023 0356 0F91      		pop r16
 1024 0358 FF90      		pop r15
 1025               	.LVL97:
 1026               		.loc 1 181 1 view .LVU194
 1027 035a EF90      		pop r14
 1028 035c DF90      		pop r13
 1029 035e CF90      		pop r12
 1030               	.LVL98:
 1031               		.loc 1 181 1 view .LVU195
 1032 0360 BF90      		pop r11
 1033 0362 AF90      		pop r10
 1034               	.LVL99:
 1035               		.loc 1 181 1 view .LVU196
 1036 0364 9F90      		pop r9
 1037 0366 8F90      		pop r8
 1038 0368 7F90      		pop r7
 1039 036a 6F90      		pop r6
 180:glcd/graphics.c **** }
 1040               		.loc 1 180 2 view .LVU197
 1041 036c 0C94 0000 		jmp glcd_update_bbox
 1042               	.LVL100:
 1043               	.L41:
 180:glcd/graphics.c **** }
 1044               		.loc 1 180 2 view .LVU198
 1045 0370 762C      		mov r7,r6
 1046 0372 7F0C      		add r7,r15
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1047               		.loc 1 166 2 view .LVU199
 1048 0374 DF2C      		mov r13,r15
 1049               	.L40:
 169:glcd/graphics.c **** 			glcd_set_pixel(i, y+h-1-t, color);
 1050               		.loc 1 169 4 is_stmt 1 discriminator 3 view .LVU200
 1051 0376 4C2D      		mov r20,r12
 1052 0378 6D2D      		mov r22,r13
 1053 037a 8A2D      		mov r24,r10
 1054 037c 0E94 0000 		call glcd_set_pixel
 1055               	.LVL101:
 170:glcd/graphics.c **** 		}
 1056               		.loc 1 170 4 discriminator 3 view .LVU201
 1057 0380 4C2D      		mov r20,r12
 1058 0382 672D      		mov r22,r7
 1059 0384 8A2D      		mov r24,r10
 1060 0386 0E94 0000 		call glcd_set_pixel
 1061               	.LVL102:
 170:glcd/graphics.c **** 		}
 1062               		.loc 1 170 4 is_stmt 0 discriminator 3 view .LVU202
 1063 038a D394      		inc r13
 1064 038c 7A94      		dec r7
 168:glcd/graphics.c **** 			glcd_set_pixel(i, y+t, color);
 1065               		.loc 1 168 3 discriminator 3 view .LVU203
 1066 038e DE10      		cpse r13,r14
 1067 0390 00C0      		rjmp .L40
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1068               		.loc 1 166 20 discriminator 2 view .LVU204
 1069 0392 8FEF      		ldi r24,-1
 1070 0394 A81A      		sub r10,r24
 1071 0396 B80A      		sbc r11,r24
 1072               	.LVL103:
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1073               		.loc 1 166 20 discriminator 2 view .LVU205
 1074 0398 00C0      		rjmp .L39
 1075               	.LVL104:
 1076               	.L44:
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1077               		.loc 1 166 20 discriminator 2 view .LVU206
 1078 039a DC2E      		mov r13,r28
 1079 039c D10E      		add r13,r17
 173:glcd/graphics.c **** 		/* Left and right sides */
 1080               		.loc 1 173 2 view .LVU207
 1081 039e E12E      		mov r14,r17
 1082               	.L43:
 176:glcd/graphics.c **** 			glcd_set_pixel(x+w-1-t, i, color);
 1083               		.loc 1 176 4 is_stmt 1 discriminator 3 view .LVU208
 1084 03a0 4C2D      		mov r20,r12
 1085 03a2 6A2D      		mov r22,r10
 1086 03a4 8E2D      		mov r24,r14
 1087 03a6 0E94 0000 		call glcd_set_pixel
 1088               	.LVL105:
 177:glcd/graphics.c **** 		}
 1089               		.loc 1 177 4 discriminator 3 view .LVU209
 1090 03aa 4C2D      		mov r20,r12
 1091 03ac 6A2D      		mov r22,r10
 1092 03ae 8D2D      		mov r24,r13
 1093 03b0 0E94 0000 		call glcd_set_pixel
 1094               	.LVL106:
 177:glcd/graphics.c **** 		}
 1095               		.loc 1 177 4 is_stmt 0 discriminator 3 view .LVU210
 1096 03b4 E394      		inc r14
 1097 03b6 DA94      		dec r13
 175:glcd/graphics.c **** 			glcd_set_pixel(x+t, i, color);
 1098               		.loc 1 175 3 discriminator 3 view .LVU211
 1099 03b8 0E11      		cpse r16,r14
 1100 03ba 00C0      		rjmp .L43
 173:glcd/graphics.c **** 		/* Left and right sides */
 1101               		.loc 1 173 20 discriminator 2 view .LVU212
 1102 03bc 8FEF      		ldi r24,-1
 1103 03be A81A      		sub r10,r24
 1104 03c0 B80A      		sbc r11,r24
 1105               	.LVL107:
 173:glcd/graphics.c **** 		/* Left and right sides */
 1106               		.loc 1 173 20 discriminator 2 view .LVU213
 1107 03c2 00C0      		rjmp .L42
 1108               		.cfi_endproc
 1109               	.LFE18:
 1111               	.global	glcd_draw_rect_shadow
 1113               	glcd_draw_rect_shadow:
 1114               	.LVL108:
 1115               	.LFB19:
 182:glcd/graphics.c **** 
 183:glcd/graphics.c **** void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
 184:glcd/graphics.c **** {
 1116               		.loc 1 184 1 is_stmt 1 view -0
 1117               		.cfi_startproc
 1118               		.loc 1 184 1 is_stmt 0 view .LVU215
 1119 03c4 EF92      		push r14
 1120               	.LCFI54:
 1121               		.cfi_def_cfa_offset 3
 1122               		.cfi_offset 14, -2
 1123 03c6 FF92      		push r15
 1124               	.LCFI55:
 1125               		.cfi_def_cfa_offset 4
 1126               		.cfi_offset 15, -3
 1127 03c8 0F93      		push r16
 1128               	.LCFI56:
 1129               		.cfi_def_cfa_offset 5
 1130               		.cfi_offset 16, -4
 1131 03ca 1F93      		push r17
 1132               	.LCFI57:
 1133               		.cfi_def_cfa_offset 6
 1134               		.cfi_offset 17, -5
 1135 03cc CF93      		push r28
 1136               	.LCFI58:
 1137               		.cfi_def_cfa_offset 7
 1138               		.cfi_offset 28, -6
 1139 03ce DF93      		push r29
 1140               	.LCFI59:
 1141               		.cfi_def_cfa_offset 8
 1142               		.cfi_offset 29, -7
 1143               	/* prologue: function */
 1144               	/* frame size = 0 */
 1145               	/* stack size = 6 */
 1146               	.L__stack_usage = 6
 1147 03d0 E82E      		mov r14,r24
 1148 03d2 162F      		mov r17,r22
 1149 03d4 C42F      		mov r28,r20
 1150 03d6 D22F      		mov r29,r18
 185:glcd/graphics.c **** 	glcd_draw_rect(x, y, w, h, color);
 1151               		.loc 1 185 2 is_stmt 1 view .LVU216
 1152 03d8 0E94 0000 		call glcd_draw_rect
 1153               	.LVL109:
 186:glcd/graphics.c **** 	glcd_draw_line(x+1, y+h, x+w, y+h, color);
 1154               		.loc 1 186 2 view .LVU217
 1155 03dc D10F      		add r29,r17
 1156               	.LVL110:
 1157               		.loc 1 186 2 is_stmt 0 view .LVU218
 1158 03de CE0D      		add r28,r14
 1159               	.LVL111:
 1160               		.loc 1 186 2 view .LVU219
 1161 03e0 2D2F      		mov r18,r29
 1162 03e2 4C2F      		mov r20,r28
 1163 03e4 6D2F      		mov r22,r29
 1164 03e6 81E0      		ldi r24,lo8(1)
 1165 03e8 8E0D      		add r24,r14
 1166 03ea 0E94 0000 		call glcd_draw_line
 1167               	.LVL112:
 187:glcd/graphics.c **** 	glcd_draw_line(x+w, y+1, x+w, y+h, color);
 1168               		.loc 1 187 2 is_stmt 1 view .LVU220
 1169 03ee 61E0      		ldi r22,lo8(1)
 1170 03f0 610F      		add r22,r17
 1171 03f2 2D2F      		mov r18,r29
 1172 03f4 4C2F      		mov r20,r28
 1173 03f6 8C2F      		mov r24,r28
 1174 03f8 0E94 0000 		call glcd_draw_line
 1175               	.LVL113:
 1176               	/* epilogue start */
 188:glcd/graphics.c **** }
 1177               		.loc 1 188 1 is_stmt 0 view .LVU221
 1178 03fc DF91      		pop r29
 1179 03fe CF91      		pop r28
 1180 0400 1F91      		pop r17
 1181               	.LVL114:
 1182               		.loc 1 188 1 view .LVU222
 1183 0402 0F91      		pop r16
 1184               	.LVL115:
 1185               		.loc 1 188 1 view .LVU223
 1186 0404 FF90      		pop r15
 1187 0406 EF90      		pop r14
 1188               	.LVL116:
 1189               		.loc 1 188 1 view .LVU224
 1190 0408 0895      		ret
 1191               		.cfi_endproc
 1192               	.LFE19:
 1194               	.global	glcd_draw_circle
 1196               	glcd_draw_circle:
 1197               	.LVL117:
 1198               	.LFB20:
 189:glcd/graphics.c **** 
 190:glcd/graphics.c **** void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
 191:glcd/graphics.c **** {
 1199               		.loc 1 191 1 is_stmt 1 view -0
 1200               		.cfi_startproc
 1201               		.loc 1 191 1 is_stmt 0 view .LVU226
 1202 040a AF92      		push r10
 1203               	.LCFI60:
 1204               		.cfi_def_cfa_offset 3
 1205               		.cfi_offset 10, -2
 1206 040c BF92      		push r11
 1207               	.LCFI61:
 1208               		.cfi_def_cfa_offset 4
 1209               		.cfi_offset 11, -3
 1210 040e CF92      		push r12
 1211               	.LCFI62:
 1212               		.cfi_def_cfa_offset 5
 1213               		.cfi_offset 12, -4
 1214 0410 DF92      		push r13
 1215               	.LCFI63:
 1216               		.cfi_def_cfa_offset 6
 1217               		.cfi_offset 13, -5
 1218 0412 EF92      		push r14
 1219               	.LCFI64:
 1220               		.cfi_def_cfa_offset 7
 1221               		.cfi_offset 14, -6
 1222 0414 FF92      		push r15
 1223               	.LCFI65:
 1224               		.cfi_def_cfa_offset 8
 1225               		.cfi_offset 15, -7
 1226 0416 0F93      		push r16
 1227               	.LCFI66:
 1228               		.cfi_def_cfa_offset 9
 1229               		.cfi_offset 16, -8
 1230 0418 1F93      		push r17
 1231               	.LCFI67:
 1232               		.cfi_def_cfa_offset 10
 1233               		.cfi_offset 17, -9
 1234 041a CF93      		push r28
 1235               	.LCFI68:
 1236               		.cfi_def_cfa_offset 11
 1237               		.cfi_offset 28, -10
 1238 041c DF93      		push r29
 1239               	.LCFI69:
 1240               		.cfi_def_cfa_offset 12
 1241               		.cfi_offset 29, -11
 1242               	/* prologue: function */
 1243               	/* frame size = 0 */
 1244               	/* stack size = 10 */
 1245               	.L__stack_usage = 10
 1246 041e E82E      		mov r14,r24
 1247 0420 D62E      		mov r13,r22
 1248 0422 F22E      		mov r15,r18
 192:glcd/graphics.c **** 		
 193:glcd/graphics.c **** 	int8_t f = 1 - r;
 1249               		.loc 1 193 2 is_stmt 1 view .LVU227
 1250               		.loc 1 193 15 is_stmt 0 view .LVU228
 1251 0424 81E0      		ldi r24,lo8(1)
 1252               	.LVL118:
 1253               		.loc 1 193 15 view .LVU229
 1254 0426 C82E      		mov r12,r24
 1255 0428 C41A      		sub r12,r20
 1256               	.LVL119:
 194:glcd/graphics.c **** 	int8_t ddF_x = 1;
 1257               		.loc 1 194 2 is_stmt 1 view .LVU230
 195:glcd/graphics.c **** 	int8_t ddF_y = -2 * r;
 1258               		.loc 1 195 2 view .LVU231
 1259               		.loc 1 195 9 is_stmt 0 view .LVU232
 1260 042a B42E      		mov r11,r20
 1261 042c B194      		neg r11
 1262 042e BB0C      		lsl r11
 1263               	.LVL120:
 196:glcd/graphics.c **** 	int8_t x = 0;
 1264               		.loc 1 196 2 is_stmt 1 view .LVU233
 197:glcd/graphics.c **** 	int8_t y = r;
 1265               		.loc 1 197 2 view .LVU234
 1266               		.loc 1 197 9 is_stmt 0 view .LVU235
 1267 0430 C42F      		mov r28,r20
 1268               	.LVL121:
 198:glcd/graphics.c **** 	
 199:glcd/graphics.c **** 	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
 1269               		.loc 1 199 2 is_stmt 1 view .LVU236
 1270 0432 A42E      		mov r10,r20
 1271 0434 A60E      		add r10,r22
 1272 0436 142F      		mov r17,r20
 1273 0438 1E0D      		add r17,r14
 1274 043a 062F      		mov r16,r22
 1275 043c 041B      		sub r16,r20
 1276 043e DE2D      		mov r29,r14
 1277 0440 D41B      		sub r29,r20
 1278 0442 2A2D      		mov r18,r10
 1279               	.LVL122:
 1280               		.loc 1 199 2 is_stmt 0 view .LVU237
 1281 0444 412F      		mov r20,r17
 1282               	.LVL123:
 1283               		.loc 1 199 2 view .LVU238
 1284 0446 602F      		mov r22,r16
 1285               	.LVL124:
 1286               		.loc 1 199 2 view .LVU239
 1287 0448 8D2F      		mov r24,r29
 1288 044a 0E94 0000 		call glcd_update_bbox
 1289               	.LVL125:
 200:glcd/graphics.c **** 	
 201:glcd/graphics.c **** 	glcd_set_pixel(x0, y0+r, color);
 1290               		.loc 1 201 2 is_stmt 1 view .LVU240
 1291 044e 4F2D      		mov r20,r15
 1292 0450 6A2D      		mov r22,r10
 1293 0452 8E2D      		mov r24,r14
 1294 0454 0E94 0000 		call glcd_set_pixel
 1295               	.LVL126:
 202:glcd/graphics.c **** 	glcd_set_pixel(x0, y0-r, color);
 1296               		.loc 1 202 2 view .LVU241
 1297 0458 4F2D      		mov r20,r15
 1298 045a 602F      		mov r22,r16
 1299 045c 8E2D      		mov r24,r14
 1300 045e 0E94 0000 		call glcd_set_pixel
 1301               	.LVL127:
 203:glcd/graphics.c **** 	glcd_set_pixel(x0+r, y0, color);
 1302               		.loc 1 203 2 view .LVU242
 1303 0462 4F2D      		mov r20,r15
 1304 0464 6D2D      		mov r22,r13
 1305 0466 812F      		mov r24,r17
 1306 0468 0E94 0000 		call glcd_set_pixel
 1307               	.LVL128:
 204:glcd/graphics.c **** 	glcd_set_pixel(x0-r, y0, color);
 1308               		.loc 1 204 2 view .LVU243
 1309 046c 4F2D      		mov r20,r15
 1310 046e 6D2D      		mov r22,r13
 1311 0470 8D2F      		mov r24,r29
 1312 0472 0E94 0000 		call glcd_set_pixel
 1313               	.LVL129:
 205:glcd/graphics.c **** 	
 206:glcd/graphics.c **** 	while (x<y) {
 1314               		.loc 1 206 2 view .LVU244
 196:glcd/graphics.c **** 	int8_t y = r;
 1315               		.loc 1 196 9 is_stmt 0 view .LVU245
 1316 0476 D0E0      		ldi r29,0
 1317               	.LVL130:
 1318               	.L49:
 1319               		.loc 1 206 8 view .LVU246
 1320 0478 DC17      		cp r29,r28
 1321 047a 04F0      		brlt .L51
 1322               	/* epilogue start */
 207:glcd/graphics.c **** 		if (f >= 0) {
 208:glcd/graphics.c **** 			y--;
 209:glcd/graphics.c **** 			ddF_y += 2;
 210:glcd/graphics.c **** 			f += ddF_y;
 211:glcd/graphics.c **** 		}
 212:glcd/graphics.c **** 		x++;
 213:glcd/graphics.c **** 		ddF_x += 2;
 214:glcd/graphics.c **** 		f += ddF_x;
 215:glcd/graphics.c **** 		
 216:glcd/graphics.c **** 		glcd_set_pixel(x0 + x, y0 + y, color);
 217:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 + y, color);
 218:glcd/graphics.c **** 		glcd_set_pixel(x0 + x, y0 - y, color);
 219:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 - y, color);
 220:glcd/graphics.c **** 		
 221:glcd/graphics.c **** 		glcd_set_pixel(x0 + y, y0 + x, color);
 222:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 + x, color);
 223:glcd/graphics.c **** 		glcd_set_pixel(x0 + y, y0 - x, color);
 224:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 - x, color);
 225:glcd/graphics.c **** 		
 226:glcd/graphics.c **** 	}
 227:glcd/graphics.c **** }
 1323               		.loc 1 227 1 view .LVU247
 1324 047c DF91      		pop r29
 1325               	.LVL131:
 1326               		.loc 1 227 1 view .LVU248
 1327 047e CF91      		pop r28
 1328               	.LVL132:
 1329               		.loc 1 227 1 view .LVU249
 1330 0480 1F91      		pop r17
 1331 0482 0F91      		pop r16
 1332 0484 FF90      		pop r15
 1333               	.LVL133:
 1334               		.loc 1 227 1 view .LVU250
 1335 0486 EF90      		pop r14
 1336               	.LVL134:
 1337               		.loc 1 227 1 view .LVU251
 1338 0488 DF90      		pop r13
 1339               	.LVL135:
 1340               		.loc 1 227 1 view .LVU252
 1341 048a CF90      		pop r12
 1342               	.LVL136:
 1343               		.loc 1 227 1 view .LVU253
 1344 048c BF90      		pop r11
 1345               	.LVL137:
 1346               		.loc 1 227 1 view .LVU254
 1347 048e AF90      		pop r10
 1348 0490 0895      		ret
 1349               	.LVL138:
 1350               	.L51:
 207:glcd/graphics.c **** 		if (f >= 0) {
 1351               		.loc 1 207 3 is_stmt 1 view .LVU255
 207:glcd/graphics.c **** 		if (f >= 0) {
 1352               		.loc 1 207 6 is_stmt 0 view .LVU256
 1353 0492 C7FC      		sbrc r12,7
 1354 0494 00C0      		rjmp .L50
 208:glcd/graphics.c **** 			ddF_y += 2;
 1355               		.loc 1 208 4 is_stmt 1 view .LVU257
 208:glcd/graphics.c **** 			ddF_y += 2;
 1356               		.loc 1 208 5 is_stmt 0 view .LVU258
 1357 0496 C150      		subi r28,lo8(-(-1))
 1358               	.LVL139:
 209:glcd/graphics.c **** 			f += ddF_y;
 1359               		.loc 1 209 4 is_stmt 1 view .LVU259
 209:glcd/graphics.c **** 			f += ddF_y;
 1360               		.loc 1 209 10 is_stmt 0 view .LVU260
 1361 0498 B394      		inc r11
 1362 049a B394      		inc r11
 1363               	.LVL140:
 210:glcd/graphics.c **** 		}
 1364               		.loc 1 210 4 is_stmt 1 view .LVU261
 210:glcd/graphics.c **** 		}
 1365               		.loc 1 210 6 is_stmt 0 view .LVU262
 1366 049c CB0C      		add r12,r11
 1367               	.LVL141:
 1368               	.L50:
 212:glcd/graphics.c **** 		ddF_x += 2;
 1369               		.loc 1 212 3 is_stmt 1 view .LVU263
 1370 049e DF5F      		subi r29,lo8(-(1))
 1371               	.LVL142:
 213:glcd/graphics.c **** 		f += ddF_x;
 1372               		.loc 1 213 3 view .LVU264
 214:glcd/graphics.c **** 		
 1373               		.loc 1 214 3 view .LVU265
 213:glcd/graphics.c **** 		f += ddF_x;
 1374               		.loc 1 213 9 is_stmt 0 view .LVU266
 1375 04a0 8D2F      		mov r24,r29
 1376 04a2 880F      		lsl r24
 1377 04a4 8F5F      		subi r24,lo8(-(1))
 1378               	.LVL143:
 214:glcd/graphics.c **** 		
 1379               		.loc 1 214 5 view .LVU267
 1380 04a6 C80E      		add r12,r24
 1381               	.LVL144:
 216:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 + y, color);
 1382               		.loc 1 216 3 is_stmt 1 view .LVU268
 1383 04a8 AE2C      		mov r10,r14
 1384 04aa AD0E      		add r10,r29
 1385 04ac 4F2D      		mov r20,r15
 1386 04ae 1C2F      		mov r17,r28
 1387 04b0 1D0D      		add r17,r13
 1388 04b2 612F      		mov r22,r17
 1389 04b4 8A2D      		mov r24,r10
 1390               	.LVL145:
 216:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 + y, color);
 1391               		.loc 1 216 3 is_stmt 0 view .LVU269
 1392 04b6 0E94 0000 		call glcd_set_pixel
 1393               	.LVL146:
 217:glcd/graphics.c **** 		glcd_set_pixel(x0 + x, y0 - y, color);
 1394               		.loc 1 217 3 is_stmt 1 view .LVU270
 1395 04ba 0E2D      		mov r16,r14
 1396 04bc 0D1B      		sub r16,r29
 1397 04be 4F2D      		mov r20,r15
 1398 04c0 612F      		mov r22,r17
 1399 04c2 802F      		mov r24,r16
 1400 04c4 0E94 0000 		call glcd_set_pixel
 1401               	.LVL147:
 218:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 - y, color);
 1402               		.loc 1 218 3 view .LVU271
 1403 04c8 4F2D      		mov r20,r15
 1404 04ca 1D2D      		mov r17,r13
 1405 04cc 1C1B      		sub r17,r28
 1406 04ce 612F      		mov r22,r17
 1407 04d0 8A2D      		mov r24,r10
 1408 04d2 0E94 0000 		call glcd_set_pixel
 1409               	.LVL148:
 219:glcd/graphics.c **** 		
 1410               		.loc 1 219 3 view .LVU272
 1411 04d6 4F2D      		mov r20,r15
 1412 04d8 612F      		mov r22,r17
 1413 04da 802F      		mov r24,r16
 1414 04dc 0E94 0000 		call glcd_set_pixel
 1415               	.LVL149:
 221:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 + x, color);
 1416               		.loc 1 221 3 view .LVU273
 1417 04e0 1D2D      		mov r17,r13
 1418 04e2 1D0F      		add r17,r29
 1419 04e4 4F2D      		mov r20,r15
 1420 04e6 612F      		mov r22,r17
 1421 04e8 0C2F      		mov r16,r28
 1422 04ea 0E0D      		add r16,r14
 1423 04ec 802F      		mov r24,r16
 1424 04ee 0E94 0000 		call glcd_set_pixel
 1425               	.LVL150:
 222:glcd/graphics.c **** 		glcd_set_pixel(x0 + y, y0 - x, color);
 1426               		.loc 1 222 3 view .LVU274
 1427 04f2 4F2D      		mov r20,r15
 1428 04f4 612F      		mov r22,r17
 1429 04f6 1E2D      		mov r17,r14
 1430 04f8 1C1B      		sub r17,r28
 1431 04fa 812F      		mov r24,r17
 1432 04fc 0E94 0000 		call glcd_set_pixel
 1433               	.LVL151:
 223:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 - x, color);
 1434               		.loc 1 223 3 view .LVU275
 1435 0500 AD2C      		mov r10,r13
 1436 0502 AD1A      		sub r10,r29
 1437 0504 4F2D      		mov r20,r15
 1438 0506 6A2D      		mov r22,r10
 1439 0508 802F      		mov r24,r16
 1440 050a 0E94 0000 		call glcd_set_pixel
 1441               	.LVL152:
 224:glcd/graphics.c **** 		
 1442               		.loc 1 224 3 view .LVU276
 1443 050e 4F2D      		mov r20,r15
 1444 0510 6A2D      		mov r22,r10
 1445 0512 812F      		mov r24,r17
 1446 0514 0E94 0000 		call glcd_set_pixel
 1447               	.LVL153:
 1448 0518 00C0      		rjmp .L49
 1449               		.cfi_endproc
 1450               	.LFE20:
 1452               	.global	glcd_fill_circle
 1454               	glcd_fill_circle:
 1455               	.LVL154:
 1456               	.LFB21:
 228:glcd/graphics.c **** 
 229:glcd/graphics.c **** void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
 230:glcd/graphics.c **** {
 1457               		.loc 1 230 1 view -0
 1458               		.cfi_startproc
 1459               		.loc 1 230 1 is_stmt 0 view .LVU278
 1460 051a 4F92      		push r4
 1461               	.LCFI70:
 1462               		.cfi_def_cfa_offset 3
 1463               		.cfi_offset 4, -2
 1464 051c 5F92      		push r5
 1465               	.LCFI71:
 1466               		.cfi_def_cfa_offset 4
 1467               		.cfi_offset 5, -3
 1468 051e 6F92      		push r6
 1469               	.LCFI72:
 1470               		.cfi_def_cfa_offset 5
 1471               		.cfi_offset 6, -4
 1472 0520 7F92      		push r7
 1473               	.LCFI73:
 1474               		.cfi_def_cfa_offset 6
 1475               		.cfi_offset 7, -5
 1476 0522 8F92      		push r8
 1477               	.LCFI74:
 1478               		.cfi_def_cfa_offset 7
 1479               		.cfi_offset 8, -6
 1480 0524 9F92      		push r9
 1481               	.LCFI75:
 1482               		.cfi_def_cfa_offset 8
 1483               		.cfi_offset 9, -7
 1484 0526 AF92      		push r10
 1485               	.LCFI76:
 1486               		.cfi_def_cfa_offset 9
 1487               		.cfi_offset 10, -8
 1488 0528 BF92      		push r11
 1489               	.LCFI77:
 1490               		.cfi_def_cfa_offset 10
 1491               		.cfi_offset 11, -9
 1492 052a CF92      		push r12
 1493               	.LCFI78:
 1494               		.cfi_def_cfa_offset 11
 1495               		.cfi_offset 12, -10
 1496 052c DF92      		push r13
 1497               	.LCFI79:
 1498               		.cfi_def_cfa_offset 12
 1499               		.cfi_offset 13, -11
 1500 052e EF92      		push r14
 1501               	.LCFI80:
 1502               		.cfi_def_cfa_offset 13
 1503               		.cfi_offset 14, -12
 1504 0530 FF92      		push r15
 1505               	.LCFI81:
 1506               		.cfi_def_cfa_offset 14
 1507               		.cfi_offset 15, -13
 1508 0532 0F93      		push r16
 1509               	.LCFI82:
 1510               		.cfi_def_cfa_offset 15
 1511               		.cfi_offset 16, -14
 1512 0534 1F93      		push r17
 1513               	.LCFI83:
 1514               		.cfi_def_cfa_offset 16
 1515               		.cfi_offset 17, -15
 1516 0536 CF93      		push r28
 1517               	.LCFI84:
 1518               		.cfi_def_cfa_offset 17
 1519               		.cfi_offset 28, -16
 1520 0538 DF93      		push r29
 1521               	.LCFI85:
 1522               		.cfi_def_cfa_offset 18
 1523               		.cfi_offset 29, -17
 1524               	/* prologue: function */
 1525               	/* frame size = 0 */
 1526               	/* stack size = 16 */
 1527               	.L__stack_usage = 16
 1528 053a F82E      		mov r15,r24
 1529 053c 062F      		mov r16,r22
 1530 053e 822E      		mov r8,r18
 231:glcd/graphics.c **** 	
 232:glcd/graphics.c **** 	int8_t f = 1 - r;
 1531               		.loc 1 232 2 is_stmt 1 view .LVU279
 1532               		.loc 1 232 15 is_stmt 0 view .LVU280
 1533 0540 D1E0      		ldi r29,lo8(1)
 1534 0542 D41B      		sub r29,r20
 1535               	.LVL155:
 233:glcd/graphics.c **** 	int8_t ddF_x = 1;
 1536               		.loc 1 233 2 is_stmt 1 view .LVU281
 234:glcd/graphics.c **** 	int8_t ddF_y = -2 * r;
 1537               		.loc 1 234 2 view .LVU282
 1538               		.loc 1 234 9 is_stmt 0 view .LVU283
 1539 0544 942E      		mov r9,r20
 1540 0546 9194      		neg r9
 1541 0548 990C      		lsl r9
 1542               	.LVL156:
 235:glcd/graphics.c **** 	int8_t x = 0;
 1543               		.loc 1 235 2 is_stmt 1 view .LVU284
 236:glcd/graphics.c **** 	int8_t y = r;
 1544               		.loc 1 236 2 view .LVU285
 1545               		.loc 1 236 9 is_stmt 0 view .LVU286
 1546 054a C42F      		mov r28,r20
 1547               	.LVL157:
 237:glcd/graphics.c **** 	
 238:glcd/graphics.c **** 	int16_t i;
 1548               		.loc 1 238 2 is_stmt 1 view .LVU287
 239:glcd/graphics.c **** 
 240:glcd/graphics.c **** 	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
 1549               		.loc 1 240 2 view .LVU288
 1550 054c 242F      		mov r18,r20
 1551               	.LVL158:
 1552               		.loc 1 240 2 is_stmt 0 view .LVU289
 1553 054e 260F      		add r18,r22
 1554 0550 480F      		add r20,r24
 1555               	.LVL159:
 1556               		.loc 1 240 2 view .LVU290
 1557 0552 6C1B      		sub r22,r28
 1558               	.LVL160:
 1559               		.loc 1 240 2 view .LVU291
 1560 0554 8C1B      		sub r24,r28
 1561               	.LVL161:
 1562               		.loc 1 240 2 view .LVU292
 1563 0556 0E94 0000 		call glcd_update_bbox
 1564               	.LVL162:
 241:glcd/graphics.c **** 	
 242:glcd/graphics.c **** 	for (i=y0-r; i<=y0+r; i++) {
 1565               		.loc 1 242 2 is_stmt 1 view .LVU293
 1566               		.loc 1 242 11 is_stmt 0 view .LVU294
 1567 055a 10E0      		ldi r17,0
 1568 055c CC2E      		mov r12,r28
 1569 055e D12C      		mov r13,__zero_reg__
 1570               		.loc 1 242 8 view .LVU295
 1571 0560 5801      		movw r10,r16
 1572 0562 AC18      		sub r10,r12
 1573 0564 BD08      		sbc r11,r13
 1574               	.LVL163:
 1575               		.loc 1 242 20 view .LVU296
 1576 0566 C00E      		add r12,r16
 1577 0568 D11E      		adc r13,r17
 1578               	.L53:
 1579               		.loc 1 242 2 discriminator 1 view .LVU297
 1580 056a CA14      		cp r12,r10
 1581 056c DB04      		cpc r13,r11
 1582 056e 04F4      		brge .L54
 1583               		.loc 1 242 2 discriminator 1 view .LVU298
 1584 0570 6624      		clr r6
 1585 0572 6394      		inc r6
 1586 0574 6F0C      		add r6,r15
 1587 0576 7724      		clr r7
 1588 0578 7A94      		dec r7
 1589 057a 7F0C      		add r7,r15
 235:glcd/graphics.c **** 	int8_t y = r;
 1590               		.loc 1 235 9 view .LVU299
 1591 057c E12C      		mov r14,__zero_reg__
 1592               	.LVL164:
 1593               	.L55:
 243:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 244:glcd/graphics.c **** 	}
 245:glcd/graphics.c **** 	
 246:glcd/graphics.c **** 	while (x < y) {
 1594               		.loc 1 246 8 view .LVU300
 1595 057e EC16      		cp r14,r28
 1596 0580 04F0      		brlt .L61
 1597               	/* epilogue start */
 247:glcd/graphics.c **** 		if (f >= 0) {
 248:glcd/graphics.c **** 			y--;
 249:glcd/graphics.c **** 			ddF_y += 2;
 250:glcd/graphics.c **** 			f += ddF_y;
 251:glcd/graphics.c **** 		}
 252:glcd/graphics.c **** 		x++;
 253:glcd/graphics.c **** 		ddF_x += 2;
 254:glcd/graphics.c **** 		f += ddF_x;
 255:glcd/graphics.c **** 		
 256:glcd/graphics.c **** 		for (i=y0-y; i<=y0+y; i++) {
 257:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 258:glcd/graphics.c **** 			glcd_set_pixel(x0-x, i, color);
 259:glcd/graphics.c **** 		} 
 260:glcd/graphics.c **** 		for (i=y0-x; i<=y0+x; i++) {
 261:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 262:glcd/graphics.c **** 			glcd_set_pixel(x0-y, i, color);
 263:glcd/graphics.c **** 		}    
 264:glcd/graphics.c **** 	}
 265:glcd/graphics.c **** }
 1598               		.loc 1 265 1 view .LVU301
 1599 0582 DF91      		pop r29
 1600               	.LVL165:
 1601               		.loc 1 265 1 view .LVU302
 1602 0584 CF91      		pop r28
 1603               	.LVL166:
 1604               		.loc 1 265 1 view .LVU303
 1605 0586 1F91      		pop r17
 1606 0588 0F91      		pop r16
 1607               	.LVL167:
 1608               		.loc 1 265 1 view .LVU304
 1609 058a FF90      		pop r15
 1610               	.LVL168:
 1611               		.loc 1 265 1 view .LVU305
 1612 058c EF90      		pop r14
 1613               	.LVL169:
 1614               		.loc 1 265 1 view .LVU306
 1615 058e DF90      		pop r13
 1616 0590 CF90      		pop r12
 1617 0592 BF90      		pop r11
 1618 0594 AF90      		pop r10
 1619 0596 9F90      		pop r9
 1620               	.LVL170:
 1621               		.loc 1 265 1 view .LVU307
 1622 0598 8F90      		pop r8
 1623               	.LVL171:
 1624               		.loc 1 265 1 view .LVU308
 1625 059a 7F90      		pop r7
 1626 059c 6F90      		pop r6
 1627 059e 5F90      		pop r5
 1628 05a0 4F90      		pop r4
 1629 05a2 0895      		ret
 1630               	.LVL172:
 1631               	.L54:
 243:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 1632               		.loc 1 243 3 is_stmt 1 discriminator 3 view .LVU309
 1633 05a4 482D      		mov r20,r8
 1634 05a6 6A2D      		mov r22,r10
 1635 05a8 8F2D      		mov r24,r15
 1636 05aa 0E94 0000 		call glcd_set_pixel
 1637               	.LVL173:
 242:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 1638               		.loc 1 242 25 is_stmt 0 discriminator 3 view .LVU310
 1639 05ae 8FEF      		ldi r24,-1
 1640 05b0 A81A      		sub r10,r24
 1641 05b2 B80A      		sbc r11,r24
 1642               	.LVL174:
 242:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 1643               		.loc 1 242 25 discriminator 3 view .LVU311
 1644 05b4 00C0      		rjmp .L53
 1645               	.LVL175:
 1646               	.L61:
 247:glcd/graphics.c **** 		if (f >= 0) {
 1647               		.loc 1 247 3 is_stmt 1 view .LVU312
 247:glcd/graphics.c **** 		if (f >= 0) {
 1648               		.loc 1 247 6 is_stmt 0 view .LVU313
 1649 05b6 D7FD      		sbrc r29,7
 1650 05b8 00C0      		rjmp .L56
 248:glcd/graphics.c **** 			ddF_y += 2;
 1651               		.loc 1 248 4 is_stmt 1 view .LVU314
 248:glcd/graphics.c **** 			ddF_y += 2;
 1652               		.loc 1 248 5 is_stmt 0 view .LVU315
 1653 05ba C150      		subi r28,lo8(-(-1))
 1654               	.LVL176:
 249:glcd/graphics.c **** 			f += ddF_y;
 1655               		.loc 1 249 4 is_stmt 1 view .LVU316
 249:glcd/graphics.c **** 			f += ddF_y;
 1656               		.loc 1 249 10 is_stmt 0 view .LVU317
 1657 05bc 9394      		inc r9
 1658 05be 9394      		inc r9
 1659               	.LVL177:
 250:glcd/graphics.c **** 		}
 1660               		.loc 1 250 4 is_stmt 1 view .LVU318
 250:glcd/graphics.c **** 		}
 1661               		.loc 1 250 6 is_stmt 0 view .LVU319
 1662 05c0 D90D      		add r29,r9
 1663               	.LVL178:
 1664               	.L56:
 252:glcd/graphics.c **** 		ddF_x += 2;
 1665               		.loc 1 252 3 is_stmt 1 view .LVU320
 1666 05c2 E394      		inc r14
 1667               	.LVL179:
 253:glcd/graphics.c **** 		f += ddF_x;
 1668               		.loc 1 253 3 view .LVU321
 254:glcd/graphics.c **** 		
 1669               		.loc 1 254 3 view .LVU322
 253:glcd/graphics.c **** 		f += ddF_x;
 1670               		.loc 1 253 9 is_stmt 0 view .LVU323
 1671 05c4 8E2D      		mov r24,r14
 1672 05c6 880F      		lsl r24
 1673 05c8 8F5F      		subi r24,lo8(-(1))
 1674               	.LVL180:
 254:glcd/graphics.c **** 		
 1675               		.loc 1 254 5 view .LVU324
 1676 05ca D80F      		add r29,r24
 1677               	.LVL181:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1678               		.loc 1 256 3 is_stmt 1 view .LVU325
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1679               		.loc 1 256 12 is_stmt 0 view .LVU326
 1680 05cc AC2E      		mov r10,r28
 1681 05ce 0C2E      		mov __tmp_reg__,r28
 1682 05d0 000C      		lsl r0
 1683 05d2 BB08      		sbc r11,r11
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1684               		.loc 1 256 9 view .LVU327
 1685 05d4 6801      		movw r12,r16
 1686 05d6 CA18      		sub r12,r10
 1687 05d8 DB08      		sbc r13,r11
 1688               	.LVL182:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1689               		.loc 1 256 21 view .LVU328
 1690 05da A00E      		add r10,r16
 1691 05dc B11E      		adc r11,r17
 1692               	.LVL183:
 1693               	.L57:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1694               		.loc 1 256 3 discriminator 1 view .LVU329
 1695 05de AC14      		cp r10,r12
 1696 05e0 BD04      		cpc r11,r13
 1697 05e2 04F4      		brge .L58
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1698               		.loc 1 260 3 is_stmt 1 view .LVU330
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1699               		.loc 1 260 12 is_stmt 0 view .LVU331
 1700 05e4 AE2C      		mov r10,r14
 1701 05e6 0E2C      		mov __tmp_reg__,r14
 1702 05e8 000C      		lsl r0
 1703 05ea BB08      		sbc r11,r11
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1704               		.loc 1 260 9 view .LVU332
 1705 05ec 6801      		movw r12,r16
 1706               	.LVL184:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1707               		.loc 1 260 9 view .LVU333
 1708 05ee CA18      		sub r12,r10
 1709 05f0 DB08      		sbc r13,r11
 1710               	.LVL185:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1711               		.loc 1 260 21 view .LVU334
 1712 05f2 A00E      		add r10,r16
 1713 05f4 B11E      		adc r11,r17
 261:glcd/graphics.c **** 			glcd_set_pixel(x0-y, i, color);
 1714               		.loc 1 261 4 view .LVU335
 1715 05f6 5C2E      		mov r5,r28
 1716 05f8 5F0C      		add r5,r15
 262:glcd/graphics.c **** 		}    
 1717               		.loc 1 262 4 view .LVU336
 1718 05fa 4F2C      		mov r4,r15
 1719 05fc 4C1A      		sub r4,r28
 1720               	.L59:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1721               		.loc 1 260 3 discriminator 1 view .LVU337
 1722 05fe AC14      		cp r10,r12
 1723 0600 BD04      		cpc r11,r13
 1724 0602 04F4      		brge .L60
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1725               		.loc 1 260 3 discriminator 1 view .LVU338
 1726 0604 6394      		inc r6
 1727 0606 7A94      		dec r7
 1728 0608 00C0      		rjmp .L55
 1729               	.L58:
 257:glcd/graphics.c **** 			glcd_set_pixel(x0-x, i, color);
 1730               		.loc 1 257 4 is_stmt 1 discriminator 3 view .LVU339
 1731 060a 482D      		mov r20,r8
 1732 060c 6C2D      		mov r22,r12
 1733 060e 862D      		mov r24,r6
 1734 0610 0E94 0000 		call glcd_set_pixel
 1735               	.LVL186:
 258:glcd/graphics.c **** 		} 
 1736               		.loc 1 258 4 discriminator 3 view .LVU340
 1737 0614 482D      		mov r20,r8
 1738 0616 6C2D      		mov r22,r12
 1739 0618 872D      		mov r24,r7
 1740 061a 0E94 0000 		call glcd_set_pixel
 1741               	.LVL187:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1742               		.loc 1 256 26 is_stmt 0 discriminator 3 view .LVU341
 1743 061e 8FEF      		ldi r24,-1
 1744 0620 C81A      		sub r12,r24
 1745 0622 D80A      		sbc r13,r24
 1746               	.LVL188:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1747               		.loc 1 256 26 discriminator 3 view .LVU342
 1748 0624 00C0      		rjmp .L57
 1749               	.L60:
 261:glcd/graphics.c **** 			glcd_set_pixel(x0-y, i, color);
 1750               		.loc 1 261 4 is_stmt 1 discriminator 3 view .LVU343
 1751 0626 482D      		mov r20,r8
 1752 0628 6C2D      		mov r22,r12
 1753 062a 852D      		mov r24,r5
 1754 062c 0E94 0000 		call glcd_set_pixel
 1755               	.LVL189:
 262:glcd/graphics.c **** 		}    
 1756               		.loc 1 262 4 discriminator 3 view .LVU344
 1757 0630 482D      		mov r20,r8
 1758 0632 6C2D      		mov r22,r12
 1759 0634 842D      		mov r24,r4
 1760 0636 0E94 0000 		call glcd_set_pixel
 1761               	.LVL190:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1762               		.loc 1 260 26 is_stmt 0 discriminator 3 view .LVU345
 1763 063a 8FEF      		ldi r24,-1
 1764 063c C81A      		sub r12,r24
 1765 063e D80A      		sbc r13,r24
 1766               	.LVL191:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1767               		.loc 1 260 26 discriminator 3 view .LVU346
 1768 0640 00C0      		rjmp .L59
 1769               		.cfi_endproc
 1770               	.LFE21:
 1772               	.global	glcd_invert_area
 1774               	glcd_invert_area:
 1775               	.LVL192:
 1776               	.LFB22:
 266:glcd/graphics.c **** 
 267:glcd/graphics.c **** void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
 268:glcd/graphics.c **** {
 1777               		.loc 1 268 1 is_stmt 1 view -0
 1778               		.cfi_startproc
 1779               		.loc 1 268 1 is_stmt 0 view .LVU348
 1780 0642 CF92      		push r12
 1781               	.LCFI86:
 1782               		.cfi_def_cfa_offset 3
 1783               		.cfi_offset 12, -2
 1784 0644 DF92      		push r13
 1785               	.LCFI87:
 1786               		.cfi_def_cfa_offset 4
 1787               		.cfi_offset 13, -3
 1788 0646 EF92      		push r14
 1789               	.LCFI88:
 1790               		.cfi_def_cfa_offset 5
 1791               		.cfi_offset 14, -4
 1792 0648 FF92      		push r15
 1793               	.LCFI89:
 1794               		.cfi_def_cfa_offset 6
 1795               		.cfi_offset 15, -5
 1796 064a 1F93      		push r17
 1797               	.LCFI90:
 1798               		.cfi_def_cfa_offset 7
 1799               		.cfi_offset 17, -6
 1800 064c CF93      		push r28
 1801               	.LCFI91:
 1802               		.cfi_def_cfa_offset 8
 1803               		.cfi_offset 28, -7
 1804 064e DF93      		push r29
 1805               	.LCFI92:
 1806               		.cfi_def_cfa_offset 9
 1807               		.cfi_offset 29, -8
 1808               	/* prologue: function */
 1809               	/* frame size = 0 */
 1810               	/* stack size = 7 */
 1811               	.L__stack_usage = 7
 1812 0650 162F      		mov r17,r22
 269:glcd/graphics.c **** 	uint8_t xx, yy;
 1813               		.loc 1 269 2 is_stmt 1 view .LVU349
 270:glcd/graphics.c **** 	for (xx = x; xx < (x+w); xx++) {
 1814               		.loc 1 270 2 view .LVU350
 1815               	.LVL193:
 1816               		.loc 1 270 10 is_stmt 0 view .LVU351
 1817 0652 C82F      		mov r28,r24
 1818               		.loc 1 270 22 view .LVU352
 1819 0654 840F      		add r24,r20
 1820 0656 9927      		clr r25
 1821 0658 991F      		rol r25
 1822               	.LVL194:
 1823               		.loc 1 270 22 view .LVU353
 1824 065a 7C01      		movw r14,r24
 271:glcd/graphics.c **** 		/* Loop through each partial column */
 272:glcd/graphics.c **** 		for (yy = y; yy < (y+h); yy++) {
 1825               		.loc 1 272 23 view .LVU354
 1826 065c 862F      		mov r24,r22
 1827 065e 820F      		add r24,r18
 1828 0660 9927      		clr r25
 1829 0662 991F      		rol r25
 1830 0664 6C01      		movw r12,r24
 1831               	.LVL195:
 1832               	.L63:
 270:glcd/graphics.c **** 	for (xx = x; xx < (x+w); xx++) {
 1833               		.loc 1 270 2 discriminator 1 view .LVU355
 1834 0666 CE15      		cp r28,r14
 1835 0668 1F04      		cpc __zero_reg__,r15
 1836 066a 04F0      		brlt .L66
 1837               	/* epilogue start */
 273:glcd/graphics.c **** 			/* Go down and invert every pixel */
 274:glcd/graphics.c **** 			glcd_invert_pixel(xx,yy);
 275:glcd/graphics.c **** 		}
 276:glcd/graphics.c **** 	}
 277:glcd/graphics.c **** }
 1838               		.loc 1 277 1 view .LVU356
 1839 066c DF91      		pop r29
 1840 066e CF91      		pop r28
 1841               	.LVL196:
 1842               		.loc 1 277 1 view .LVU357
 1843 0670 1F91      		pop r17
 1844               	.LVL197:
 1845               		.loc 1 277 1 view .LVU358
 1846 0672 FF90      		pop r15
 1847 0674 EF90      		pop r14
 1848 0676 DF90      		pop r13
 1849 0678 CF90      		pop r12
 1850 067a 0895      		ret
 1851               	.LVL198:
 1852               	.L64:
 274:glcd/graphics.c **** 		}
 1853               		.loc 1 274 4 is_stmt 1 discriminator 3 view .LVU359
 1854 067c 6D2F      		mov r22,r29
 1855 067e 8C2F      		mov r24,r28
 1856 0680 0E94 0000 		call glcd_invert_pixel
 1857               	.LVL199:
 272:glcd/graphics.c **** 			/* Go down and invert every pixel */
 1858               		.loc 1 272 30 is_stmt 0 discriminator 3 view .LVU360
 1859 0684 DF5F      		subi r29,lo8(-(1))
 1860               	.LVL200:
 1861               	.L65:
 272:glcd/graphics.c **** 			/* Go down and invert every pixel */
 1862               		.loc 1 272 3 discriminator 1 view .LVU361
 1863 0686 DC15      		cp r29,r12
 1864 0688 1D04      		cpc __zero_reg__,r13
 1865 068a 04F0      		brlt .L64
 270:glcd/graphics.c **** 		/* Loop through each partial column */
 1866               		.loc 1 270 29 discriminator 2 view .LVU362
 1867 068c CF5F      		subi r28,lo8(-(1))
 1868               	.LVL201:
 270:glcd/graphics.c **** 		/* Loop through each partial column */
 1869               		.loc 1 270 29 discriminator 2 view .LVU363
 1870 068e 00C0      		rjmp .L63
 1871               	.LVL202:
 1872               	.L66:
 272:glcd/graphics.c **** 			/* Go down and invert every pixel */
 1873               		.loc 1 272 11 view .LVU364
 1874 0690 D12F      		mov r29,r17
 1875 0692 00C0      		rjmp .L65
 1876               		.cfi_endproc
 1877               	.LFE22:
 1879               	.global	glcd_draw_bitmap
 1881               	glcd_draw_bitmap:
 1882               	.LVL203:
 1883               	.LFB23:
 278:glcd/graphics.c **** 
 279:glcd/graphics.c **** void glcd_draw_bitmap(const unsigned char *data)
 280:glcd/graphics.c **** {
 1884               		.loc 1 280 1 is_stmt 1 view -0
 1885               		.cfi_startproc
 1886               	/* prologue: function */
 1887               	/* frame size = 0 */
 1888               	/* stack size = 0 */
 1889               	.L__stack_usage = 0
 281:glcd/graphics.c **** 
 282:glcd/graphics.c **** #if 0
 283:glcd/graphics.c **** 	/* Testing purposes only: Writing to the LCD right away (not for AVR) */
 284:glcd/graphics.c **** 	/* Normally, we do not do this, we just write to the screen buffer */
 285:glcd/graphics.c **** 	uint8_t *original_buffer;
 286:glcd/graphics.c **** 
 287:glcd/graphics.c **** 	/* Save the location of original screen buffer */
 288:glcd/graphics.c **** 	original_buffer = glcd_buffer_selected;
 289:glcd/graphics.c **** 	
 290:glcd/graphics.c **** 	/* Use bitmap location as screen buffer (this won't work when using AVR8 PGM_P) */
 291:glcd/graphics.c **** 	glcd_select_screen((uint8_t *)data, glcd_bbox_selected);
 292:glcd/graphics.c **** 	
 293:glcd/graphics.c **** 	/* Make sure we write the entre display */
 294:glcd/graphics.c **** 	glcd_bbox_refresh(); 
 295:glcd/graphics.c **** 	glcd_write();
 296:glcd/graphics.c **** 	
 297:glcd/graphics.c **** 	/* Restore the screen buffer back to original */
 298:glcd/graphics.c **** 	glcd_select_screen(original_buffer, glcd_bbox_selected);	
 299:glcd/graphics.c **** #endif
 300:glcd/graphics.c **** 	
 301:glcd/graphics.c **** 	/* Copy bitmap data to the screen buffer */
 302:glcd/graphics.c **** #if defined(GLCD_DEVICE_AVR8)
 303:glcd/graphics.c **** 	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
 1890               		.loc 1 303 2 view .LVU366
 1891 0694 48EF      		ldi r20,lo8(-8)
 1892 0696 51E0      		ldi r21,lo8(1)
 1893 0698 BC01      		movw r22,r24
 1894 069a 8091 0000 		lds r24,glcd_buffer_selected
 1895 069e 9091 0000 		lds r25,glcd_buffer_selected+1
 1896               	.LVL204:
 1897               		.loc 1 303 2 is_stmt 0 view .LVU367
 1898 06a2 0E94 0000 		call memcpy_P
 1899               	.LVL205:
 304:glcd/graphics.c **** #else
 305:glcd/graphics.c **** 	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
 306:glcd/graphics.c **** #endif
 307:glcd/graphics.c **** 
 308:glcd/graphics.c **** 	glcd_bbox_refresh(); 
 1900               		.loc 1 308 2 is_stmt 1 view .LVU368
 1901 06a6 0C94 0000 		jmp glcd_bbox_refresh
 1902               	.LVL206:
 1903               		.cfi_endproc
 1904               	.LFE23:
 1906               	.Letext0:
 1907               		.file 2 "/usr/avr/include/stdint.h"
 1908               		.file 3 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 1909               		.file 4 "/usr/avr/include/stdio.h"
 1910               		.file 5 "/usr/avr/include/stdlib.h"
 1911               		.file 6 "glcd/glcd.h"
 1912               		.file 7 "glcd/unit_tests.h"
 1913               		.file 8 "/usr/avr/include/avr/pgmspace.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 graphics.c
     /tmp/ccSKQbl4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSKQbl4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSKQbl4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSKQbl4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSKQbl4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSKQbl4.s:12     .text:0000000000000000 glcd_set_pixel
     /tmp/ccSKQbl4.s:94     .text:000000000000004c glcd_get_pixel
     /tmp/ccSKQbl4.s:158    .text:0000000000000086 glcd_invert_pixel
     /tmp/ccSKQbl4.s:243    .text:00000000000000d2 glcd_draw_line
     /tmp/ccSKQbl4.s:518    .text:00000000000001ac glcd_fill_rect
     /tmp/ccSKQbl4.s:699    .text:0000000000000240 glcd_draw_rect
     /tmp/ccSKQbl4.s:876    .text:00000000000002e4 glcd_draw_rect_thick
     /tmp/ccSKQbl4.s:1113   .text:00000000000003c4 glcd_draw_rect_shadow
     /tmp/ccSKQbl4.s:1196   .text:000000000000040a glcd_draw_circle
     /tmp/ccSKQbl4.s:1454   .text:000000000000051a glcd_fill_circle
     /tmp/ccSKQbl4.s:1774   .text:0000000000000642 glcd_invert_area
     /tmp/ccSKQbl4.s:1881   .text:0000000000000694 glcd_draw_bitmap

UNDEFINED SYMBOLS
glcd_buffer
glcd_update_bbox
glcd_buffer_selected
memcpy_P
glcd_bbox_refresh
