   1               		.file	"fat.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	fat_clear_cluster_callback:
  12               	.LVL0:
  13               	.LFB8:
  14               		.file 1 "fat.c"
   1:fat.c         **** 
   2:fat.c         **** /* 
   3:fat.c         ****  * Copyright (c) 2006-2012 by Roland Riegel <feedback@roland-riegel.de>
   4:fat.c         ****  *
   5:fat.c         ****  * This file is free software; you can redistribute it and/or modify
   6:fat.c         ****  * it under the terms of either the GNU General Public License version 2
   7:fat.c         ****  * or the GNU Lesser General Public License version 2.1, both as
   8:fat.c         ****  * published by the Free Software Foundation.
   9:fat.c         ****  */
  10:fat.c         **** 
  11:fat.c         **** #include "byteordering.h"
  12:fat.c         **** #include "partition.h"
  13:fat.c         **** #include "fat.h"
  14:fat.c         **** #include "fat_config.h"
  15:fat.c         **** #include "sd-reader_config.h"
  16:fat.c         **** 
  17:fat.c         **** #include <string.h>
  18:fat.c         **** 
  19:fat.c         **** #if USE_DYNAMIC_MEMORY
  20:fat.c         ****     #include <stdlib.h>
  21:fat.c         **** #endif
  22:fat.c         **** 
  23:fat.c         **** /**
  24:fat.c         ****  * \addtogroup fat FAT support
  25:fat.c         ****  *
  26:fat.c         ****  * This module implements FAT16/FAT32 read and write access.
  27:fat.c         ****  * 
  28:fat.c         ****  * The following features are supported:
  29:fat.c         ****  * - File names up to 31 characters long.
  30:fat.c         ****  * - Unlimited depth of subdirectories.
  31:fat.c         ****  * - Short 8.3 and long filenames.
  32:fat.c         ****  * - Creating and deleting files.
  33:fat.c         ****  * - Reading and writing from and to files.
  34:fat.c         ****  * - File resizing.
  35:fat.c         ****  * - File sizes of up to 4 gigabytes.
  36:fat.c         ****  * 
  37:fat.c         ****  * @{
  38:fat.c         ****  */
  39:fat.c         **** /**
  40:fat.c         ****  * \file
  41:fat.c         ****  * FAT implementation (license: GPLv2 or LGPLv2.1)
  42:fat.c         ****  *
  43:fat.c         ****  * \author Roland Riegel
  44:fat.c         ****  */
  45:fat.c         **** 
  46:fat.c         **** /**
  47:fat.c         ****  * \addtogroup fat_config FAT configuration
  48:fat.c         ****  * Preprocessor defines to configure the FAT implementation.
  49:fat.c         ****  */
  50:fat.c         **** 
  51:fat.c         **** /**
  52:fat.c         ****  * \addtogroup fat_fs FAT access
  53:fat.c         ****  * Basic functions for handling a FAT filesystem.
  54:fat.c         ****  */
  55:fat.c         **** 
  56:fat.c         **** /**
  57:fat.c         ****  * \addtogroup fat_file FAT file functions
  58:fat.c         ****  * Functions for managing files.
  59:fat.c         ****  */
  60:fat.c         **** 
  61:fat.c         **** /**
  62:fat.c         ****  * \addtogroup fat_dir FAT directory functions
  63:fat.c         ****  * Functions for managing directories.
  64:fat.c         ****  */
  65:fat.c         **** 
  66:fat.c         **** /**
  67:fat.c         ****  * @}
  68:fat.c         ****  */
  69:fat.c         **** 
  70:fat.c         **** #define FAT16_CLUSTER_FREE 0x0000
  71:fat.c         **** #define FAT16_CLUSTER_RESERVED_MIN 0xfff0
  72:fat.c         **** #define FAT16_CLUSTER_RESERVED_MAX 0xfff6
  73:fat.c         **** #define FAT16_CLUSTER_BAD 0xfff7
  74:fat.c         **** #define FAT16_CLUSTER_LAST_MIN 0xfff8
  75:fat.c         **** #define FAT16_CLUSTER_LAST_MAX 0xffff
  76:fat.c         **** 
  77:fat.c         **** #define FAT32_CLUSTER_FREE 0x00000000
  78:fat.c         **** #define FAT32_CLUSTER_RESERVED_MIN 0x0ffffff0
  79:fat.c         **** #define FAT32_CLUSTER_RESERVED_MAX 0x0ffffff6
  80:fat.c         **** #define FAT32_CLUSTER_BAD 0x0ffffff7
  81:fat.c         **** #define FAT32_CLUSTER_LAST_MIN 0x0ffffff8
  82:fat.c         **** #define FAT32_CLUSTER_LAST_MAX 0x0fffffff
  83:fat.c         **** 
  84:fat.c         **** #define FAT_DIRENTRY_DELETED 0xe5
  85:fat.c         **** #define FAT_DIRENTRY_LFNLAST (1 << 6)
  86:fat.c         **** #define FAT_DIRENTRY_LFNSEQMASK ((1 << 6) - 1)
  87:fat.c         **** 
  88:fat.c         **** /* Each entry within the directory table has a size of 32 bytes
  89:fat.c         ****  * and either contains a 8.3 DOS-style file name or a part of a
  90:fat.c         ****  * long file name, which may consist of several directory table
  91:fat.c         ****  * entries at once.
  92:fat.c         ****  *
  93:fat.c         ****  * multi-byte integer values are stored little-endian!
  94:fat.c         ****  *
  95:fat.c         ****  * 8.3 file name entry:
  96:fat.c         ****  * ====================
  97:fat.c         ****  * offset  length  description
  98:fat.c         ****  *      0       8  name (space padded)
  99:fat.c         ****  *      8       3  extension (space padded)
 100:fat.c         ****  *     11       1  attributes (FAT_ATTRIB_*)
 101:fat.c         ****  *
 102:fat.c         ****  * long file name (lfn) entry ordering for a single file name:
 103:fat.c         ****  * ===========================================================
 104:fat.c         ****  * LFN entry n
 105:fat.c         ****  *     ...
 106:fat.c         ****  * LFN entry 2
 107:fat.c         ****  * LFN entry 1
 108:fat.c         ****  * 8.3 entry (see above)
 109:fat.c         ****  * 
 110:fat.c         ****  * lfn entry:
 111:fat.c         ****  * ==========
 112:fat.c         ****  * offset  length  description
 113:fat.c         ****  *      0       1  ordinal field
 114:fat.c         ****  *      1       2  unicode character 1
 115:fat.c         ****  *      3       3  unicode character 2
 116:fat.c         ****  *      5       3  unicode character 3
 117:fat.c         ****  *      7       3  unicode character 4
 118:fat.c         ****  *      9       3  unicode character 5
 119:fat.c         ****  *     11       1  attribute (always 0x0f)
 120:fat.c         ****  *     12       1  type (reserved, always 0)
 121:fat.c         ****  *     13       1  checksum
 122:fat.c         ****  *     14       2  unicode character 6
 123:fat.c         ****  *     16       2  unicode character 7
 124:fat.c         ****  *     18       2  unicode character 8
 125:fat.c         ****  *     20       2  unicode character 9
 126:fat.c         ****  *     22       2  unicode character 10
 127:fat.c         ****  *     24       2  unicode character 11
 128:fat.c         ****  *     26       2  cluster (unused, always 0)
 129:fat.c         ****  *     28       2  unicode character 12
 130:fat.c         ****  *     30       2  unicode character 13
 131:fat.c         ****  * 
 132:fat.c         ****  * The ordinal field contains a descending number, from n to 1.
 133:fat.c         ****  * For the n'th lfn entry the ordinal field is or'ed with 0x40.
 134:fat.c         ****  * For deleted lfn entries, the ordinal field is set to 0xe5.
 135:fat.c         ****  */
 136:fat.c         **** 
 137:fat.c         **** struct fat_header_struct
 138:fat.c         **** {
 139:fat.c         ****     offset_t size;
 140:fat.c         **** 
 141:fat.c         ****     offset_t fat_offset;
 142:fat.c         ****     uint32_t fat_size;
 143:fat.c         **** 
 144:fat.c         ****     uint16_t sector_size;
 145:fat.c         ****     uint16_t cluster_size;
 146:fat.c         **** 
 147:fat.c         ****     offset_t cluster_zero_offset;
 148:fat.c         **** 
 149:fat.c         ****     offset_t root_dir_offset;
 150:fat.c         **** #if FAT_FAT32_SUPPORT
 151:fat.c         ****     cluster_t root_dir_cluster;
 152:fat.c         **** #endif
 153:fat.c         **** };
 154:fat.c         **** 
 155:fat.c         **** struct fat_fs_struct
 156:fat.c         **** {
 157:fat.c         ****     struct partition_struct* partition;
 158:fat.c         ****     struct fat_header_struct header;
 159:fat.c         ****     cluster_t cluster_free;
 160:fat.c         **** };
 161:fat.c         **** 
 162:fat.c         **** struct fat_file_struct
 163:fat.c         **** {
 164:fat.c         ****     struct fat_fs_struct* fs;
 165:fat.c         ****     struct fat_dir_entry_struct dir_entry;
 166:fat.c         ****     offset_t pos;
 167:fat.c         ****     cluster_t pos_cluster;
 168:fat.c         **** };
 169:fat.c         **** 
 170:fat.c         **** struct fat_dir_struct
 171:fat.c         **** {
 172:fat.c         ****     struct fat_fs_struct* fs;
 173:fat.c         ****     struct fat_dir_entry_struct dir_entry;
 174:fat.c         ****     cluster_t entry_cluster;
 175:fat.c         ****     uint16_t entry_offset;
 176:fat.c         **** };
 177:fat.c         **** 
 178:fat.c         **** struct fat_read_dir_callback_arg
 179:fat.c         **** {
 180:fat.c         ****     struct fat_dir_entry_struct* dir_entry;
 181:fat.c         ****     uintptr_t bytes_read;
 182:fat.c         **** #if FAT_LFN_SUPPORT
 183:fat.c         ****     uint8_t checksum;
 184:fat.c         **** #endif
 185:fat.c         ****     uint8_t finished;
 186:fat.c         **** };
 187:fat.c         **** 
 188:fat.c         **** struct fat_usage_count_callback_arg
 189:fat.c         **** {
 190:fat.c         ****     cluster_t cluster_count;
 191:fat.c         ****     uintptr_t buffer_size;
 192:fat.c         **** };
 193:fat.c         **** 
 194:fat.c         **** #if !USE_DYNAMIC_MEMORY
 195:fat.c         **** static struct fat_fs_struct fat_fs_handles[FAT_FS_COUNT];
 196:fat.c         **** static struct fat_file_struct fat_file_handles[FAT_FILE_COUNT];
 197:fat.c         **** static struct fat_dir_struct fat_dir_handles[FAT_DIR_COUNT];
 198:fat.c         **** #endif
 199:fat.c         **** 
 200:fat.c         **** static uint8_t fat_read_header(struct fat_fs_struct* fs);
 201:fat.c         **** static cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num);
 202:fat.c         **** static offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num);
 203:fat.c         **** static uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p);
 204:fat.c         **** #if FAT_LFN_SUPPORT
 205:fat.c         **** static uint8_t fat_calc_83_checksum(const uint8_t* file_name_83);
 206:fat.c         **** #endif
 207:fat.c         **** 
 208:fat.c         **** static uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p);
 209:fat.c         **** #if FAT_FAT32_SUPPORT
 210:fat.c         **** static uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p);
 211:fat.c         **** #endif
 212:fat.c         **** 
 213:fat.c         **** #if FAT_WRITE_SUPPORT
 214:fat.c         **** static cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t cou
 215:fat.c         **** static uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num);
 216:fat.c         **** static uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num);
 217:fat.c         **** static uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num);
 218:fat.c         **** static uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p);
 219:fat.c         **** static offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct
 220:fat.c         **** static uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir
 221:fat.c         **** #if FAT_DATETIME_SUPPORT
 222:fat.c         **** static void fat_set_file_modification_date(struct fat_dir_entry_struct* dir_entry, uint16_t year, u
 223:fat.c         **** static void fat_set_file_modification_time(struct fat_dir_entry_struct* dir_entry, uint8_t hour, ui
 224:fat.c         **** #endif
 225:fat.c         **** #endif
 226:fat.c         **** 
 227:fat.c         **** /**
 228:fat.c         ****  * \ingroup fat_fs
 229:fat.c         ****  * Opens a FAT filesystem.
 230:fat.c         ****  *
 231:fat.c         ****  * \param[in] partition Discriptor of partition on which the filesystem resides.
 232:fat.c         ****  * \returns 0 on error, a FAT filesystem descriptor on success.
 233:fat.c         ****  * \see fat_close
 234:fat.c         ****  */
 235:fat.c         **** struct fat_fs_struct* fat_open(struct partition_struct* partition)
 236:fat.c         **** {
 237:fat.c         ****     if(!partition ||
 238:fat.c         **** #if FAT_WRITE_SUPPORT
 239:fat.c         ****        !partition->device_write ||
 240:fat.c         ****        !partition->device_write_interval
 241:fat.c         **** #else
 242:fat.c         ****        0
 243:fat.c         **** #endif
 244:fat.c         ****       )
 245:fat.c         ****         return 0;
 246:fat.c         **** 
 247:fat.c         **** #if USE_DYNAMIC_MEMORY
 248:fat.c         ****     struct fat_fs_struct* fs = malloc(sizeof(*fs));
 249:fat.c         ****     if(!fs)
 250:fat.c         ****         return 0;
 251:fat.c         **** #else
 252:fat.c         ****     struct fat_fs_struct* fs = fat_fs_handles;
 253:fat.c         ****     uint8_t i;
 254:fat.c         ****     for(i = 0; i < FAT_FS_COUNT; ++i)
 255:fat.c         ****     {
 256:fat.c         ****         if(!fs->partition)
 257:fat.c         ****             break;
 258:fat.c         **** 
 259:fat.c         ****         ++fs;
 260:fat.c         ****     }
 261:fat.c         ****     if(i >= FAT_FS_COUNT)
 262:fat.c         ****         return 0;
 263:fat.c         **** #endif
 264:fat.c         **** 
 265:fat.c         ****     memset(fs, 0, sizeof(*fs));
 266:fat.c         **** 
 267:fat.c         ****     fs->partition = partition;
 268:fat.c         ****     if(!fat_read_header(fs))
 269:fat.c         ****     {
 270:fat.c         **** #if USE_DYNAMIC_MEMORY
 271:fat.c         ****         free(fs);
 272:fat.c         **** #else
 273:fat.c         ****         fs->partition = 0;
 274:fat.c         **** #endif
 275:fat.c         ****         return 0;
 276:fat.c         ****     }
 277:fat.c         ****     
 278:fat.c         ****     return fs;
 279:fat.c         **** }
 280:fat.c         **** 
 281:fat.c         **** /**
 282:fat.c         ****  * \ingroup fat_fs
 283:fat.c         ****  * Closes a FAT filesystem.
 284:fat.c         ****  *
 285:fat.c         ****  * When this function returns, the given filesystem descriptor
 286:fat.c         ****  * will be invalid.
 287:fat.c         ****  *
 288:fat.c         ****  * \param[in] fs The filesystem to close.
 289:fat.c         ****  * \see fat_open
 290:fat.c         ****  */
 291:fat.c         **** void fat_close(struct fat_fs_struct* fs)
 292:fat.c         **** {
 293:fat.c         ****     if(!fs)
 294:fat.c         ****         return;
 295:fat.c         **** 
 296:fat.c         **** #if USE_DYNAMIC_MEMORY
 297:fat.c         ****     free(fs);
 298:fat.c         **** #else
 299:fat.c         ****     fs->partition = 0;
 300:fat.c         **** #endif
 301:fat.c         **** }
 302:fat.c         **** 
 303:fat.c         **** /**
 304:fat.c         ****  * \ingroup fat_fs
 305:fat.c         ****  * Reads and parses the header of a FAT filesystem.
 306:fat.c         ****  *
 307:fat.c         ****  * \param[in,out] fs The filesystem for which to parse the header.
 308:fat.c         ****  * \returns 0 on failure, 1 on success.
 309:fat.c         ****  */
 310:fat.c         **** uint8_t fat_read_header(struct fat_fs_struct* fs)
 311:fat.c         **** {
 312:fat.c         ****     if(!fs)
 313:fat.c         ****         return 0;
 314:fat.c         **** 
 315:fat.c         ****     struct partition_struct* partition = fs->partition;
 316:fat.c         ****     if(!partition)
 317:fat.c         ****         return 0;
 318:fat.c         **** 
 319:fat.c         ****     /* read fat parameters */
 320:fat.c         **** #if FAT_FAT32_SUPPORT
 321:fat.c         ****     uint8_t buffer[37];
 322:fat.c         **** #else
 323:fat.c         ****     uint8_t buffer[25];
 324:fat.c         **** #endif
 325:fat.c         ****     offset_t partition_offset = (offset_t) partition->offset * 512;
 326:fat.c         ****     if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
 327:fat.c         ****         return 0;
 328:fat.c         **** 
 329:fat.c         ****     uint16_t bytes_per_sector = read16(&buffer[0x00]);
 330:fat.c         ****     uint16_t reserved_sectors = read16(&buffer[0x03]);
 331:fat.c         ****     uint8_t sectors_per_cluster = buffer[0x02];
 332:fat.c         ****     uint8_t fat_copies = buffer[0x05];
 333:fat.c         ****     uint16_t max_root_entries = read16(&buffer[0x06]);
 334:fat.c         ****     uint16_t sector_count_16 = read16(&buffer[0x08]);
 335:fat.c         ****     uint16_t sectors_per_fat = read16(&buffer[0x0b]);
 336:fat.c         ****     uint32_t sector_count = read32(&buffer[0x15]);
 337:fat.c         **** #if FAT_FAT32_SUPPORT
 338:fat.c         ****     uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
 339:fat.c         ****     uint32_t cluster_root_dir = read32(&buffer[0x21]);
 340:fat.c         **** #endif
 341:fat.c         **** 
 342:fat.c         ****     if(sector_count == 0)
 343:fat.c         ****     {
 344:fat.c         ****         if(sector_count_16 == 0)
 345:fat.c         ****             /* illegal volume size */
 346:fat.c         ****             return 0;
 347:fat.c         ****         else
 348:fat.c         ****             sector_count = sector_count_16;
 349:fat.c         ****     }
 350:fat.c         **** #if FAT_FAT32_SUPPORT
 351:fat.c         ****     if(sectors_per_fat != 0)
 352:fat.c         ****         sectors_per_fat32 = sectors_per_fat;
 353:fat.c         ****     else if(sectors_per_fat32 == 0)
 354:fat.c         ****         /* this is neither FAT16 nor FAT32 */
 355:fat.c         ****         return 0;
 356:fat.c         **** #else
 357:fat.c         ****     if(sectors_per_fat == 0)
 358:fat.c         ****         /* this is not a FAT16 */
 359:fat.c         ****         return 0;
 360:fat.c         **** #endif
 361:fat.c         **** 
 362:fat.c         ****     /* determine the type of FAT we have here */
 363:fat.c         ****     uint32_t data_sector_count = sector_count
 364:fat.c         ****                                  - reserved_sectors
 365:fat.c         **** #if FAT_FAT32_SUPPORT
 366:fat.c         ****                                  - sectors_per_fat32 * fat_copies
 367:fat.c         **** #else
 368:fat.c         ****                                  - (uint32_t) sectors_per_fat * fat_copies
 369:fat.c         **** #endif
 370:fat.c         ****                                  - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sect
 371:fat.c         ****     uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
 372:fat.c         ****     if(data_cluster_count < 4085)
 373:fat.c         ****         /* this is a FAT12, not supported */
 374:fat.c         ****         return 0;
 375:fat.c         ****     else if(data_cluster_count < 65525)
 376:fat.c         ****         /* this is a FAT16 */
 377:fat.c         ****         partition->type = PARTITION_TYPE_FAT16;
 378:fat.c         ****     else
 379:fat.c         ****         /* this is a FAT32 */
 380:fat.c         ****         partition->type = PARTITION_TYPE_FAT32;
 381:fat.c         **** 
 382:fat.c         ****     /* fill header information */
 383:fat.c         ****     struct fat_header_struct* header = &fs->header;
 384:fat.c         ****     memset(header, 0, sizeof(*header));
 385:fat.c         ****     
 386:fat.c         ****     header->size = (offset_t) sector_count * bytes_per_sector;
 387:fat.c         **** 
 388:fat.c         ****     header->fat_offset = /* jump to partition */
 389:fat.c         ****                          partition_offset +
 390:fat.c         ****                          /* jump to fat */
 391:fat.c         ****                          (offset_t) reserved_sectors * bytes_per_sector;
 392:fat.c         ****     header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4)
 393:fat.c         **** 
 394:fat.c         ****     header->sector_size = bytes_per_sector;
 395:fat.c         ****     header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
 396:fat.c         **** 
 397:fat.c         **** #if FAT_FAT32_SUPPORT
 398:fat.c         ****     if(partition->type == PARTITION_TYPE_FAT16)
 399:fat.c         **** #endif
 400:fat.c         ****     {
 401:fat.c         ****         header->root_dir_offset = /* jump to fats */
 402:fat.c         ****                                   header->fat_offset +
 403:fat.c         ****                                   /* jump to root directory entries */
 404:fat.c         ****                                   (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
 405:fat.c         **** 
 406:fat.c         ****         header->cluster_zero_offset = /* jump to root directory entries */
 407:fat.c         ****                                       header->root_dir_offset +
 408:fat.c         ****                                       /* skip root directory entries */
 409:fat.c         ****                                       (offset_t) max_root_entries * 32;
 410:fat.c         ****     }
 411:fat.c         **** #if FAT_FAT32_SUPPORT
 412:fat.c         ****     else
 413:fat.c         ****     {
 414:fat.c         ****         header->cluster_zero_offset = /* jump to fats */
 415:fat.c         ****                                       header->fat_offset +
 416:fat.c         ****                                       /* skip fats */
 417:fat.c         ****                                       (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
 418:fat.c         **** 
 419:fat.c         ****         header->root_dir_cluster = cluster_root_dir;
 420:fat.c         ****     }
 421:fat.c         **** #endif
 422:fat.c         **** 
 423:fat.c         ****     return 1;
 424:fat.c         **** }
 425:fat.c         **** 
 426:fat.c         **** /**
 427:fat.c         ****  * \ingroup fat_fs
 428:fat.c         ****  * Retrieves the next following cluster of a given cluster.
 429:fat.c         ****  *
 430:fat.c         ****  * Using the filesystem file allocation table, this function returns
 431:fat.c         ****  * the number of the cluster containing the data directly following
 432:fat.c         ****  * the data within the cluster with the given number.
 433:fat.c         ****  *
 434:fat.c         ****  * \param[in] fs The filesystem for which to determine the next cluster.
 435:fat.c         ****  * \param[in] cluster_num The number of the cluster for which to determine its successor.
 436:fat.c         ****  * \returns The wanted cluster number, or 0 on error.
 437:fat.c         ****  */
 438:fat.c         **** cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
 439:fat.c         **** {
 440:fat.c         ****     if(!fs || cluster_num < 2)
 441:fat.c         ****         return 0;
 442:fat.c         **** 
 443:fat.c         **** #if FAT_FAT32_SUPPORT
 444:fat.c         ****     if(fs->partition->type == PARTITION_TYPE_FAT32)
 445:fat.c         ****     {
 446:fat.c         ****         /* read appropriate fat entry */
 447:fat.c         ****         uint32_t fat_entry;
 448:fat.c         ****         if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_
 449:fat.c         ****             return 0;
 450:fat.c         **** 
 451:fat.c         ****         /* determine next cluster from fat */
 452:fat.c         ****         cluster_num = ltoh32(fat_entry);
 453:fat.c         ****         
 454:fat.c         ****         if(cluster_num == FAT32_CLUSTER_FREE ||
 455:fat.c         ****            cluster_num == FAT32_CLUSTER_BAD ||
 456:fat.c         ****            (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX)
 457:fat.c         ****            (cluster_num >= FAT32_CLUSTER_LAST_MIN && cluster_num <= FAT32_CLUSTER_LAST_MAX))
 458:fat.c         ****             return 0;
 459:fat.c         ****     }
 460:fat.c         ****     else
 461:fat.c         **** #endif
 462:fat.c         ****     {
 463:fat.c         ****         /* read appropriate fat entry */
 464:fat.c         ****         uint16_t fat_entry;
 465:fat.c         ****         if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_
 466:fat.c         ****             return 0;
 467:fat.c         **** 
 468:fat.c         ****         /* determine next cluster from fat */
 469:fat.c         ****         cluster_num = ltoh16(fat_entry);
 470:fat.c         ****         
 471:fat.c         ****         if(cluster_num == FAT16_CLUSTER_FREE ||
 472:fat.c         ****            cluster_num == FAT16_CLUSTER_BAD ||
 473:fat.c         ****            (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX)
 474:fat.c         ****            (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
 475:fat.c         ****             return 0;
 476:fat.c         ****     }
 477:fat.c         **** 
 478:fat.c         ****     return cluster_num;
 479:fat.c         **** }
 480:fat.c         **** 
 481:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
 482:fat.c         **** /**
 483:fat.c         ****  * \ingroup fat_fs
 484:fat.c         ****  * Appends a new cluster chain to an existing one.
 485:fat.c         ****  *
 486:fat.c         ****  * Set cluster_num to zero to create a completely new one.
 487:fat.c         ****  *
 488:fat.c         ****  * \param[in] fs The file system on which to operate.
 489:fat.c         ****  * \param[in] cluster_num The cluster to which to append the new chain.
 490:fat.c         ****  * \param[in] count The number of clusters to allocate.
 491:fat.c         ****  * \returns 0 on failure, the number of the first new cluster on success.
 492:fat.c         ****  */
 493:fat.c         **** cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
 494:fat.c         **** {
 495:fat.c         ****     if(!fs)
 496:fat.c         ****         return 0;
 497:fat.c         **** 
 498:fat.c         ****     device_read_t device_read = fs->partition->device_read;
 499:fat.c         ****     device_write_t device_write = fs->partition->device_write;
 500:fat.c         ****     offset_t fat_offset = fs->header.fat_offset;
 501:fat.c         ****     cluster_t count_left = count;
 502:fat.c         ****     cluster_t cluster_current = fs->cluster_free;
 503:fat.c         ****     cluster_t cluster_next = 0;
 504:fat.c         ****     cluster_t cluster_count;
 505:fat.c         ****     uint16_t fat_entry16;
 506:fat.c         **** #if FAT_FAT32_SUPPORT
 507:fat.c         ****     uint32_t fat_entry32;
 508:fat.c         ****     uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
 509:fat.c         **** 
 510:fat.c         ****     if(is_fat32)
 511:fat.c         ****         cluster_count = fs->header.fat_size / sizeof(fat_entry32);
 512:fat.c         ****     else
 513:fat.c         **** #endif
 514:fat.c         ****         cluster_count = fs->header.fat_size / sizeof(fat_entry16);
 515:fat.c         **** 
 516:fat.c         ****     fs->cluster_free = 0;
 517:fat.c         ****     for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current
 518:fat.c         ****     {
 519:fat.c         ****         if(cluster_current < 2 || cluster_current >= cluster_count)
 520:fat.c         ****             cluster_current = 2;
 521:fat.c         **** 
 522:fat.c         **** #if FAT_FAT32_SUPPORT
 523:fat.c         ****         if(is_fat32)
 524:fat.c         ****         {
 525:fat.c         ****             if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t
 526:fat.c         ****                 return 0;
 527:fat.c         ****         }
 528:fat.c         ****         else
 529:fat.c         **** #endif
 530:fat.c         ****         {
 531:fat.c         ****             if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t
 532:fat.c         ****                 return 0;
 533:fat.c         ****         }
 534:fat.c         **** 
 535:fat.c         **** #if FAT_FAT32_SUPPORT
 536:fat.c         ****         if(is_fat32)
 537:fat.c         ****         {
 538:fat.c         ****             /* check if this is a free cluster */
 539:fat.c         ****             if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
 540:fat.c         ****                 continue;
 541:fat.c         **** 
 542:fat.c         ****             /* If we don't need this free cluster for the
 543:fat.c         ****              * current allocation, we keep it in mind for
 544:fat.c         ****              * the next time.
 545:fat.c         ****              */
 546:fat.c         ****             if(count_left == 0)
 547:fat.c         ****             {
 548:fat.c         ****                 fs->cluster_free = cluster_current;
 549:fat.c         ****                 break;
 550:fat.c         ****             }
 551:fat.c         **** 
 552:fat.c         ****             /* allocate cluster */
 553:fat.c         ****             if(cluster_next == 0)
 554:fat.c         ****                 fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
 555:fat.c         ****             else
 556:fat.c         ****                 fat_entry32 = htol32(cluster_next);
 557:fat.c         **** 
 558:fat.c         ****             if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_
 559:fat.c         ****                 break;
 560:fat.c         ****         }
 561:fat.c         ****         else
 562:fat.c         **** #endif
 563:fat.c         ****         {
 564:fat.c         ****             /* check if this is a free cluster */
 565:fat.c         ****             if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
 566:fat.c         ****                 continue;
 567:fat.c         **** 
 568:fat.c         ****             /* If we don't need this free cluster for the
 569:fat.c         ****              * current allocation, we keep it in mind for
 570:fat.c         ****              * the next time.
 571:fat.c         ****              */
 572:fat.c         ****             if(count_left == 0)
 573:fat.c         ****             {
 574:fat.c         ****                 fs->cluster_free = cluster_current;
 575:fat.c         ****                 break;
 576:fat.c         ****             }
 577:fat.c         **** 
 578:fat.c         ****             /* allocate cluster */
 579:fat.c         ****             if(cluster_next == 0)
 580:fat.c         ****                 fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
 581:fat.c         ****             else
 582:fat.c         ****                 fat_entry16 = htol16((uint16_t) cluster_next);
 583:fat.c         **** 
 584:fat.c         ****             if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_
 585:fat.c         ****                 break;
 586:fat.c         ****         }
 587:fat.c         **** 
 588:fat.c         ****         cluster_next = cluster_current;
 589:fat.c         ****         --count_left;
 590:fat.c         ****     }
 591:fat.c         **** 
 592:fat.c         ****     do
 593:fat.c         ****     {
 594:fat.c         ****         if(count_left > 0)
 595:fat.c         ****             break;
 596:fat.c         **** 
 597:fat.c         ****         /* We allocated a new cluster chain. Now join
 598:fat.c         ****          * it with the existing one (if any).
 599:fat.c         ****          */
 600:fat.c         ****         if(cluster_num >= 2)
 601:fat.c         ****         {
 602:fat.c         **** #if FAT_FAT32_SUPPORT
 603:fat.c         ****             if(is_fat32)
 604:fat.c         ****             {
 605:fat.c         ****                 fat_entry32 = htol32(cluster_next);
 606:fat.c         **** 
 607:fat.c         ****                 if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry32), (uint8_
 608:fat.c         ****                     break;
 609:fat.c         ****             }
 610:fat.c         ****             else
 611:fat.c         **** #endif
 612:fat.c         ****             {
 613:fat.c         ****                 fat_entry16 = htol16((uint16_t) cluster_next);
 614:fat.c         **** 
 615:fat.c         ****                 if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_
 616:fat.c         ****                     break;
 617:fat.c         ****             }
 618:fat.c         ****         }
 619:fat.c         **** 
 620:fat.c         ****         return cluster_next;
 621:fat.c         **** 
 622:fat.c         ****     } while(0);
 623:fat.c         **** 
 624:fat.c         ****     /* No space left on device or writing error.
 625:fat.c         ****      * Free up all clusters already allocated.
 626:fat.c         ****      */
 627:fat.c         ****     fat_free_clusters(fs, cluster_next);
 628:fat.c         **** 
 629:fat.c         ****     return 0;
 630:fat.c         **** }
 631:fat.c         **** #endif
 632:fat.c         **** 
 633:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
 634:fat.c         **** /**
 635:fat.c         ****  * \ingroup fat_fs
 636:fat.c         ****  * Frees a cluster chain, or a part thereof.
 637:fat.c         ****  *
 638:fat.c         ****  * Marks the specified cluster and all clusters which are sequentially
 639:fat.c         ****  * referenced by it as free. They may then be used again for future
 640:fat.c         ****  * file allocations.
 641:fat.c         ****  *
 642:fat.c         ****  * \note If this function is used for freeing just a part of a cluster
 643:fat.c         ****  *       chain, the new end of the chain is not correctly terminated
 644:fat.c         ****  *       within the FAT. Use fat_terminate_clusters() instead.
 645:fat.c         ****  *
 646:fat.c         ****  * \param[in] fs The filesystem on which to operate.
 647:fat.c         ****  * \param[in] cluster_num The starting cluster of the chain which to free.
 648:fat.c         ****  * \returns 0 on failure, 1 on success.
 649:fat.c         ****  * \see fat_terminate_clusters
 650:fat.c         ****  */
 651:fat.c         **** uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
 652:fat.c         **** {
 653:fat.c         ****     if(!fs || cluster_num < 2)
 654:fat.c         ****         return 0;
 655:fat.c         **** 
 656:fat.c         ****     offset_t fat_offset = fs->header.fat_offset;
 657:fat.c         **** #if FAT_FAT32_SUPPORT
 658:fat.c         ****     if(fs->partition->type == PARTITION_TYPE_FAT32)
 659:fat.c         ****     {
 660:fat.c         ****         uint32_t fat_entry;
 661:fat.c         ****         while(cluster_num)
 662:fat.c         ****         {
 663:fat.c         ****             if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry),
 664:fat.c         ****                 return 0;
 665:fat.c         **** 
 666:fat.c         ****             /* get next cluster of current cluster before freeing current cluster */
 667:fat.c         ****             uint32_t cluster_num_next = ltoh32(fat_entry);
 668:fat.c         **** 
 669:fat.c         ****             if(cluster_num_next == FAT32_CLUSTER_FREE)
 670:fat.c         ****                 return 1;
 671:fat.c         ****             if(cluster_num_next == FAT32_CLUSTER_BAD ||
 672:fat.c         ****                (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
 673:fat.c         ****                 cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
 674:fat.c         ****                )
 675:fat.c         ****               )
 676:fat.c         ****                 return 0;
 677:fat.c         ****             if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST
 678:fat.c         ****                 cluster_num_next = 0;
 679:fat.c         **** 
 680:fat.c         ****             /* We know we will free the cluster, so remember it as
 681:fat.c         ****              * free for the next allocation.
 682:fat.c         ****              */
 683:fat.c         ****             if(!fs->cluster_free)
 684:fat.c         ****                 fs->cluster_free = cluster_num;
 685:fat.c         **** 
 686:fat.c         ****             /* free cluster */
 687:fat.c         ****             fat_entry = HTOL32(FAT32_CLUSTER_FREE);
 688:fat.c         ****             fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (u
 689:fat.c         **** 
 690:fat.c         ****             /* We continue in any case here, even if freeing the cluster failed.
 691:fat.c         ****              * The cluster is lost, but maybe we can still free up some later ones.
 692:fat.c         ****              */
 693:fat.c         **** 
 694:fat.c         ****             cluster_num = cluster_num_next;
 695:fat.c         ****         }
 696:fat.c         ****     }
 697:fat.c         ****     else
 698:fat.c         **** #endif
 699:fat.c         ****     {
 700:fat.c         ****         uint16_t fat_entry;
 701:fat.c         ****         while(cluster_num)
 702:fat.c         ****         {
 703:fat.c         ****             if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry),
 704:fat.c         ****                 return 0;
 705:fat.c         **** 
 706:fat.c         ****             /* get next cluster of current cluster before freeing current cluster */
 707:fat.c         ****             uint16_t cluster_num_next = ltoh16(fat_entry);
 708:fat.c         **** 
 709:fat.c         ****             if(cluster_num_next == FAT16_CLUSTER_FREE)
 710:fat.c         ****                 return 1;
 711:fat.c         ****             if(cluster_num_next == FAT16_CLUSTER_BAD ||
 712:fat.c         ****                (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
 713:fat.c         ****                 cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
 714:fat.c         ****                )
 715:fat.c         ****               )
 716:fat.c         ****                 return 0;
 717:fat.c         ****             if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST
 718:fat.c         ****                 cluster_num_next = 0;
 719:fat.c         **** 
 720:fat.c         ****             /* free cluster */
 721:fat.c         ****             fat_entry = HTOL16(FAT16_CLUSTER_FREE);
 722:fat.c         ****             fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (u
 723:fat.c         **** 
 724:fat.c         ****             /* We continue in any case here, even if freeing the cluster failed.
 725:fat.c         ****              * The cluster is lost, but maybe we can still free up some later ones.
 726:fat.c         ****              */
 727:fat.c         **** 
 728:fat.c         ****             cluster_num = cluster_num_next;
 729:fat.c         ****         }
 730:fat.c         ****     }
 731:fat.c         **** 
 732:fat.c         ****     return 1;
 733:fat.c         **** }
 734:fat.c         **** #endif
 735:fat.c         **** 
 736:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
 737:fat.c         **** /**
 738:fat.c         ****  * \ingroup fat_fs
 739:fat.c         ****  * Frees a part of a cluster chain and correctly terminates the rest.
 740:fat.c         ****  *
 741:fat.c         ****  * Marks the specified cluster as the new end of a cluster chain and
 742:fat.c         ****  * frees all following clusters.
 743:fat.c         ****  *
 744:fat.c         ****  * \param[in] fs The filesystem on which to operate.
 745:fat.c         ****  * \param[in] cluster_num The new end of the cluster chain.
 746:fat.c         ****  * \returns 0 on failure, 1 on success.
 747:fat.c         ****  * \see fat_free_clusters
 748:fat.c         ****  */
 749:fat.c         **** uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
 750:fat.c         **** {
 751:fat.c         ****     if(!fs || cluster_num < 2)
 752:fat.c         ****         return 0;
 753:fat.c         **** 
 754:fat.c         ****     /* fetch next cluster before overwriting the cluster entry */
 755:fat.c         ****     cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
 756:fat.c         **** 
 757:fat.c         ****     /* mark cluster as the last one */
 758:fat.c         **** #if FAT_FAT32_SUPPORT
 759:fat.c         ****     if(fs->partition->type == PARTITION_TYPE_FAT32)
 760:fat.c         ****     {
 761:fat.c         ****         uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
 762:fat.c         ****         if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat
 763:fat.c         ****             return 0;
 764:fat.c         ****     }
 765:fat.c         ****     else
 766:fat.c         **** #endif
 767:fat.c         ****     {
 768:fat.c         ****         uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
 769:fat.c         ****         if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat
 770:fat.c         ****             return 0;
 771:fat.c         ****     }
 772:fat.c         **** 
 773:fat.c         ****     /* free remaining clusters */
 774:fat.c         ****     if(cluster_num_next)
 775:fat.c         ****         return fat_free_clusters(fs, cluster_num_next);
 776:fat.c         ****     else
 777:fat.c         ****         return 1;
 778:fat.c         **** }
 779:fat.c         **** #endif
 780:fat.c         **** 
 781:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
 782:fat.c         **** /**
 783:fat.c         ****  * \ingroup fat_fs
 784:fat.c         ****  * Clears a single cluster.
 785:fat.c         ****  *
 786:fat.c         ****  * The complete cluster is filled with zeros.
 787:fat.c         ****  *
 788:fat.c         ****  * \param[in] fs The filesystem on which to operate.
 789:fat.c         ****  * \param[in] cluster_num The cluster to clear.
 790:fat.c         ****  * \returns 0 on failure, 1 on success.
 791:fat.c         ****  */
 792:fat.c         **** uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
 793:fat.c         **** {
 794:fat.c         ****     if(cluster_num < 2)
 795:fat.c         ****         return 0;
 796:fat.c         **** 
 797:fat.c         ****     offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
 798:fat.c         **** 
 799:fat.c         ****     uint8_t zero[16];
 800:fat.c         ****     memset(zero, 0, sizeof(zero));
 801:fat.c         ****     return fs->partition->device_write_interval(cluster_offset,
 802:fat.c         ****                                                 zero,
 803:fat.c         ****                                                 fs->header.cluster_size,
 804:fat.c         ****                                                 fat_clear_cluster_callback,
 805:fat.c         ****                                                 0
 806:fat.c         ****                                                );
 807:fat.c         **** }
 808:fat.c         **** #endif
 809:fat.c         **** 
 810:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
 811:fat.c         **** /**
 812:fat.c         ****  * \ingroup fat_fs
 813:fat.c         ****  * Callback function for clearing a cluster.
 814:fat.c         ****  */
 815:fat.c         **** uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
 816:fat.c         **** {
  15               		.loc 1 816 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 817:fat.c         ****     return 16;
  21               		.loc 1 817 5 view .LVU1
 818:fat.c         **** }
  22               		.loc 1 818 1 is_stmt 0 view .LVU2
  23 0000 80E1      		ldi r24,lo8(16)
  24 0002 90E0      		ldi r25,0
  25               	.LVL1:
  26               	/* epilogue start */
  27               		.loc 1 818 1 view .LVU3
  28 0004 0895      		ret
  29               		.cfi_endproc
  30               	.LFE8:
  33               	fat_calc_83_checksum:
  34               	.LVL2:
  35               	.LFB22:
 819:fat.c         **** #endif
 820:fat.c         **** 
 821:fat.c         **** /**
 822:fat.c         ****  * \ingroup fat_fs
 823:fat.c         ****  * Calculates the offset of the specified cluster.
 824:fat.c         ****  *
 825:fat.c         ****  * \param[in] fs The filesystem on which to operate.
 826:fat.c         ****  * \param[in] cluster_num The cluster whose offset to calculate.
 827:fat.c         ****  * \returns The cluster offset.
 828:fat.c         ****  */
 829:fat.c         **** offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
 830:fat.c         **** {
 831:fat.c         ****     if(!fs || cluster_num < 2)
 832:fat.c         ****         return 0;
 833:fat.c         **** 
 834:fat.c         ****     return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
 835:fat.c         **** }
 836:fat.c         **** 
 837:fat.c         **** /**
 838:fat.c         ****  * \ingroup fat_file
 839:fat.c         ****  * Retrieves the directory entry of a path.
 840:fat.c         ****  *
 841:fat.c         ****  * The given path may both describe a file or a directory.
 842:fat.c         ****  *
 843:fat.c         ****  * \param[in] fs The FAT filesystem on which to search.
 844:fat.c         ****  * \param[in] path The path of which to read the directory entry.
 845:fat.c         ****  * \param[out] dir_entry The directory entry to fill.
 846:fat.c         ****  * \returns 0 on failure, 1 on success.
 847:fat.c         ****  * \see fat_read_dir
 848:fat.c         ****  */
 849:fat.c         **** uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_
 850:fat.c         **** {
 851:fat.c         ****     if(!fs || !path || path[0] == '\0' || !dir_entry)
 852:fat.c         ****         return 0;
 853:fat.c         **** 
 854:fat.c         ****     if(path[0] == '/')
 855:fat.c         ****         ++path;
 856:fat.c         **** 
 857:fat.c         ****     /* begin with the root directory */
 858:fat.c         ****     memset(dir_entry, 0, sizeof(*dir_entry));
 859:fat.c         ****     dir_entry->attributes = FAT_ATTRIB_DIR;
 860:fat.c         **** 
 861:fat.c         ****     while(1)
 862:fat.c         ****     {
 863:fat.c         ****         if(path[0] == '\0')
 864:fat.c         ****             return 1;
 865:fat.c         **** 
 866:fat.c         ****         struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
 867:fat.c         ****         if(!dd)
 868:fat.c         ****             break;
 869:fat.c         **** 
 870:fat.c         ****         /* extract the next hierarchy we will search for */
 871:fat.c         ****         const char* sub_path = strchr(path, '/');
 872:fat.c         ****         uint8_t length_to_sep;
 873:fat.c         ****         if(sub_path)
 874:fat.c         ****         {
 875:fat.c         ****             length_to_sep = sub_path - path;
 876:fat.c         ****             ++sub_path;
 877:fat.c         ****         }
 878:fat.c         ****         else
 879:fat.c         ****         {
 880:fat.c         ****             length_to_sep = strlen(path);
 881:fat.c         ****             sub_path = path + length_to_sep;
 882:fat.c         ****         }
 883:fat.c         ****         
 884:fat.c         ****         /* read directory entries */
 885:fat.c         ****         while(fat_read_dir(dd, dir_entry))
 886:fat.c         ****         {
 887:fat.c         ****             /* check if we have found the next hierarchy */
 888:fat.c         ****             if((strlen(dir_entry->long_name) != length_to_sep ||
 889:fat.c         ****                 strncmp(path, dir_entry->long_name, length_to_sep) != 0))
 890:fat.c         ****                 continue;
 891:fat.c         **** 
 892:fat.c         ****             fat_close_dir(dd);
 893:fat.c         ****             dd = 0;
 894:fat.c         **** 
 895:fat.c         ****             if(path[length_to_sep] == '\0')
 896:fat.c         ****                 /* we iterated through the whole path and have found the file */
 897:fat.c         ****                 return 1;
 898:fat.c         **** 
 899:fat.c         ****             if(dir_entry->attributes & FAT_ATTRIB_DIR)
 900:fat.c         ****             {
 901:fat.c         ****                 /* we found a parent directory of the file we are searching for */
 902:fat.c         ****                 path = sub_path;
 903:fat.c         ****                 break;
 904:fat.c         ****             }
 905:fat.c         **** 
 906:fat.c         ****             /* a parent of the file exists, but not the file itself */
 907:fat.c         ****             return 0;
 908:fat.c         ****         }
 909:fat.c         **** 
 910:fat.c         ****         fat_close_dir(dd);
 911:fat.c         ****     }
 912:fat.c         ****     
 913:fat.c         ****     return 0;
 914:fat.c         **** }
 915:fat.c         **** 
 916:fat.c         **** /**
 917:fat.c         ****  * \ingroup fat_file
 918:fat.c         ****  * Opens a file on a FAT filesystem.
 919:fat.c         ****  *
 920:fat.c         ****  * \param[in] fs The filesystem on which the file to open lies.
 921:fat.c         ****  * \param[in] dir_entry The directory entry of the file to open.
 922:fat.c         ****  * \returns The file handle, or 0 on failure.
 923:fat.c         ****  * \see fat_close_file
 924:fat.c         ****  */
 925:fat.c         **** struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* 
 926:fat.c         **** {
 927:fat.c         ****     if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
 928:fat.c         ****         return 0;
 929:fat.c         **** 
 930:fat.c         **** #if USE_DYNAMIC_MEMORY
 931:fat.c         ****     struct fat_file_struct* fd = malloc(sizeof(*fd));
 932:fat.c         ****     if(!fd)
 933:fat.c         ****         return 0;
 934:fat.c         **** #else
 935:fat.c         ****     struct fat_file_struct* fd = fat_file_handles;
 936:fat.c         ****     uint8_t i;
 937:fat.c         ****     for(i = 0; i < FAT_FILE_COUNT; ++i)
 938:fat.c         ****     {
 939:fat.c         ****         if(!fd->fs)
 940:fat.c         ****             break;
 941:fat.c         **** 
 942:fat.c         ****         ++fd;
 943:fat.c         ****     }
 944:fat.c         ****     if(i >= FAT_FILE_COUNT)
 945:fat.c         ****         return 0;
 946:fat.c         **** #endif
 947:fat.c         ****     
 948:fat.c         ****     memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
 949:fat.c         ****     fd->fs = fs;
 950:fat.c         ****     fd->pos = 0;
 951:fat.c         ****     fd->pos_cluster = dir_entry->cluster;
 952:fat.c         **** 
 953:fat.c         ****     return fd;
 954:fat.c         **** }
 955:fat.c         **** 
 956:fat.c         **** /**
 957:fat.c         ****  * \ingroup fat_file
 958:fat.c         ****  * Closes a file.
 959:fat.c         ****  *
 960:fat.c         ****  * \param[in] fd The file handle of the file to close.
 961:fat.c         ****  * \see fat_open_file
 962:fat.c         ****  */
 963:fat.c         **** void fat_close_file(struct fat_file_struct* fd)
 964:fat.c         **** {
 965:fat.c         ****     if(fd)
 966:fat.c         ****     {
 967:fat.c         **** #if FAT_DELAY_DIRENTRY_UPDATE
 968:fat.c         ****         /* write directory entry */
 969:fat.c         ****         fat_write_dir_entry(fd->fs, &fd->dir_entry);
 970:fat.c         **** #endif
 971:fat.c         **** 
 972:fat.c         **** #if USE_DYNAMIC_MEMORY
 973:fat.c         ****         free(fd);
 974:fat.c         **** #else
 975:fat.c         ****         fd->fs = 0;
 976:fat.c         **** #endif
 977:fat.c         ****     }
 978:fat.c         **** }
 979:fat.c         **** 
 980:fat.c         **** /**
 981:fat.c         ****  * \ingroup fat_file
 982:fat.c         ****  * Reads data from a file.
 983:fat.c         ****  * 
 984:fat.c         ****  * The data requested is read from the current file location.
 985:fat.c         ****  *
 986:fat.c         ****  * \param[in] fd The file handle of the file from which to read.
 987:fat.c         ****  * \param[out] buffer The buffer into which to write.
 988:fat.c         ****  * \param[in] buffer_len The amount of data to read.
 989:fat.c         ****  * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 990:fat.c         ****  * \see fat_write_file
 991:fat.c         ****  */
 992:fat.c         **** intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
 993:fat.c         **** {
 994:fat.c         ****     /* check arguments */
 995:fat.c         ****     if(!fd || !buffer || buffer_len < 1)
 996:fat.c         ****         return -1;
 997:fat.c         **** 
 998:fat.c         ****     /* determine number of bytes to read */
 999:fat.c         ****     if(fd->pos + buffer_len > fd->dir_entry.file_size)
1000:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
1001:fat.c         ****     if(buffer_len == 0)
1002:fat.c         ****         return 0;
1003:fat.c         ****     
1004:fat.c         ****     uint16_t cluster_size = fd->fs->header.cluster_size;
1005:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
1006:fat.c         ****     uintptr_t buffer_left = buffer_len;
1007:fat.c         ****     uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
1008:fat.c         **** 
1009:fat.c         ****     /* find cluster in which to start reading */
1010:fat.c         ****     if(!cluster_num)
1011:fat.c         ****     {
1012:fat.c         ****         cluster_num = fd->dir_entry.cluster;
1013:fat.c         ****         
1014:fat.c         ****         if(!cluster_num)
1015:fat.c         ****         {
1016:fat.c         ****             if(!fd->pos)
1017:fat.c         ****                 return 0;
1018:fat.c         ****             else
1019:fat.c         ****                 return -1;
1020:fat.c         ****         }
1021:fat.c         **** 
1022:fat.c         ****         if(fd->pos)
1023:fat.c         ****         {
1024:fat.c         ****             uint32_t pos = fd->pos;
1025:fat.c         ****             while(pos >= cluster_size)
1026:fat.c         ****             {
1027:fat.c         ****                 pos -= cluster_size;
1028:fat.c         ****                 cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
1029:fat.c         ****                 if(!cluster_num)
1030:fat.c         ****                     return -1;
1031:fat.c         ****             }
1032:fat.c         ****         }
1033:fat.c         ****     }
1034:fat.c         ****     
1035:fat.c         ****     /* read data */
1036:fat.c         ****     do
1037:fat.c         ****     {
1038:fat.c         ****         /* calculate data size to copy from cluster */
1039:fat.c         ****         offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
1040:fat.c         ****         uint16_t copy_length = cluster_size - first_cluster_offset;
1041:fat.c         ****         if(copy_length > buffer_left)
1042:fat.c         ****             copy_length = buffer_left;
1043:fat.c         **** 
1044:fat.c         ****         /* read data */
1045:fat.c         ****         if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
1046:fat.c         ****             return buffer_len - buffer_left;
1047:fat.c         **** 
1048:fat.c         ****         /* calculate new file position */
1049:fat.c         ****         buffer += copy_length;
1050:fat.c         ****         buffer_left -= copy_length;
1051:fat.c         ****         fd->pos += copy_length;
1052:fat.c         **** 
1053:fat.c         ****         if(first_cluster_offset + copy_length >= cluster_size)
1054:fat.c         ****         {
1055:fat.c         ****             /* we are on a cluster boundary, so get the next cluster */
1056:fat.c         ****             if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
1057:fat.c         ****             {
1058:fat.c         ****                 first_cluster_offset = 0;
1059:fat.c         ****             }
1060:fat.c         ****             else
1061:fat.c         ****             {
1062:fat.c         ****                 fd->pos_cluster = 0;
1063:fat.c         ****                 return buffer_len - buffer_left;
1064:fat.c         ****             }
1065:fat.c         ****         }
1066:fat.c         **** 
1067:fat.c         ****         fd->pos_cluster = cluster_num;
1068:fat.c         **** 
1069:fat.c         ****     } while(buffer_left > 0); /* check if we are done */
1070:fat.c         **** 
1071:fat.c         ****     return buffer_len;
1072:fat.c         **** }
1073:fat.c         **** 
1074:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
1075:fat.c         **** /**
1076:fat.c         ****  * \ingroup fat_file
1077:fat.c         ****  * Writes data to a file.
1078:fat.c         ****  * 
1079:fat.c         ****  * The data is written to the current file location.
1080:fat.c         ****  *
1081:fat.c         ****  * \param[in] fd The file handle of the file to which to write.
1082:fat.c         ****  * \param[in] buffer The buffer from which to read the data to be written.
1083:fat.c         ****  * \param[in] buffer_len The amount of data to write.
1084:fat.c         ****  * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1
1085:fat.c         ****  * \see fat_read_file
1086:fat.c         ****  */
1087:fat.c         **** intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
1088:fat.c         **** {
1089:fat.c         ****     /* check arguments */
1090:fat.c         ****     if(!fd || !buffer || buffer_len < 1)
1091:fat.c         ****         return -1;
1092:fat.c         ****     if(fd->pos > fd->dir_entry.file_size)
1093:fat.c         ****         return -1;
1094:fat.c         **** 
1095:fat.c         ****     uint16_t cluster_size = fd->fs->header.cluster_size;
1096:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
1097:fat.c         ****     uintptr_t buffer_left = buffer_len;
1098:fat.c         ****     uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
1099:fat.c         **** 
1100:fat.c         ****     /* find cluster in which to start writing */
1101:fat.c         ****     if(!cluster_num)
1102:fat.c         ****     {
1103:fat.c         ****         cluster_num = fd->dir_entry.cluster;
1104:fat.c         ****         
1105:fat.c         ****         if(!cluster_num)
1106:fat.c         ****         {
1107:fat.c         ****             if(!fd->pos)
1108:fat.c         ****             {
1109:fat.c         ****                 /* empty file */
1110:fat.c         ****                 fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
1111:fat.c         ****                 if(!cluster_num)
1112:fat.c         ****                     return 0;
1113:fat.c         ****             }
1114:fat.c         ****             else
1115:fat.c         ****             {
1116:fat.c         ****                 return -1;
1117:fat.c         ****             }
1118:fat.c         ****         }
1119:fat.c         **** 
1120:fat.c         ****         if(fd->pos)
1121:fat.c         ****         {
1122:fat.c         ****             uint32_t pos = fd->pos;
1123:fat.c         ****             cluster_t cluster_num_next;
1124:fat.c         ****             while(pos >= cluster_size)
1125:fat.c         ****             {
1126:fat.c         ****                 pos -= cluster_size;
1127:fat.c         ****                 cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
1128:fat.c         ****                 if(!cluster_num_next)
1129:fat.c         ****                 {
1130:fat.c         ****                     if(pos != 0)
1131:fat.c         ****                         return -1; /* current file position points beyond end of file */
1132:fat.c         **** 
1133:fat.c         ****                     /* the file exactly ends on a cluster boundary, and we append to it */
1134:fat.c         ****                     cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
1135:fat.c         ****                     if(!cluster_num_next)
1136:fat.c         ****                         return 0;
1137:fat.c         ****                 }
1138:fat.c         **** 
1139:fat.c         ****                 cluster_num = cluster_num_next;
1140:fat.c         ****             }
1141:fat.c         ****         }
1142:fat.c         ****     }
1143:fat.c         ****     
1144:fat.c         ****     /* write data */
1145:fat.c         ****     do
1146:fat.c         ****     {
1147:fat.c         ****         /* calculate data size to write to cluster */
1148:fat.c         ****         offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
1149:fat.c         ****         uint16_t write_length = cluster_size - first_cluster_offset;
1150:fat.c         ****         if(write_length > buffer_left)
1151:fat.c         ****             write_length = buffer_left;
1152:fat.c         **** 
1153:fat.c         ****         /* write data which fits into the current cluster */
1154:fat.c         ****         if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
1155:fat.c         ****             break;
1156:fat.c         **** 
1157:fat.c         ****         /* calculate new file position */
1158:fat.c         ****         buffer += write_length;
1159:fat.c         ****         buffer_left -= write_length;
1160:fat.c         ****         fd->pos += write_length;
1161:fat.c         **** 
1162:fat.c         ****         if(first_cluster_offset + write_length >= cluster_size)
1163:fat.c         ****         {
1164:fat.c         ****             /* we are on a cluster boundary, so get the next cluster */
1165:fat.c         ****             cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
1166:fat.c         ****             if(!cluster_num_next && buffer_left > 0)
1167:fat.c         ****                 /* we reached the last cluster, append a new one */
1168:fat.c         ****                 cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
1169:fat.c         ****             if(!cluster_num_next)
1170:fat.c         ****             {
1171:fat.c         ****                 fd->pos_cluster = 0;
1172:fat.c         ****                 break;
1173:fat.c         ****             }
1174:fat.c         **** 
1175:fat.c         ****             cluster_num = cluster_num_next;
1176:fat.c         ****             first_cluster_offset = 0;
1177:fat.c         ****         }
1178:fat.c         **** 
1179:fat.c         ****         fd->pos_cluster = cluster_num;
1180:fat.c         **** 
1181:fat.c         ****     } while(buffer_left > 0); /* check if we are done */
1182:fat.c         **** 
1183:fat.c         ****     /* update directory entry */
1184:fat.c         ****     if(fd->pos > fd->dir_entry.file_size)
1185:fat.c         ****     {
1186:fat.c         **** #if !FAT_DELAY_DIRENTRY_UPDATE
1187:fat.c         ****         uint32_t size_old = fd->dir_entry.file_size;
1188:fat.c         **** #endif
1189:fat.c         **** 
1190:fat.c         ****         /* update file size */
1191:fat.c         ****         fd->dir_entry.file_size = fd->pos;
1192:fat.c         **** 
1193:fat.c         **** #if !FAT_DELAY_DIRENTRY_UPDATE
1194:fat.c         ****         /* write directory entry */
1195:fat.c         ****         if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
1196:fat.c         ****         {
1197:fat.c         ****             /* We do not return an error here since we actually wrote
1198:fat.c         ****              * some data to disk. So we calculate the amount of data
1199:fat.c         ****              * we wrote to disk and which lies within the old file size.
1200:fat.c         ****              */
1201:fat.c         ****             buffer_left = fd->pos - size_old;
1202:fat.c         ****             fd->pos = size_old;
1203:fat.c         ****         }
1204:fat.c         **** #endif
1205:fat.c         ****     }
1206:fat.c         **** 
1207:fat.c         ****     return buffer_len - buffer_left;
1208:fat.c         **** }
1209:fat.c         **** #endif
1210:fat.c         **** 
1211:fat.c         **** /**
1212:fat.c         ****  * \ingroup fat_file
1213:fat.c         ****  * Repositions the read/write file offset.
1214:fat.c         ****  *
1215:fat.c         ****  * Changes the file offset where the next call to fat_read_file()
1216:fat.c         ****  * or fat_write_file() starts reading/writing.
1217:fat.c         ****  *
1218:fat.c         ****  * If the new offset is beyond the end of the file, fat_resize_file()
1219:fat.c         ****  * is implicitly called, i.e. the file is expanded.
1220:fat.c         ****  *
1221:fat.c         ****  * The new offset can be given in different ways determined by
1222:fat.c         ****  * the \c whence parameter:
1223:fat.c         ****  * - \b FAT_SEEK_SET: \c *offset is relative to the beginning of the file.
1224:fat.c         ****  * - \b FAT_SEEK_CUR: \c *offset is relative to the current file position.
1225:fat.c         ****  * - \b FAT_SEEK_END: \c *offset is relative to the end of the file.
1226:fat.c         ****  *
1227:fat.c         ****  * The resulting absolute offset is written to the location the \c offset
1228:fat.c         ****  * parameter points to.
1229:fat.c         ****  *
1230:fat.c         ****  * Calling this function can also be used to retrieve the current file position:
1231:fat.c         ****    \code
1232:fat.c         ****    int32_t file_pos = 0;
1233:fat.c         ****    if(!fat_seek_file(fd, &file_pos, FAT_SEEK_CUR))
1234:fat.c         ****    {
1235:fat.c         ****        // error
1236:fat.c         ****    }
1237:fat.c         ****    // file_pos now contains the absolute file position
1238:fat.c         ****    \endcode
1239:fat.c         ****  * 
1240:fat.c         ****  * \param[in] fd The file decriptor of the file on which to seek.
1241:fat.c         ****  * \param[in,out] offset A pointer to the new offset, as affected by the \c whence
1242:fat.c         ****  *                   parameter. The function writes the new absolute offset
1243:fat.c         ****  *                   to this location before it returns.
1244:fat.c         ****  * \param[in] whence Affects the way \c offset is interpreted, see above.
1245:fat.c         ****  * \returns 0 on failure, 1 on success.
1246:fat.c         ****  */
1247:fat.c         **** uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
1248:fat.c         **** {
1249:fat.c         ****     if(!fd || !offset)
1250:fat.c         ****         return 0;
1251:fat.c         **** 
1252:fat.c         ****     uint32_t new_pos = fd->pos;
1253:fat.c         ****     switch(whence)
1254:fat.c         ****     {
1255:fat.c         ****         case FAT_SEEK_SET:
1256:fat.c         ****             new_pos = *offset;
1257:fat.c         ****             break;
1258:fat.c         ****         case FAT_SEEK_CUR:
1259:fat.c         ****             new_pos += *offset;
1260:fat.c         ****             break;
1261:fat.c         ****         case FAT_SEEK_END:
1262:fat.c         ****             new_pos = fd->dir_entry.file_size + *offset;
1263:fat.c         ****             break;
1264:fat.c         ****         default:
1265:fat.c         ****             return 0;
1266:fat.c         ****     }
1267:fat.c         **** 
1268:fat.c         ****     if(new_pos > fd->dir_entry.file_size
1269:fat.c         **** #if FAT_WRITE_SUPPORT
1270:fat.c         ****        && !fat_resize_file(fd, new_pos)
1271:fat.c         **** #endif
1272:fat.c         ****        )
1273:fat.c         ****         return 0;
1274:fat.c         **** 
1275:fat.c         ****     fd->pos = new_pos;
1276:fat.c         ****     fd->pos_cluster = 0;
1277:fat.c         **** 
1278:fat.c         ****     *offset = (int32_t) new_pos;
1279:fat.c         ****     return 1;
1280:fat.c         **** }
1281:fat.c         **** 
1282:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
1283:fat.c         **** /**
1284:fat.c         ****  * \ingroup fat_file
1285:fat.c         ****  * Resizes a file to have a specific size.
1286:fat.c         ****  *
1287:fat.c         ****  * Enlarges or shrinks the file pointed to by the file descriptor to have
1288:fat.c         ****  * exactly the specified size.
1289:fat.c         ****  *
1290:fat.c         ****  * If the file is truncated, all bytes having an equal or larger offset
1291:fat.c         ****  * than the given size are lost. If the file is expanded, the additional
1292:fat.c         ****  * bytes are allocated.
1293:fat.c         ****  *
1294:fat.c         ****  * \note Please be aware that this function just allocates or deallocates disk
1295:fat.c         ****  * space, it does not explicitely clear it. To avoid data leakage, this
1296:fat.c         ****  * must be done manually.
1297:fat.c         ****  *
1298:fat.c         ****  * \param[in] fd The file decriptor of the file which to resize.
1299:fat.c         ****  * \param[in] size The new size of the file.
1300:fat.c         ****  * \returns 0 on failure, 1 on success.
1301:fat.c         ****  */
1302:fat.c         **** uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
1303:fat.c         **** {
1304:fat.c         ****     if(!fd)
1305:fat.c         ****         return 0;
1306:fat.c         **** 
1307:fat.c         ****     cluster_t cluster_num = fd->dir_entry.cluster;
1308:fat.c         ****     uint16_t cluster_size = fd->fs->header.cluster_size;
1309:fat.c         ****     uint32_t size_new = size;
1310:fat.c         **** 
1311:fat.c         ****     do
1312:fat.c         ****     {
1313:fat.c         ****         if(cluster_num == 0 && size_new == 0)
1314:fat.c         ****             /* the file stays empty */
1315:fat.c         ****             break;
1316:fat.c         **** 
1317:fat.c         ****         /* seek to the next cluster as long as we need the space */
1318:fat.c         ****         while(size_new > cluster_size)
1319:fat.c         ****         {
1320:fat.c         ****             /* get next cluster of file */
1321:fat.c         ****             cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
1322:fat.c         ****             if(cluster_num_next)
1323:fat.c         ****             {
1324:fat.c         ****                 cluster_num = cluster_num_next;
1325:fat.c         ****                 size_new -= cluster_size;
1326:fat.c         ****             }
1327:fat.c         ****             else
1328:fat.c         ****             {
1329:fat.c         ****                 break;
1330:fat.c         ****             }
1331:fat.c         ****         }
1332:fat.c         **** 
1333:fat.c         ****         if(size_new > cluster_size || cluster_num == 0)
1334:fat.c         ****         {
1335:fat.c         ****             /* Allocate new cluster chain and append
1336:fat.c         ****              * it to the existing one, if available.
1337:fat.c         ****              */
1338:fat.c         ****             cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
1339:fat.c         ****             cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
1340:fat.c         ****             if(!cluster_new_chain)
1341:fat.c         ****                 return 0;
1342:fat.c         **** 
1343:fat.c         ****             if(!cluster_num)
1344:fat.c         ****             {
1345:fat.c         ****                 cluster_num = cluster_new_chain;
1346:fat.c         ****                 fd->dir_entry.cluster = cluster_num;
1347:fat.c         ****             }
1348:fat.c         ****         }
1349:fat.c         **** 
1350:fat.c         ****         /* write new directory entry */
1351:fat.c         ****         fd->dir_entry.file_size = size;
1352:fat.c         ****         if(size == 0)
1353:fat.c         ****             fd->dir_entry.cluster = 0;
1354:fat.c         ****         if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
1355:fat.c         ****             return 0;
1356:fat.c         **** 
1357:fat.c         ****         if(size == 0)
1358:fat.c         ****         {
1359:fat.c         ****             /* free all clusters of file */
1360:fat.c         ****             fat_free_clusters(fd->fs, cluster_num);
1361:fat.c         ****         }
1362:fat.c         ****         else if(size_new <= cluster_size)
1363:fat.c         ****         {
1364:fat.c         ****             /* free all clusters no longer needed */
1365:fat.c         ****             fat_terminate_clusters(fd->fs, cluster_num);
1366:fat.c         ****         }
1367:fat.c         **** 
1368:fat.c         ****     } while(0);
1369:fat.c         **** 
1370:fat.c         ****     /* correct file position */
1371:fat.c         ****     if(size < fd->pos)
1372:fat.c         ****     {
1373:fat.c         ****         fd->pos = size;
1374:fat.c         ****         fd->pos_cluster = 0;
1375:fat.c         ****     }
1376:fat.c         **** 
1377:fat.c         ****     return 1;
1378:fat.c         **** }
1379:fat.c         **** #endif
1380:fat.c         **** 
1381:fat.c         **** /**
1382:fat.c         ****  * \ingroup fat_dir
1383:fat.c         ****  * Opens a directory.
1384:fat.c         ****  *
1385:fat.c         ****  * \param[in] fs The filesystem on which the directory to open resides.
1386:fat.c         ****  * \param[in] dir_entry The directory entry which stands for the directory to open.
1387:fat.c         ****  * \returns An opaque directory descriptor on success, 0 on failure.
1388:fat.c         ****  * \see fat_close_dir
1389:fat.c         ****  */
1390:fat.c         **** struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* di
1391:fat.c         **** {
1392:fat.c         ****     if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
1393:fat.c         ****         return 0;
1394:fat.c         **** 
1395:fat.c         **** #if USE_DYNAMIC_MEMORY
1396:fat.c         ****     struct fat_dir_struct* dd = malloc(sizeof(*dd));
1397:fat.c         ****     if(!dd)
1398:fat.c         ****         return 0;
1399:fat.c         **** #else
1400:fat.c         ****     struct fat_dir_struct* dd = fat_dir_handles;
1401:fat.c         ****     uint8_t i;
1402:fat.c         ****     for(i = 0; i < FAT_DIR_COUNT; ++i)
1403:fat.c         ****     {
1404:fat.c         ****         if(!dd->fs)
1405:fat.c         ****             break;
1406:fat.c         **** 
1407:fat.c         ****         ++dd;
1408:fat.c         ****     }
1409:fat.c         ****     if(i >= FAT_DIR_COUNT)
1410:fat.c         ****         return 0;
1411:fat.c         **** #endif
1412:fat.c         ****     
1413:fat.c         ****     memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
1414:fat.c         ****     dd->fs = fs;
1415:fat.c         ****     dd->entry_cluster = dir_entry->cluster;
1416:fat.c         ****     dd->entry_offset = 0;
1417:fat.c         **** 
1418:fat.c         ****     return dd;
1419:fat.c         **** }
1420:fat.c         **** 
1421:fat.c         **** /**
1422:fat.c         ****  * \ingroup fat_dir
1423:fat.c         ****  * Closes a directory descriptor.
1424:fat.c         ****  *
1425:fat.c         ****  * This function destroys a directory descriptor which was
1426:fat.c         ****  * previously obtained by calling fat_open_dir(). When this
1427:fat.c         ****  * function returns, the given descriptor will be invalid.
1428:fat.c         ****  *
1429:fat.c         ****  * \param[in] dd The directory descriptor to close.
1430:fat.c         ****  * \see fat_open_dir
1431:fat.c         ****  */
1432:fat.c         **** void fat_close_dir(struct fat_dir_struct* dd)
1433:fat.c         **** {
1434:fat.c         ****     if(dd)
1435:fat.c         **** #if USE_DYNAMIC_MEMORY
1436:fat.c         ****         free(dd);
1437:fat.c         **** #else
1438:fat.c         ****         dd->fs = 0;
1439:fat.c         **** #endif
1440:fat.c         **** }
1441:fat.c         **** 
1442:fat.c         **** /**
1443:fat.c         ****  * \ingroup fat_dir
1444:fat.c         ****  * Reads the next directory entry contained within a parent directory.
1445:fat.c         ****  *
1446:fat.c         ****  * \param[in] dd The descriptor of the parent directory from which to read the entry.
1447:fat.c         ****  * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
1448:fat.c         ****  * \returns 0 on failure, 1 on success.
1449:fat.c         ****  * \see fat_reset_dir
1450:fat.c         ****  */
1451:fat.c         **** uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
1452:fat.c         **** {
1453:fat.c         ****     if(!dd || !dir_entry)
1454:fat.c         ****         return 0;
1455:fat.c         **** 
1456:fat.c         ****     /* get current position of directory handle */
1457:fat.c         ****     struct fat_fs_struct* fs = dd->fs;
1458:fat.c         ****     const struct fat_header_struct* header = &fs->header;
1459:fat.c         ****     uint16_t cluster_size = header->cluster_size;
1460:fat.c         ****     cluster_t cluster_num = dd->entry_cluster;
1461:fat.c         ****     uint16_t cluster_offset = dd->entry_offset;
1462:fat.c         ****     struct fat_read_dir_callback_arg arg;
1463:fat.c         **** 
1464:fat.c         ****     if(cluster_offset >= cluster_size)
1465:fat.c         ****     {
1466:fat.c         ****         /* The latest call hit the border of the last cluster in
1467:fat.c         ****          * the chain, but it still returned a directory entry.
1468:fat.c         ****          * So we now reset the handle and signal the caller the
1469:fat.c         ****          * end of the listing.
1470:fat.c         ****          */
1471:fat.c         ****         fat_reset_dir(dd);
1472:fat.c         ****         return 0;
1473:fat.c         ****     }
1474:fat.c         **** 
1475:fat.c         ****     /* reset callback arguments */
1476:fat.c         ****     memset(&arg, 0, sizeof(arg));
1477:fat.c         ****     memset(dir_entry, 0, sizeof(*dir_entry));
1478:fat.c         ****     arg.dir_entry = dir_entry;
1479:fat.c         **** 
1480:fat.c         ****     /* check if we read from the root directory */
1481:fat.c         ****     if(cluster_num == 0)
1482:fat.c         ****     {
1483:fat.c         **** #if FAT_FAT32_SUPPORT
1484:fat.c         ****         if(fs->partition->type == PARTITION_TYPE_FAT32)
1485:fat.c         ****             cluster_num = header->root_dir_cluster;
1486:fat.c         ****         else
1487:fat.c         **** #endif
1488:fat.c         ****             cluster_size = header->cluster_zero_offset - header->root_dir_offset;
1489:fat.c         ****     }
1490:fat.c         **** 
1491:fat.c         ****     /* read entries */
1492:fat.c         ****     uint8_t buffer[32];
1493:fat.c         ****     while(!arg.finished)
1494:fat.c         ****     {
1495:fat.c         ****         /* read directory entries up to the cluster border */
1496:fat.c         ****         uint16_t cluster_left = cluster_size - cluster_offset;
1497:fat.c         ****         offset_t pos = cluster_offset;
1498:fat.c         ****         if(cluster_num == 0)
1499:fat.c         ****             pos += header->root_dir_offset;
1500:fat.c         ****         else
1501:fat.c         ****             pos += fat_cluster_offset(fs, cluster_num);
1502:fat.c         **** 
1503:fat.c         ****         arg.bytes_read = 0;
1504:fat.c         ****         if(!fs->partition->device_read_interval(pos,
1505:fat.c         ****                                                 buffer,
1506:fat.c         ****                                                 sizeof(buffer),
1507:fat.c         ****                                                 cluster_left,
1508:fat.c         ****                                                 fat_dir_entry_read_callback,
1509:fat.c         ****                                                 &arg)
1510:fat.c         ****           )
1511:fat.c         ****             return 0;
1512:fat.c         **** 
1513:fat.c         ****         cluster_offset += arg.bytes_read;
1514:fat.c         **** 
1515:fat.c         ****         if(cluster_offset >= cluster_size)
1516:fat.c         ****         {
1517:fat.c         ****             /* we reached the cluster border and switch to the next cluster */
1518:fat.c         **** 
1519:fat.c         ****             /* get number of next cluster */
1520:fat.c         ****             if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
1521:fat.c         ****             {
1522:fat.c         ****                 cluster_offset = 0;
1523:fat.c         ****                 continue;
1524:fat.c         ****             }
1525:fat.c         **** 
1526:fat.c         ****             /* we are at the end of the cluster chain */
1527:fat.c         ****             if(!arg.finished)
1528:fat.c         ****             {
1529:fat.c         ****                 /* directory entry not found, reset directory handle */
1530:fat.c         ****                 fat_reset_dir(dd);
1531:fat.c         ****                 return 0;
1532:fat.c         ****             }
1533:fat.c         ****             else
1534:fat.c         ****             {
1535:fat.c         ****                 /* The current execution of the function has been successful,
1536:fat.c         ****                  * so we can not signal an end of the directory listing to
1537:fat.c         ****                  * the caller, but must wait for the next call. So we keep an
1538:fat.c         ****                  * invalid cluster offset to mark this directory handle's
1539:fat.c         ****                  * traversal as finished.
1540:fat.c         ****                  */
1541:fat.c         ****             }
1542:fat.c         **** 
1543:fat.c         ****             break;
1544:fat.c         ****         }
1545:fat.c         ****     }
1546:fat.c         **** 
1547:fat.c         ****     dd->entry_cluster = cluster_num;
1548:fat.c         ****     dd->entry_offset = cluster_offset;
1549:fat.c         **** 
1550:fat.c         ****     return arg.finished;
1551:fat.c         **** }
1552:fat.c         **** 
1553:fat.c         **** /**
1554:fat.c         ****  * \ingroup fat_dir
1555:fat.c         ****  * Resets a directory handle.
1556:fat.c         ****  *
1557:fat.c         ****  * Resets the directory handle such that reading restarts
1558:fat.c         ****  * with the first directory entry.
1559:fat.c         ****  *
1560:fat.c         ****  * \param[in] dd The directory handle to reset.
1561:fat.c         ****  * \returns 0 on failure, 1 on success.
1562:fat.c         ****  * \see fat_read_dir
1563:fat.c         ****  */
1564:fat.c         **** uint8_t fat_reset_dir(struct fat_dir_struct* dd)
1565:fat.c         **** {
1566:fat.c         ****     if(!dd)
1567:fat.c         ****         return 0;
1568:fat.c         **** 
1569:fat.c         ****     dd->entry_cluster = dd->dir_entry.cluster;
1570:fat.c         ****     dd->entry_offset = 0;
1571:fat.c         ****     return 1;
1572:fat.c         **** }
1573:fat.c         **** 
1574:fat.c         **** /**
1575:fat.c         ****  * \ingroup fat_fs
1576:fat.c         ****  * Callback function for reading a directory entry.
1577:fat.c         ****  *
1578:fat.c         ****  * Interprets a raw directory entry and puts the contained
1579:fat.c         ****  * information into a fat_dir_entry_struct structure.
1580:fat.c         ****  * 
1581:fat.c         ****  * For a single file there may exist multiple directory
1582:fat.c         ****  * entries. All except the last one are lfn entries, which
1583:fat.c         ****  * contain parts of the long filename. The last directory
1584:fat.c         ****  * entry is a traditional 8.3 style one. It contains all
1585:fat.c         ****  * other information like size, cluster, date and time.
1586:fat.c         ****  * 
1587:fat.c         ****  * \param[in] buffer A pointer to 32 bytes of raw data.
1588:fat.c         ****  * \param[in] offset The absolute offset of the raw data.
1589:fat.c         ****  * \param[in,out] p An argument structure controlling operation.
1590:fat.c         ****  * \returns 0 on failure or completion, 1 if reading has
1591:fat.c         ****  *          to be continued
1592:fat.c         ****  */
1593:fat.c         **** uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
1594:fat.c         **** {
1595:fat.c         ****     struct fat_read_dir_callback_arg* arg = p;
1596:fat.c         ****     struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
1597:fat.c         **** 
1598:fat.c         ****     arg->bytes_read += 32;
1599:fat.c         **** 
1600:fat.c         ****     /* skip deleted or empty entries */
1601:fat.c         ****     if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
1602:fat.c         ****     {
1603:fat.c         **** #if FAT_LFN_SUPPORT
1604:fat.c         ****         arg->checksum = 0;
1605:fat.c         **** #endif
1606:fat.c         ****         return 1;
1607:fat.c         ****     }
1608:fat.c         **** 
1609:fat.c         **** #if !FAT_LFN_SUPPORT
1610:fat.c         ****     /* skip lfn entries */
1611:fat.c         ****     if(buffer[11] == 0x0f)
1612:fat.c         ****         return 1;
1613:fat.c         **** #endif
1614:fat.c         **** 
1615:fat.c         ****     char* long_name = dir_entry->long_name;
1616:fat.c         **** #if FAT_LFN_SUPPORT
1617:fat.c         ****     if(buffer[11] == 0x0f)
1618:fat.c         ****     {
1619:fat.c         ****         /* checksum validation */
1620:fat.c         ****         if(arg->checksum == 0 || arg->checksum != buffer[13])
1621:fat.c         ****         {
1622:fat.c         ****             /* reset directory entry */
1623:fat.c         ****             memset(dir_entry, 0, sizeof(*dir_entry));
1624:fat.c         **** 
1625:fat.c         ****             arg->checksum = buffer[13];
1626:fat.c         ****             dir_entry->entry_offset = offset;
1627:fat.c         ****         }
1628:fat.c         **** 
1629:fat.c         ****         /* lfn supports unicode, but we do not, for now.
1630:fat.c         ****          * So we assume pure ascii and read only every
1631:fat.c         ****          * second byte.
1632:fat.c         ****          */
1633:fat.c         ****         uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
1634:fat.c         ****         const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
1635:fat.c         ****         for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
1636:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
1637:fat.c         **** 
1638:fat.c         ****         return 1;
1639:fat.c         ****     }
1640:fat.c         ****     else
1641:fat.c         **** #endif
1642:fat.c         ****     {
1643:fat.c         **** #if FAT_LFN_SUPPORT
1644:fat.c         ****         /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
1645:fat.c         ****         if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
1646:fat.c         **** #endif
1647:fat.c         ****         {
1648:fat.c         ****             /* reset directory entry */
1649:fat.c         ****             memset(dir_entry, 0, sizeof(*dir_entry));
1650:fat.c         ****             dir_entry->entry_offset = offset;
1651:fat.c         **** 
1652:fat.c         ****             uint8_t i;
1653:fat.c         ****             for(i = 0; i < 8; ++i)
1654:fat.c         ****             {
1655:fat.c         ****                 if(buffer[i] == ' ')
1656:fat.c         ****                     break;
1657:fat.c         ****                 long_name[i] = buffer[i];
1658:fat.c         **** 
1659:fat.c         ****                 /* Windows NT and later versions do not store lfn entries
1660:fat.c         ****                  * for 8.3 names which have a lowercase basename, extension
1661:fat.c         ****                  * or both when everything else is uppercase. They use two
1662:fat.c         ****                  * extra bits to signal a lowercase basename or extension.
1663:fat.c         ****                  */
1664:fat.c         ****                 if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
1665:fat.c         ****                     long_name[i] += 'a' - 'A';
1666:fat.c         ****             }
1667:fat.c         ****             if(long_name[0] == 0x05)
1668:fat.c         ****                 long_name[0] = (char) FAT_DIRENTRY_DELETED;
1669:fat.c         **** 
1670:fat.c         ****             if(buffer[8] != ' ')
1671:fat.c         ****             {
1672:fat.c         ****                 long_name[i++] = '.';
1673:fat.c         **** 
1674:fat.c         ****                 uint8_t j = 8;
1675:fat.c         ****                 for(; j < 11; ++j)
1676:fat.c         ****                 {
1677:fat.c         ****                     if(buffer[j] == ' ')
1678:fat.c         ****                         break;
1679:fat.c         ****                     long_name[i] = buffer[j];
1680:fat.c         **** 
1681:fat.c         ****                     /* See above for the lowercase 8.3 name handling of
1682:fat.c         ****                      * Windows NT and later.
1683:fat.c         ****                      */
1684:fat.c         ****                     if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
1685:fat.c         ****                         long_name[i] += 'a' - 'A';
1686:fat.c         **** 
1687:fat.c         ****                     ++i;
1688:fat.c         ****                 }
1689:fat.c         ****             } 
1690:fat.c         **** 
1691:fat.c         ****             long_name[i] = '\0';
1692:fat.c         ****         }
1693:fat.c         ****         
1694:fat.c         ****         /* extract properties of file and store them within the structure */
1695:fat.c         ****         dir_entry->attributes = buffer[11];
1696:fat.c         ****         dir_entry->cluster = read16(&buffer[26]);
1697:fat.c         **** #if FAT_FAT32_SUPPORT
1698:fat.c         ****         dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
1699:fat.c         **** #endif
1700:fat.c         ****         dir_entry->file_size = read32(&buffer[28]);
1701:fat.c         **** 
1702:fat.c         **** #if FAT_DATETIME_SUPPORT
1703:fat.c         ****         dir_entry->modification_time = read16(&buffer[22]);
1704:fat.c         ****         dir_entry->modification_date = read16(&buffer[24]);
1705:fat.c         **** #endif
1706:fat.c         **** 
1707:fat.c         ****         arg->finished = 1;
1708:fat.c         ****         return 0;
1709:fat.c         ****     }
1710:fat.c         **** }
1711:fat.c         **** 
1712:fat.c         **** #if DOXYGEN || FAT_LFN_SUPPORT
1713:fat.c         **** /**
1714:fat.c         ****  * \ingroup fat_fs
1715:fat.c         ****  * Calculates the checksum for 8.3 names used within the
1716:fat.c         ****  * corresponding lfn directory entries.
1717:fat.c         ****  *
1718:fat.c         ****  * \param[in] file_name_83 The 11-byte file name buffer.
1719:fat.c         ****  * \returns The checksum of the given file name.
1720:fat.c         ****  */
1721:fat.c         **** uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
1722:fat.c         **** {
  36               		.loc 1 1722 1 is_stmt 1 view -0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42               		.loc 1 1722 1 is_stmt 0 view .LVU5
  43 0006 9C01      		movw r18,r24
1723:fat.c         ****     uint8_t checksum = file_name_83[0];
  44               		.loc 1 1723 5 is_stmt 1 view .LVU6
  45               		.loc 1 1723 13 is_stmt 0 view .LVU7
  46 0008 FC01      		movw r30,r24
  47 000a 8191      		ld r24,Z+
  48               	.LVL3:
1724:fat.c         ****     for(uint8_t i = 1; i < 11; ++i)
  49               		.loc 1 1724 5 is_stmt 1 view .LVU8
  50               	.LBB14:
  51               		.loc 1 1724 9 view .LVU9
  52               		.loc 1 1724 9 is_stmt 0 view .LVU10
  53 000c 255F      		subi r18,-11
  54 000e 3F4F      		sbci r19,-1
  55               	.LVL4:
  56               	.L3:
1725:fat.c         ****         checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
  57               		.loc 1 1725 9 is_stmt 1 discriminator 3 view .LVU11
  58               		.loc 1 1725 37 is_stmt 0 discriminator 3 view .LVU12
  59 0010 982F      		mov r25,r24
  60 0012 90FB      		bst r25,0
  61 0014 9795      		ror r25
  62 0016 97F9      		bld r25,7
  63               		.loc 1 1725 70 discriminator 3 view .LVU13
  64 0018 8191      		ld r24,Z+
  65               	.LVL5:
  66               		.loc 1 1725 18 discriminator 3 view .LVU14
  67 001a 890F      		add r24,r25
  68               	.LVL6:
1724:fat.c         ****     for(uint8_t i = 1; i < 11; ++i)
  69               		.loc 1 1724 5 discriminator 3 view .LVU15
  70 001c 2E17      		cp r18,r30
  71 001e 3F07      		cpc r19,r31
  72 0020 01F4      		brne .L3
  73               	/* epilogue start */
  74               	.LBE14:
1726:fat.c         **** 
1727:fat.c         ****     return checksum;
1728:fat.c         **** }
  75               		.loc 1 1728 1 view .LVU16
  76 0022 0895      		ret
  77               		.cfi_endproc
  78               	.LFE22:
  81               	fat_get_fs_free_16_callback:
  82               	.LVL7:
  83               	.LFB31:
1729:fat.c         **** #endif
1730:fat.c         **** 
1731:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
1732:fat.c         **** /**
1733:fat.c         ****  * \ingroup fat_fs
1734:fat.c         ****  * Searches for space where to store a directory entry.
1735:fat.c         ****  *
1736:fat.c         ****  * \param[in] fs The filesystem on which to operate.
1737:fat.c         ****  * \param[in] parent The directory in which to search.
1738:fat.c         ****  * \param[in] dir_entry The directory entry for which to search space.
1739:fat.c         ****  * \returns 0 on failure, a device offset on success.
1740:fat.c         ****  */
1741:fat.c         **** offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* paren
1742:fat.c         **** {
1743:fat.c         ****     if(!fs || !dir_entry)
1744:fat.c         ****         return 0;
1745:fat.c         **** 
1746:fat.c         ****     /* search for a place where to write the directory entry to disk */
1747:fat.c         **** #if FAT_LFN_SUPPORT
1748:fat.c         ****     uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
1749:fat.c         ****     uint8_t free_dir_entries_found = 0;
1750:fat.c         **** #endif
1751:fat.c         ****     cluster_t cluster_num = parent->dir_entry.cluster;
1752:fat.c         ****     offset_t dir_entry_offset = 0;
1753:fat.c         ****     offset_t offset = 0;
1754:fat.c         ****     offset_t offset_to = 0;
1755:fat.c         **** #if FAT_FAT32_SUPPORT
1756:fat.c         ****     uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
1757:fat.c         **** #endif
1758:fat.c         **** 
1759:fat.c         ****     if(cluster_num == 0)
1760:fat.c         ****     {
1761:fat.c         **** #if FAT_FAT32_SUPPORT
1762:fat.c         ****         if(is_fat32)
1763:fat.c         ****         {
1764:fat.c         ****             cluster_num = fs->header.root_dir_cluster;
1765:fat.c         ****         }
1766:fat.c         ****         else
1767:fat.c         **** #endif
1768:fat.c         ****         {
1769:fat.c         ****             /* we read/write from the root directory entry */
1770:fat.c         ****             offset = fs->header.root_dir_offset;
1771:fat.c         ****             offset_to = fs->header.cluster_zero_offset;
1772:fat.c         ****             dir_entry_offset = offset;
1773:fat.c         ****         }
1774:fat.c         ****     }
1775:fat.c         ****     
1776:fat.c         ****     while(1)
1777:fat.c         ****     {
1778:fat.c         ****         if(offset == offset_to)
1779:fat.c         ****         {
1780:fat.c         ****             if(cluster_num == 0)
1781:fat.c         ****                 /* We iterated through the whole root directory and
1782:fat.c         ****                  * could not find enough space for the directory entry.
1783:fat.c         ****                  */
1784:fat.c         ****                 return 0;
1785:fat.c         **** 
1786:fat.c         ****             if(offset)
1787:fat.c         ****             {
1788:fat.c         ****                 /* We reached a cluster boundary and have to
1789:fat.c         ****                  * switch to the next cluster.
1790:fat.c         ****                  */
1791:fat.c         **** 
1792:fat.c         ****                 cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
1793:fat.c         ****                 if(!cluster_next)
1794:fat.c         ****                 {
1795:fat.c         ****                     cluster_next = fat_append_clusters(fs, cluster_num, 1);
1796:fat.c         ****                     if(!cluster_next)
1797:fat.c         ****                         return 0;
1798:fat.c         **** 
1799:fat.c         ****                     /* we appended a new cluster and know it is free */
1800:fat.c         ****                     dir_entry_offset = fs->header.cluster_zero_offset +
1801:fat.c         ****                                        (offset_t) (cluster_next - 2) * fs->header.cluster_size;
1802:fat.c         **** 
1803:fat.c         ****                     /* clear cluster to avoid garbage directory entries */
1804:fat.c         ****                     fat_clear_cluster(fs, cluster_next);
1805:fat.c         **** 
1806:fat.c         ****                     break;
1807:fat.c         ****                 }
1808:fat.c         ****                 cluster_num = cluster_next;
1809:fat.c         ****             }
1810:fat.c         **** 
1811:fat.c         ****             offset = fat_cluster_offset(fs, cluster_num);
1812:fat.c         ****             offset_to = offset + fs->header.cluster_size;
1813:fat.c         ****             dir_entry_offset = offset;
1814:fat.c         **** #if FAT_LFN_SUPPORT
1815:fat.c         ****             free_dir_entries_found = 0;
1816:fat.c         **** #endif
1817:fat.c         ****         }
1818:fat.c         ****         
1819:fat.c         ****         /* read next lfn or 8.3 entry */
1820:fat.c         ****         uint8_t first_char;
1821:fat.c         ****         if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
1822:fat.c         ****             return 0;
1823:fat.c         **** 
1824:fat.c         ****         /* check if we found a free directory entry */
1825:fat.c         ****         if(first_char == FAT_DIRENTRY_DELETED || !first_char)
1826:fat.c         ****         {
1827:fat.c         ****             /* check if we have the needed number of available entries */
1828:fat.c         **** #if FAT_LFN_SUPPORT
1829:fat.c         ****             ++free_dir_entries_found;
1830:fat.c         ****             if(free_dir_entries_found >= free_dir_entries_needed)
1831:fat.c         **** #endif
1832:fat.c         ****                 break;
1833:fat.c         **** 
1834:fat.c         ****             offset += 32;
1835:fat.c         ****         }
1836:fat.c         ****         else
1837:fat.c         ****         {
1838:fat.c         ****             offset += 32;
1839:fat.c         ****             dir_entry_offset = offset;
1840:fat.c         **** #if FAT_LFN_SUPPORT
1841:fat.c         ****             free_dir_entries_found = 0;
1842:fat.c         **** #endif
1843:fat.c         ****         }
1844:fat.c         ****     }
1845:fat.c         **** 
1846:fat.c         ****     return dir_entry_offset;
1847:fat.c         **** }
1848:fat.c         **** #endif
1849:fat.c         **** 
1850:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
1851:fat.c         **** /**
1852:fat.c         ****  * \ingroup fat_fs
1853:fat.c         ****  * Writes a directory entry to disk.
1854:fat.c         ****  *
1855:fat.c         ****  * \note The file name is not checked for invalid characters.
1856:fat.c         ****  *
1857:fat.c         ****  * \note The generation of the short 8.3 file name is quite
1858:fat.c         ****  * simple. The first eight characters are used for the filename.
1859:fat.c         ****  * The extension, if any, is made up of the first three characters
1860:fat.c         ****  * following the last dot within the long filename. If the
1861:fat.c         ****  * filename (without the extension) is longer than eight characters,
1862:fat.c         ****  * the lower byte of the cluster number replaces the last two
1863:fat.c         ****  * characters to avoid name clashes. In any other case, it is your
1864:fat.c         ****  * responsibility to avoid name clashes.
1865:fat.c         ****  *
1866:fat.c         ****  * \param[in] fs The filesystem on which to operate.
1867:fat.c         ****  * \param[in] dir_entry The directory entry to write.
1868:fat.c         ****  * \returns 0 on failure, 1 on success.
1869:fat.c         ****  */
1870:fat.c         **** uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
1871:fat.c         **** {
1872:fat.c         ****     if(!fs || !dir_entry)
1873:fat.c         ****         return 0;
1874:fat.c         ****     
1875:fat.c         **** #if FAT_DATETIME_SUPPORT
1876:fat.c         ****     {
1877:fat.c         ****         uint16_t year;
1878:fat.c         ****         uint8_t month;
1879:fat.c         ****         uint8_t day;
1880:fat.c         ****         uint8_t hour;
1881:fat.c         ****         uint8_t min;
1882:fat.c         ****         uint8_t sec;
1883:fat.c         **** 
1884:fat.c         ****         fat_get_datetime(&year, &month, &day, &hour, &min, &sec);
1885:fat.c         ****         fat_set_file_modification_date(dir_entry, year, month, day);
1886:fat.c         ****         fat_set_file_modification_time(dir_entry, hour, min, sec);
1887:fat.c         ****     }
1888:fat.c         **** #endif
1889:fat.c         **** 
1890:fat.c         ****     device_write_t device_write = fs->partition->device_write;
1891:fat.c         ****     offset_t offset = dir_entry->entry_offset;
1892:fat.c         ****     const char* name = dir_entry->long_name;
1893:fat.c         ****     uint8_t name_len = strlen(name);
1894:fat.c         **** #if FAT_LFN_SUPPORT
1895:fat.c         ****     uint8_t lfn_entry_count = (name_len + 12) / 13;
1896:fat.c         **** #endif
1897:fat.c         ****     uint8_t buffer[32];
1898:fat.c         **** 
1899:fat.c         ****     /* write 8.3 entry */
1900:fat.c         **** 
1901:fat.c         ****     /* generate 8.3 file name */
1902:fat.c         ****     memset(&buffer[0], ' ', 11);
1903:fat.c         ****     char* name_ext = strrchr(name, '.');
1904:fat.c         ****     if(name_ext && *++name_ext)
1905:fat.c         ****     {
1906:fat.c         ****         uint8_t name_ext_len = strlen(name_ext);
1907:fat.c         ****         name_len -= name_ext_len + 1;
1908:fat.c         **** 
1909:fat.c         ****         if(name_ext_len > 3)
1910:fat.c         **** #if FAT_LFN_SUPPORT
1911:fat.c         ****             name_ext_len = 3;
1912:fat.c         **** #else
1913:fat.c         ****             return 0;
1914:fat.c         **** #endif
1915:fat.c         ****         
1916:fat.c         ****         memcpy(&buffer[8], name_ext, name_ext_len);
1917:fat.c         ****     }
1918:fat.c         ****     
1919:fat.c         ****     if(name_len <= 8)
1920:fat.c         ****     {
1921:fat.c         ****         memcpy(buffer, name, name_len);
1922:fat.c         **** 
1923:fat.c         **** #if FAT_LFN_SUPPORT
1924:fat.c         ****         /* For now, we create lfn entries for all files,
1925:fat.c         ****          * except the "." and ".." directory references.
1926:fat.c         ****          * This is to avoid difficulties with capitalization,
1927:fat.c         ****          * as 8.3 filenames allow uppercase letters only.
1928:fat.c         ****          *
1929:fat.c         ****          * Theoretically it would be possible to leave
1930:fat.c         ****          * the 8.3 entry alone if the basename and the
1931:fat.c         ****          * extension have no mixed capitalization.
1932:fat.c         ****          */
1933:fat.c         ****         if(name[0] == '.' &&
1934:fat.c         ****            ((name[1] == '.' && name[2] == '\0') ||
1935:fat.c         ****             name[1] == '\0')
1936:fat.c         ****           )
1937:fat.c         ****             lfn_entry_count = 0;
1938:fat.c         **** #endif
1939:fat.c         ****     }
1940:fat.c         ****     else
1941:fat.c         ****     {
1942:fat.c         **** #if FAT_LFN_SUPPORT
1943:fat.c         ****         memcpy(buffer, name, 8);
1944:fat.c         **** 
1945:fat.c         ****         /* Minimize 8.3 name clashes by appending
1946:fat.c         ****          * the lower byte of the cluster number.
1947:fat.c         ****          */
1948:fat.c         ****         uint8_t num = dir_entry->cluster & 0xff;
1949:fat.c         **** 
1950:fat.c         ****         buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
1951:fat.c         ****         num &= 0x0f;
1952:fat.c         ****         buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
1953:fat.c         **** #else
1954:fat.c         ****         return 0;
1955:fat.c         **** #endif
1956:fat.c         ****     }
1957:fat.c         ****     if(buffer[0] == FAT_DIRENTRY_DELETED)
1958:fat.c         ****         buffer[0] = 0x05;
1959:fat.c         **** 
1960:fat.c         ****     /* fill directory entry buffer */
1961:fat.c         ****     memset(&buffer[11], 0, sizeof(buffer) - 11);
1962:fat.c         ****     buffer[0x0b] = dir_entry->attributes;
1963:fat.c         **** #if FAT_DATETIME_SUPPORT
1964:fat.c         ****     write16(&buffer[0x16], dir_entry->modification_time);
1965:fat.c         ****     write16(&buffer[0x18], dir_entry->modification_date);
1966:fat.c         **** #endif
1967:fat.c         **** #if FAT_FAT32_SUPPORT
1968:fat.c         ****     write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
1969:fat.c         **** #endif
1970:fat.c         ****     write16(&buffer[0x1a], dir_entry->cluster);
1971:fat.c         ****     write32(&buffer[0x1c], dir_entry->file_size);
1972:fat.c         **** 
1973:fat.c         ****     /* write to disk */
1974:fat.c         **** #if FAT_LFN_SUPPORT
1975:fat.c         ****     if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
1976:fat.c         **** #else
1977:fat.c         ****     if(!device_write(offset, buffer, sizeof(buffer)))
1978:fat.c         **** #endif
1979:fat.c         ****         return 0;
1980:fat.c         ****     
1981:fat.c         **** #if FAT_LFN_SUPPORT
1982:fat.c         ****     /* calculate checksum of 8.3 name */
1983:fat.c         ****     uint8_t checksum = fat_calc_83_checksum(buffer);
1984:fat.c         ****     
1985:fat.c         ****     /* write lfn entries */
1986:fat.c         ****     for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
1987:fat.c         ****     {
1988:fat.c         ****         memset(buffer, 0xff, sizeof(buffer));
1989:fat.c         ****         
1990:fat.c         ****         /* set file name */
1991:fat.c         ****         const char* long_name_curr = name + (lfn_entry - 1) * 13;
1992:fat.c         ****         uint8_t i = 1;
1993:fat.c         ****         while(i < 0x1f)
1994:fat.c         ****         {
1995:fat.c         ****             buffer[i++] = *long_name_curr;
1996:fat.c         ****             buffer[i++] = 0;
1997:fat.c         **** 
1998:fat.c         ****             switch(i)
1999:fat.c         ****             {
2000:fat.c         ****                 case 0x0b:
2001:fat.c         ****                     i = 0x0e;
2002:fat.c         ****                     break;
2003:fat.c         ****                 case 0x1a:
2004:fat.c         ****                     i = 0x1c;
2005:fat.c         ****                     break;
2006:fat.c         ****             }
2007:fat.c         **** 
2008:fat.c         ****             if(!*long_name_curr++)
2009:fat.c         ****                 break;
2010:fat.c         ****         }
2011:fat.c         ****         
2012:fat.c         ****         /* set index of lfn entry */
2013:fat.c         ****         buffer[0x00] = lfn_entry;
2014:fat.c         ****         if(lfn_entry == lfn_entry_count)
2015:fat.c         ****             buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
2016:fat.c         **** 
2017:fat.c         ****         /* mark as lfn entry */
2018:fat.c         ****         buffer[0x0b] = 0x0f;
2019:fat.c         **** 
2020:fat.c         ****         /* set 8.3 checksum */
2021:fat.c         ****         buffer[0x0d] = checksum;
2022:fat.c         **** 
2023:fat.c         ****         /* clear reserved bytes */
2024:fat.c         ****         buffer[0x0c] = 0;
2025:fat.c         ****         buffer[0x1a] = 0;
2026:fat.c         ****         buffer[0x1b] = 0;
2027:fat.c         **** 
2028:fat.c         ****         /* write entry */
2029:fat.c         ****         device_write(offset, buffer, sizeof(buffer));
2030:fat.c         ****     
2031:fat.c         ****         offset += sizeof(buffer);
2032:fat.c         ****     }
2033:fat.c         **** #endif
2034:fat.c         ****     
2035:fat.c         ****     return 1;
2036:fat.c         **** }
2037:fat.c         **** #endif
2038:fat.c         **** 
2039:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
2040:fat.c         **** /**
2041:fat.c         ****  * \ingroup fat_file
2042:fat.c         ****  * Creates a file.
2043:fat.c         ****  *
2044:fat.c         ****  * Creates a file and obtains the directory entry of the
2045:fat.c         ****  * new file. If the file to create already exists, the
2046:fat.c         ****  * directory entry of the existing file will be returned
2047:fat.c         ****  * within the dir_entry parameter.
2048:fat.c         ****  *
2049:fat.c         ****  * \note The file name is not checked for invalid characters.
2050:fat.c         ****  *
2051:fat.c         ****  * \note The generation of the short 8.3 file name is quite
2052:fat.c         ****  * simple. The first eight characters are used for the filename.
2053:fat.c         ****  * The extension, if any, is made up of the first three characters
2054:fat.c         ****  * following the last dot within the long filename. If the
2055:fat.c         ****  * filename (without the extension) is longer than eight characters,
2056:fat.c         ****  * the lower byte of the cluster number replaces the last two
2057:fat.c         ****  * characters to avoid name clashes. In any other case, it is your
2058:fat.c         ****  * responsibility to avoid name clashes.
2059:fat.c         ****  *
2060:fat.c         ****  * \param[in] parent The handle of the directory in which to create the file.
2061:fat.c         ****  * \param[in] file The name of the file to create.
2062:fat.c         ****  * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
2063:fat.c         ****  * \returns 0 on failure, 1 on success, 2 if the file already existed.
2064:fat.c         ****  * \see fat_delete_file
2065:fat.c         ****  */
2066:fat.c         **** uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struc
2067:fat.c         **** {
2068:fat.c         ****     if(!parent || !file || !file[0] || !dir_entry)
2069:fat.c         ****         return 0;
2070:fat.c         **** 
2071:fat.c         ****     /* check if the file already exists */
2072:fat.c         ****     while(1)
2073:fat.c         ****     {
2074:fat.c         ****         if(!fat_read_dir(parent, dir_entry))
2075:fat.c         ****             break;
2076:fat.c         **** 
2077:fat.c         ****         if(strcmp(file, dir_entry->long_name) == 0)
2078:fat.c         ****         {
2079:fat.c         ****             fat_reset_dir(parent);
2080:fat.c         ****             return 2;
2081:fat.c         ****         }
2082:fat.c         ****     }
2083:fat.c         **** 
2084:fat.c         ****     struct fat_fs_struct* fs = parent->fs;
2085:fat.c         **** 
2086:fat.c         ****     /* prepare directory entry with values already known */
2087:fat.c         ****     memset(dir_entry, 0, sizeof(*dir_entry));
2088:fat.c         ****     strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
2089:fat.c         **** 
2090:fat.c         ****     /* find place where to store directory entry */
2091:fat.c         ****     if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
2092:fat.c         ****         return 0;
2093:fat.c         ****     
2094:fat.c         ****     /* write directory entry to disk */
2095:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
2096:fat.c         ****         return 0;
2097:fat.c         ****     
2098:fat.c         ****     return 1;
2099:fat.c         **** }
2100:fat.c         **** #endif
2101:fat.c         **** 
2102:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
2103:fat.c         **** /**
2104:fat.c         ****  * \ingroup fat_file
2105:fat.c         ****  * Deletes a file or directory.
2106:fat.c         ****  *
2107:fat.c         ****  * If a directory is deleted without first deleting its
2108:fat.c         ****  * subdirectories and files, disk space occupied by these
2109:fat.c         ****  * files will get wasted as there is no chance to release
2110:fat.c         ****  * it and mark it as free.
2111:fat.c         ****  * 
2112:fat.c         ****  * \param[in] fs The filesystem on which to operate.
2113:fat.c         ****  * \param[in] dir_entry The directory entry of the file to delete.
2114:fat.c         ****  * \returns 0 on failure, 1 on success.
2115:fat.c         ****  * \see fat_create_file
2116:fat.c         ****  */
2117:fat.c         **** uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
2118:fat.c         **** {
2119:fat.c         ****     if(!fs || !dir_entry)
2120:fat.c         ****         return 0;
2121:fat.c         **** 
2122:fat.c         ****     /* get offset of the file's directory entry */
2123:fat.c         ****     offset_t dir_entry_offset = dir_entry->entry_offset;
2124:fat.c         ****     if(!dir_entry_offset)
2125:fat.c         ****         return 0;
2126:fat.c         **** 
2127:fat.c         **** #if FAT_LFN_SUPPORT
2128:fat.c         ****     uint8_t buffer[12];
2129:fat.c         ****     while(1)
2130:fat.c         ****     {
2131:fat.c         ****         /* read directory entry */
2132:fat.c         ****         if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
2133:fat.c         ****             return 0;
2134:fat.c         ****         
2135:fat.c         ****         /* mark the directory entry as deleted */
2136:fat.c         ****         buffer[0] = FAT_DIRENTRY_DELETED;
2137:fat.c         ****         
2138:fat.c         ****         /* write back entry */
2139:fat.c         ****         if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
2140:fat.c         ****             return 0;
2141:fat.c         **** 
2142:fat.c         ****         /* check if we deleted the whole entry */
2143:fat.c         ****         if(buffer[11] != 0x0f)
2144:fat.c         ****             break;
2145:fat.c         **** 
2146:fat.c         ****         dir_entry_offset += 32;
2147:fat.c         ****     }
2148:fat.c         **** #else
2149:fat.c         ****     /* mark the directory entry as deleted */
2150:fat.c         ****     uint8_t first_char = FAT_DIRENTRY_DELETED;
2151:fat.c         ****     if(!fs->partition->device_write(dir_entry_offset, &first_char, 1))
2152:fat.c         ****         return 0;
2153:fat.c         **** #endif
2154:fat.c         **** 
2155:fat.c         ****     /* We deleted the directory entry. The next thing to do is
2156:fat.c         ****      * marking all occupied clusters as free.
2157:fat.c         ****      */
2158:fat.c         ****     return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
2159:fat.c         **** }
2160:fat.c         **** #endif
2161:fat.c         **** 
2162:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
2163:fat.c         **** /**
2164:fat.c         ****  * \ingroup fat_file
2165:fat.c         ****  * Moves or renames a file.
2166:fat.c         ****  *
2167:fat.c         ****  * Changes a file's name, optionally moving it into another
2168:fat.c         ****  * directory as well. Before calling this function, the
2169:fat.c         ****  * target file name must not exist. Moving a file to a
2170:fat.c         ****  * different filesystem (i.e. \a parent_new doesn't lie on
2171:fat.c         ****  * \a fs) is not supported.
2172:fat.c         ****  * 
2173:fat.c         ****  * After successfully renaming (and moving) the file, the
2174:fat.c         ****  * given directory entry is updated such that it points to
2175:fat.c         ****  * the file's new location.
2176:fat.c         ****  *
2177:fat.c         ****  * \note The notes which apply to fat_create_file() also
2178:fat.c         ****  * apply to this function.
2179:fat.c         ****  *
2180:fat.c         ****  * \param[in] fs The filesystem on which to operate.
2181:fat.c         ****  * \param[in,out] dir_entry The directory entry of the file to move.
2182:fat.c         ****  * \param[in] parent_new The handle of the new parent directory of the file.
2183:fat.c         ****  * \param[in] file_new The file's new name.
2184:fat.c         ****  * \returns 0 on failure, 1 on success.
2185:fat.c         ****  * \see fat_create_file, fat_delete_file, fat_move_dir
2186:fat.c         ****  */
2187:fat.c         **** uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_
2188:fat.c         **** {
2189:fat.c         ****     if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
2190:fat.c         ****         return 0;
2191:fat.c         ****     if(fs != parent_new->fs)
2192:fat.c         ****         return 0;
2193:fat.c         **** 
2194:fat.c         ****     /* use existing file name if none has been specified */
2195:fat.c         ****     if(!file_new)
2196:fat.c         ****         file_new = dir_entry->long_name;
2197:fat.c         **** 
2198:fat.c         ****     /* create file with new file name */
2199:fat.c         ****     struct fat_dir_entry_struct dir_entry_new;
2200:fat.c         ****     if(!fat_create_file(parent_new, file_new, &dir_entry_new))
2201:fat.c         ****         return 0;
2202:fat.c         **** 
2203:fat.c         ****     /* copy members of directory entry which do not change with rename */
2204:fat.c         ****     dir_entry_new.attributes = dir_entry->attributes;
2205:fat.c         **** #if FAT_DATETIME_SUPPORT
2206:fat.c         ****     dir_entry_new.modification_time = dir_entry->modification_time;
2207:fat.c         ****     dir_entry_new.modification_date = dir_entry->modification_date;
2208:fat.c         **** #endif
2209:fat.c         ****     dir_entry_new.cluster = dir_entry->cluster;
2210:fat.c         ****     dir_entry_new.file_size = dir_entry->file_size;
2211:fat.c         **** 
2212:fat.c         ****     /* make the new file name point to the old file's content */
2213:fat.c         ****     if(!fat_write_dir_entry(fs, &dir_entry_new))
2214:fat.c         ****     {
2215:fat.c         ****         fat_delete_file(fs, &dir_entry_new);
2216:fat.c         ****         return 0;
2217:fat.c         ****     }
2218:fat.c         ****     
2219:fat.c         ****     /* delete the old file, but not its clusters, which have already been remapped above */
2220:fat.c         ****     dir_entry->cluster = 0;
2221:fat.c         ****     if(!fat_delete_file(fs, dir_entry))
2222:fat.c         ****         return 0;
2223:fat.c         **** 
2224:fat.c         ****     *dir_entry = dir_entry_new;
2225:fat.c         ****     return 1;
2226:fat.c         **** }
2227:fat.c         **** #endif
2228:fat.c         **** 
2229:fat.c         **** #if DOXYGEN || FAT_WRITE_SUPPORT
2230:fat.c         **** /**
2231:fat.c         ****  * \ingroup fat_dir
2232:fat.c         ****  * Creates a directory.
2233:fat.c         ****  *
2234:fat.c         ****  * Creates a directory and obtains its directory entry.
2235:fat.c         ****  * If the directory to create already exists, its
2236:fat.c         ****  * directory entry will be returned within the dir_entry
2237:fat.c         ****  * parameter.
2238:fat.c         ****  *
2239:fat.c         ****  * \note The notes which apply to fat_create_file() also
2240:fat.c         ****  * apply to this function.
2241:fat.c         ****  *
2242:fat.c         ****  * \param[in] parent The handle of the parent directory of the new directory.
2243:fat.c         ****  * \param[in] dir The name of the directory to create.
2244:fat.c         ****  * \param[out] dir_entry The directory entry to fill for the new directory.
2245:fat.c         ****  * \returns 0 on failure, 1 on success.
2246:fat.c         ****  * \see fat_delete_dir
2247:fat.c         ****  */
2248:fat.c         **** uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct*
2249:fat.c         **** {
2250:fat.c         ****     if(!parent || !dir || !dir[0] || !dir_entry)
2251:fat.c         ****         return 0;
2252:fat.c         **** 
2253:fat.c         ****     /* check if the file or directory already exists */
2254:fat.c         ****     while(fat_read_dir(parent, dir_entry))
2255:fat.c         ****     {
2256:fat.c         ****         if(strcmp(dir, dir_entry->long_name) == 0)
2257:fat.c         ****         {
2258:fat.c         ****             fat_reset_dir(parent);
2259:fat.c         ****             return 0;
2260:fat.c         ****         }
2261:fat.c         ****     }
2262:fat.c         **** 
2263:fat.c         ****     struct fat_fs_struct* fs = parent->fs;
2264:fat.c         **** 
2265:fat.c         ****     /* allocate cluster which will hold directory entries */
2266:fat.c         ****     cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
2267:fat.c         ****     if(!dir_cluster)
2268:fat.c         ****         return 0;
2269:fat.c         **** 
2270:fat.c         ****     /* clear cluster to prevent bogus directory entries */
2271:fat.c         ****     fat_clear_cluster(fs, dir_cluster);
2272:fat.c         ****     
2273:fat.c         ****     memset(dir_entry, 0, sizeof(*dir_entry));
2274:fat.c         ****     dir_entry->attributes = FAT_ATTRIB_DIR;
2275:fat.c         **** 
2276:fat.c         ****     /* create "." directory self reference */
2277:fat.c         ****     dir_entry->entry_offset = fs->header.cluster_zero_offset +
2278:fat.c         ****                               (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
2279:fat.c         ****     dir_entry->long_name[0] = '.';
2280:fat.c         ****     dir_entry->cluster = dir_cluster;
2281:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
2282:fat.c         ****     {
2283:fat.c         ****         fat_free_clusters(fs, dir_cluster);
2284:fat.c         ****         return 0;
2285:fat.c         ****     }
2286:fat.c         **** 
2287:fat.c         ****     /* create ".." parent directory reference */
2288:fat.c         ****     dir_entry->entry_offset += 32;
2289:fat.c         ****     dir_entry->long_name[1] = '.';
2290:fat.c         ****     dir_entry->cluster = parent->dir_entry.cluster;
2291:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
2292:fat.c         ****     {
2293:fat.c         ****         fat_free_clusters(fs, dir_cluster);
2294:fat.c         ****         return 0;
2295:fat.c         ****     }
2296:fat.c         **** 
2297:fat.c         ****     /* fill directory entry */
2298:fat.c         ****     strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
2299:fat.c         ****     dir_entry->cluster = dir_cluster;
2300:fat.c         **** 
2301:fat.c         ****     /* find place where to store directory entry */
2302:fat.c         ****     if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
2303:fat.c         ****     {
2304:fat.c         ****         fat_free_clusters(fs, dir_cluster);
2305:fat.c         ****         return 0;
2306:fat.c         ****     }
2307:fat.c         **** 
2308:fat.c         ****     /* write directory to disk */
2309:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
2310:fat.c         ****     {
2311:fat.c         ****         fat_free_clusters(fs, dir_cluster);
2312:fat.c         ****         return 0;
2313:fat.c         ****     }
2314:fat.c         **** 
2315:fat.c         ****     return 1;
2316:fat.c         **** }
2317:fat.c         **** #endif
2318:fat.c         **** 
2319:fat.c         **** /**
2320:fat.c         ****  * \ingroup fat_dir
2321:fat.c         ****  * Deletes a directory.
2322:fat.c         ****  *
2323:fat.c         ****  * This is just a synonym for fat_delete_file().
2324:fat.c         ****  * If a directory is deleted without first deleting its
2325:fat.c         ****  * subdirectories and files, disk space occupied by these
2326:fat.c         ****  * files will get wasted as there is no chance to release
2327:fat.c         ****  * it and mark it as free.
2328:fat.c         ****  * 
2329:fat.c         ****  * \param[in] fs The filesystem on which to operate.
2330:fat.c         ****  * \param[in] dir_entry The directory entry of the directory to delete.
2331:fat.c         ****  * \returns 0 on failure, 1 on success.
2332:fat.c         ****  * \see fat_create_dir
2333:fat.c         ****  */
2334:fat.c         **** #ifdef DOXYGEN
2335:fat.c         **** uint8_t fat_delete_dir(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry);
2336:fat.c         **** #endif
2337:fat.c         **** 
2338:fat.c         **** /**
2339:fat.c         ****  * \ingroup fat_dir
2340:fat.c         ****  * Moves or renames a directory.
2341:fat.c         ****  *
2342:fat.c         ****  * This is just a synonym for fat_move_file().
2343:fat.c         ****  * 
2344:fat.c         ****  * \param[in] fs The filesystem on which to operate.
2345:fat.c         ****  * \param[in,out] dir_entry The directory entry of the directory to move.
2346:fat.c         ****  * \param[in] parent_new The handle of the new parent directory.
2347:fat.c         ****  * \param[in] dir_new The directory's new name.
2348:fat.c         ****  * \returns 0 on failure, 1 on success.
2349:fat.c         ****  * \see fat_create_dir, fat_delete_dir, fat_move_file
2350:fat.c         ****  */
2351:fat.c         **** #ifdef DOXYGEN
2352:fat.c         **** uint8_t fat_move_dir(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_d
2353:fat.c         **** #endif
2354:fat.c         **** 
2355:fat.c         **** #if DOXYGEN || FAT_DATETIME_SUPPORT
2356:fat.c         **** /**
2357:fat.c         ****  * \ingroup fat_file
2358:fat.c         ****  * Returns the modification date of a file.
2359:fat.c         ****  *
2360:fat.c         ****  * \param[in] dir_entry The directory entry of which to return the modification date.
2361:fat.c         ****  * \param[out] year The year the file was last modified.
2362:fat.c         ****  * \param[out] month The month the file was last modified.
2363:fat.c         ****  * \param[out] day The day the file was last modified.
2364:fat.c         ****  */
2365:fat.c         **** void fat_get_file_modification_date(const struct fat_dir_entry_struct* dir_entry, uint16_t* year, u
2366:fat.c         **** {
2367:fat.c         ****     if(!dir_entry)
2368:fat.c         ****         return;
2369:fat.c         **** 
2370:fat.c         ****     *year = 1980 + ((dir_entry->modification_date >> 9) & 0x7f);
2371:fat.c         ****     *month = (dir_entry->modification_date >> 5) & 0x0f;
2372:fat.c         ****     *day = (dir_entry->modification_date >> 0) & 0x1f;
2373:fat.c         **** }
2374:fat.c         **** #endif
2375:fat.c         **** 
2376:fat.c         **** #if DOXYGEN || FAT_DATETIME_SUPPORT
2377:fat.c         **** /**
2378:fat.c         ****  * \ingroup fat_file
2379:fat.c         ****  * Returns the modification time of a file.
2380:fat.c         ****  *
2381:fat.c         ****  * \param[in] dir_entry The directory entry of which to return the modification time.
2382:fat.c         ****  * \param[out] hour The hour the file was last modified.
2383:fat.c         ****  * \param[out] min The min the file was last modified.
2384:fat.c         ****  * \param[out] sec The sec the file was last modified.
2385:fat.c         ****  */
2386:fat.c         **** void fat_get_file_modification_time(const struct fat_dir_entry_struct* dir_entry, uint8_t* hour, ui
2387:fat.c         **** {
2388:fat.c         ****     if(!dir_entry)
2389:fat.c         ****         return;
2390:fat.c         **** 
2391:fat.c         ****     *hour = (dir_entry->modification_time >> 11) & 0x1f;
2392:fat.c         ****     *min = (dir_entry->modification_time >> 5) & 0x3f;
2393:fat.c         ****     *sec = ((dir_entry->modification_time >> 0) & 0x1f) * 2;
2394:fat.c         **** }
2395:fat.c         **** #endif
2396:fat.c         **** 
2397:fat.c         **** #if DOXYGEN || (FAT_WRITE_SUPPORT && FAT_DATETIME_SUPPORT)
2398:fat.c         **** /**
2399:fat.c         ****  * \ingroup fat_file
2400:fat.c         ****  * Sets the modification time of a date.
2401:fat.c         ****  *
2402:fat.c         ****  * \param[in] dir_entry The directory entry for which to set the modification date.
2403:fat.c         ****  * \param[in] year The year the file was last modified.
2404:fat.c         ****  * \param[in] month The month the file was last modified.
2405:fat.c         ****  * \param[in] day The day the file was last modified.
2406:fat.c         ****  */
2407:fat.c         **** void fat_set_file_modification_date(struct fat_dir_entry_struct* dir_entry, uint16_t year, uint8_t 
2408:fat.c         **** {
2409:fat.c         ****     if(!dir_entry)
2410:fat.c         ****         return;
2411:fat.c         **** 
2412:fat.c         ****     dir_entry->modification_date =
2413:fat.c         ****         ((year - 1980) << 9) |
2414:fat.c         ****         ((uint16_t) month << 5) |
2415:fat.c         ****         ((uint16_t) day << 0);
2416:fat.c         **** }
2417:fat.c         **** #endif
2418:fat.c         **** 
2419:fat.c         **** #if DOXYGEN || (FAT_WRITE_SUPPORT && FAT_DATETIME_SUPPORT)
2420:fat.c         **** /**
2421:fat.c         ****  * \ingroup fat_file
2422:fat.c         ****  * Sets the modification time of a file.
2423:fat.c         ****  *
2424:fat.c         ****  * \param[in] dir_entry The directory entry for which to set the modification time.
2425:fat.c         ****  * \param[in] hour The year the file was last modified.
2426:fat.c         ****  * \param[in] min The month the file was last modified.
2427:fat.c         ****  * \param[in] sec The day the file was last modified.
2428:fat.c         ****  */
2429:fat.c         **** void fat_set_file_modification_time(struct fat_dir_entry_struct* dir_entry, uint8_t hour, uint8_t m
2430:fat.c         **** {
2431:fat.c         ****     if(!dir_entry)
2432:fat.c         ****         return;
2433:fat.c         **** 
2434:fat.c         ****     dir_entry->modification_time =
2435:fat.c         ****         ((uint16_t) hour << 11) |
2436:fat.c         ****         ((uint16_t) min << 5) |
2437:fat.c         ****         ((uint16_t) sec >> 1) ;
2438:fat.c         **** }
2439:fat.c         **** #endif
2440:fat.c         **** 
2441:fat.c         **** /**
2442:fat.c         ****  * \ingroup fat_fs
2443:fat.c         ****  * Returns the amount of total storage capacity of the filesystem in bytes.
2444:fat.c         ****  *
2445:fat.c         ****  * \param[in] fs The filesystem on which to operate.
2446:fat.c         ****  * \returns 0 on failure, the filesystem size in bytes otherwise.
2447:fat.c         ****  */
2448:fat.c         **** offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
2449:fat.c         **** {
2450:fat.c         ****     if(!fs)
2451:fat.c         ****         return 0;
2452:fat.c         **** 
2453:fat.c         **** #if FAT_FAT32_SUPPORT
2454:fat.c         ****     if(fs->partition->type == PARTITION_TYPE_FAT32)
2455:fat.c         ****         return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
2456:fat.c         ****     else
2457:fat.c         **** #endif
2458:fat.c         ****         return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
2459:fat.c         **** }
2460:fat.c         **** 
2461:fat.c         **** /**
2462:fat.c         ****  * \ingroup fat_fs
2463:fat.c         ****  * Returns the amount of free storage capacity on the filesystem in bytes.
2464:fat.c         ****  *
2465:fat.c         ****  * \note As the FAT filesystem is cluster based, this function does not
2466:fat.c         ****  *       return continuous values but multiples of the cluster size.
2467:fat.c         ****  *
2468:fat.c         ****  * \param[in] fs The filesystem on which to operate.
2469:fat.c         ****  * \returns 0 on failure, the free filesystem space in bytes otherwise.
2470:fat.c         ****  */
2471:fat.c         **** offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
2472:fat.c         **** {
2473:fat.c         ****     if(!fs)
2474:fat.c         ****         return 0;
2475:fat.c         **** 
2476:fat.c         ****     uint8_t fat[32];
2477:fat.c         ****     struct fat_usage_count_callback_arg count_arg;
2478:fat.c         ****     count_arg.cluster_count = 0;
2479:fat.c         ****     count_arg.buffer_size = sizeof(fat);
2480:fat.c         **** 
2481:fat.c         ****     offset_t fat_offset = fs->header.fat_offset;
2482:fat.c         ****     uint32_t fat_size = fs->header.fat_size;
2483:fat.c         ****     while(fat_size > 0)
2484:fat.c         ****     {
2485:fat.c         ****         uintptr_t length = UINTPTR_MAX - 1;
2486:fat.c         ****         if(fat_size < length)
2487:fat.c         ****             length = fat_size;
2488:fat.c         **** 
2489:fat.c         ****         if(!fs->partition->device_read_interval(fat_offset,
2490:fat.c         ****                                                 fat,
2491:fat.c         ****                                                 sizeof(fat),
2492:fat.c         ****                                                 length,
2493:fat.c         **** #if FAT_FAT32_SUPPORT
2494:fat.c         ****                                                 (fs->partition->type == PARTITION_TYPE_FAT16) ?
2495:fat.c         ****                                                     fat_get_fs_free_16_callback :
2496:fat.c         ****                                                     fat_get_fs_free_32_callback,
2497:fat.c         **** #else
2498:fat.c         ****                                                 fat_get_fs_free_16_callback,
2499:fat.c         **** #endif
2500:fat.c         ****                                                 &count_arg
2501:fat.c         ****                                                )
2502:fat.c         ****           )
2503:fat.c         ****             return 0;
2504:fat.c         **** 
2505:fat.c         ****         fat_offset += length;
2506:fat.c         ****         fat_size -= length;
2507:fat.c         ****     }
2508:fat.c         **** 
2509:fat.c         ****     return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
2510:fat.c         **** }
2511:fat.c         **** 
2512:fat.c         **** /**
2513:fat.c         ****  * \ingroup fat_fs
2514:fat.c         ****  * Callback function used for counting free clusters in a FAT.
2515:fat.c         ****  */
2516:fat.c         **** uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
2517:fat.c         **** {
  84               		.loc 1 2517 1 is_stmt 1 view -0
  85               		.cfi_startproc
  86               		.loc 1 2517 1 is_stmt 0 view .LVU18
  87 0024 CF92      		push r12
  88               	.LCFI0:
  89               		.cfi_def_cfa_offset 3
  90               		.cfi_offset 12, -2
  91 0026 DF92      		push r13
  92               	.LCFI1:
  93               		.cfi_def_cfa_offset 4
  94               		.cfi_offset 13, -3
  95 0028 EF92      		push r14
  96               	.LCFI2:
  97               		.cfi_def_cfa_offset 5
  98               		.cfi_offset 14, -4
  99 002a FF92      		push r15
 100               	.LCFI3:
 101               		.cfi_def_cfa_offset 6
 102               		.cfi_offset 15, -5
 103 002c 0F93      		push r16
 104               	.LCFI4:
 105               		.cfi_def_cfa_offset 7
 106               		.cfi_offset 16, -6
 107 002e 1F93      		push r17
 108               	.LCFI5:
 109               		.cfi_def_cfa_offset 8
 110               		.cfi_offset 17, -7
 111 0030 CF93      		push r28
 112               	.LCFI6:
 113               		.cfi_def_cfa_offset 9
 114               		.cfi_offset 28, -8
 115 0032 DF93      		push r29
 116               	.LCFI7:
 117               		.cfi_def_cfa_offset 10
 118               		.cfi_offset 29, -9
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 8 */
 122               	.L__stack_usage = 8
 123 0034 6C01      		movw r12,r24
 124 0036 8901      		movw r16,r18
2518:fat.c         ****     struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
 125               		.loc 1 2518 5 is_stmt 1 view .LVU19
 126               	.LVL8:
2519:fat.c         ****     uintptr_t buffer_size = count_arg->buffer_size;
 127               		.loc 1 2519 5 view .LVU20
 128               		.loc 1 2519 15 is_stmt 0 view .LVU21
 129 0038 F901      		movw r30,r18
 130 003a E280      		ldd r14,Z+2
 131 003c F380      		ldd r15,Z+3
 132               	.LVL9:
2520:fat.c         **** 
2521:fat.c         ****     for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
 133               		.loc 1 2521 5 is_stmt 1 view .LVU22
 134               	.LBB15:
 135               		.loc 1 2521 9 view .LVU23
 136               		.loc 1 2521 19 is_stmt 0 view .LVU24
 137 003e D0E0      		ldi r29,0
 138 0040 C0E0      		ldi r28,0
 139               	.LVL10:
 140               	.L6:
 141               		.loc 1 2521 19 view .LVU25
 142 0042 C601      		movw r24,r12
 143 0044 8C0F      		add r24,r28
 144 0046 9D1F      		adc r25,r29
 145               	.LVL11:
 146               		.loc 1 2521 5 discriminator 1 view .LVU26
 147 0048 CE15      		cp r28,r14
 148 004a DF05      		cpc r29,r15
 149 004c 00F0      		brlo .L8
 150               	.LBE15:
2522:fat.c         ****     {
2523:fat.c         ****         uint16_t cluster = read16(buffer);
2524:fat.c         ****         if(cluster == HTOL16(FAT16_CLUSTER_FREE))
2525:fat.c         ****             ++(count_arg->cluster_count);
2526:fat.c         ****     }
2527:fat.c         **** 
2528:fat.c         ****     return 1;
 151               		.loc 1 2528 5 is_stmt 1 view .LVU27
2529:fat.c         **** }
 152               		.loc 1 2529 1 is_stmt 0 view .LVU28
 153 004e 81E0      		ldi r24,lo8(1)
 154               	.LVL12:
 155               	/* epilogue start */
 156               		.loc 1 2529 1 view .LVU29
 157 0050 DF91      		pop r29
 158 0052 CF91      		pop r28
 159               	.LVL13:
 160               		.loc 1 2529 1 view .LVU30
 161 0054 1F91      		pop r17
 162 0056 0F91      		pop r16
 163               	.LVL14:
 164               		.loc 1 2529 1 view .LVU31
 165 0058 FF90      		pop r15
 166 005a EF90      		pop r14
 167               	.LVL15:
 168               		.loc 1 2529 1 view .LVU32
 169 005c DF90      		pop r13
 170 005e CF90      		pop r12
 171               		.loc 1 2529 1 view .LVU33
 172 0060 0895      		ret
 173               	.LVL16:
 174               	.L8:
 175               	.LBB17:
 176               	.LBB16:
2523:fat.c         ****         if(cluster == HTOL16(FAT16_CLUSTER_FREE))
 177               		.loc 1 2523 9 is_stmt 1 view .LVU34
2523:fat.c         ****         if(cluster == HTOL16(FAT16_CLUSTER_FREE))
 178               		.loc 1 2523 28 is_stmt 0 view .LVU35
 179 0062 0E94 0000 		call read16
 180               	.LVL17:
2524:fat.c         ****             ++(count_arg->cluster_count);
 181               		.loc 1 2524 9 is_stmt 1 view .LVU36
2524:fat.c         ****             ++(count_arg->cluster_count);
 182               		.loc 1 2524 11 is_stmt 0 view .LVU37
 183 0066 892B      		or r24,r25
 184 0068 01F4      		brne .L7
2525:fat.c         ****     }
 185               		.loc 1 2525 13 is_stmt 1 view .LVU38
 186 006a F801      		movw r30,r16
 187 006c 8081      		ld r24,Z
 188 006e 9181      		ldd r25,Z+1
 189               	.LVL18:
2525:fat.c         ****     }
 190               		.loc 1 2525 13 is_stmt 0 view .LVU39
 191 0070 0196      		adiw r24,1
 192 0072 9183      		std Z+1,r25
 193 0074 8083      		st Z,r24
 194               	.L7:
2525:fat.c         ****     }
 195               		.loc 1 2525 13 view .LVU40
 196               	.LBE16:
2521:fat.c         ****     {
 197               		.loc 1 2521 45 discriminator 2 view .LVU41
 198 0076 2296      		adiw r28,2
 199               	.LVL19:
2521:fat.c         ****     {
 200               		.loc 1 2521 45 discriminator 2 view .LVU42
 201 0078 00C0      		rjmp .L6
 202               	.LBE17:
 203               		.cfi_endproc
 204               	.LFE31:
 206               		.section	.rodata
 207               	.LC0:
 208 0000 01        		.byte	1
 209 0001 03        		.byte	3
 210 0002 05        		.byte	5
 211 0003 07        		.byte	7
 212 0004 09        		.byte	9
 213 0005 0E        		.byte	14
 214 0006 10        		.byte	16
 215 0007 12        		.byte	18
 216 0008 14        		.byte	20
 217 0009 16        		.byte	22
 218 000a 18        		.byte	24
 219 000b 1C        		.byte	28
 220 000c 1E        		.byte	30
 221               		.text
 223               	fat_dir_entry_read_callback:
 224               	.LVL20:
 225               	.LFB21:
1594:fat.c         ****     struct fat_read_dir_callback_arg* arg = p;
 226               		.loc 1 1594 1 is_stmt 1 view -0
 227               		.cfi_startproc
1594:fat.c         ****     struct fat_read_dir_callback_arg* arg = p;
 228               		.loc 1 1594 1 is_stmt 0 view .LVU44
 229 007a 8F92      		push r8
 230               	.LCFI8:
 231               		.cfi_def_cfa_offset 3
 232               		.cfi_offset 8, -2
 233 007c 9F92      		push r9
 234               	.LCFI9:
 235               		.cfi_def_cfa_offset 4
 236               		.cfi_offset 9, -3
 237 007e AF92      		push r10
 238               	.LCFI10:
 239               		.cfi_def_cfa_offset 5
 240               		.cfi_offset 10, -4
 241 0080 BF92      		push r11
 242               	.LCFI11:
 243               		.cfi_def_cfa_offset 6
 244               		.cfi_offset 11, -5
 245 0082 CF92      		push r12
 246               	.LCFI12:
 247               		.cfi_def_cfa_offset 7
 248               		.cfi_offset 12, -6
 249 0084 DF92      		push r13
 250               	.LCFI13:
 251               		.cfi_def_cfa_offset 8
 252               		.cfi_offset 13, -7
 253 0086 EF92      		push r14
 254               	.LCFI14:
 255               		.cfi_def_cfa_offset 9
 256               		.cfi_offset 14, -8
 257 0088 FF92      		push r15
 258               	.LCFI15:
 259               		.cfi_def_cfa_offset 10
 260               		.cfi_offset 15, -9
 261 008a 0F93      		push r16
 262               	.LCFI16:
 263               		.cfi_def_cfa_offset 11
 264               		.cfi_offset 16, -10
 265 008c 1F93      		push r17
 266               	.LCFI17:
 267               		.cfi_def_cfa_offset 12
 268               		.cfi_offset 17, -11
 269 008e CF93      		push r28
 270               	.LCFI18:
 271               		.cfi_def_cfa_offset 13
 272               		.cfi_offset 28, -12
 273 0090 DF93      		push r29
 274               	.LCFI19:
 275               		.cfi_def_cfa_offset 14
 276               		.cfi_offset 29, -13
 277 0092 CDB7      		in r28,__SP_L__
 278 0094 DEB7      		in r29,__SP_H__
 279               	.LCFI20:
 280               		.cfi_def_cfa_register 28
 281 0096 2D97      		sbiw r28,13
 282               	.LCFI21:
 283               		.cfi_def_cfa_offset 27
 284 0098 0FB6      		in __tmp_reg__,__SREG__
 285 009a F894      		cli
 286 009c DEBF      		out __SP_H__,r29
 287 009e 0FBE      		out __SREG__,__tmp_reg__
 288 00a0 CDBF      		out __SP_L__,r28
 289               	/* prologue: function */
 290               	/* frame size = 13 */
 291               	/* stack size = 25 */
 292               	.L__stack_usage = 25
 293 00a2 7C01      		movw r14,r24
 294 00a4 4A01      		movw r8,r20
 295 00a6 5B01      		movw r10,r22
 296 00a8 6901      		movw r12,r18
1595:fat.c         ****     struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
 297               		.loc 1 1595 5 is_stmt 1 view .LVU45
 298               	.LVL21:
1596:fat.c         **** 
 299               		.loc 1 1596 5 view .LVU46
1596:fat.c         **** 
 300               		.loc 1 1596 34 is_stmt 0 view .LVU47
 301 00aa D901      		movw r26,r18
 302 00ac 0D91      		ld r16,X+
 303 00ae 1C91      		ld r17,X
 304 00b0 1197      		sbiw r26,1
 305               	.LVL22:
1598:fat.c         **** 
 306               		.loc 1 1598 5 is_stmt 1 view .LVU48
1598:fat.c         **** 
 307               		.loc 1 1598 21 is_stmt 0 view .LVU49
 308 00b2 1296      		adiw r26,2
 309 00b4 8D91      		ld r24,X+
 310 00b6 9C91      		ld r25,X
 311 00b8 1397      		sbiw r26,2+1
 312               	.LVL23:
1598:fat.c         **** 
 313               		.loc 1 1598 21 view .LVU50
 314 00ba 8096      		adiw r24,32
 315 00bc 1396      		adiw r26,2+1
 316 00be 9C93      		st X,r25
 317 00c0 8E93      		st -X,r24
 318 00c2 1297      		sbiw r26,2
1601:fat.c         ****     {
 319               		.loc 1 1601 5 is_stmt 1 view .LVU51
1601:fat.c         ****     {
 320               		.loc 1 1601 14 is_stmt 0 view .LVU52
 321 00c4 F701      		movw r30,r14
 322 00c6 8081      		ld r24,Z
1601:fat.c         ****     {
 323               		.loc 1 1601 7 view .LVU53
 324 00c8 853E      		cpi r24,lo8(-27)
 325 00ca 01F0      		breq .L10
1601:fat.c         ****     {
 326               		.loc 1 1601 42 discriminator 1 view .LVU54
 327 00cc 8111      		cpse r24,__zero_reg__
 328 00ce 00C0      		rjmp .L11
 329               	.L10:
1604:fat.c         **** #endif
 330               		.loc 1 1604 9 is_stmt 1 view .LVU55
1604:fat.c         **** #endif
 331               		.loc 1 1604 23 is_stmt 0 view .LVU56
 332 00d0 D601      		movw r26,r12
 333 00d2 1496      		adiw r26,4
 334 00d4 1C92      		st X,__zero_reg__
1606:fat.c         ****     }
 335               		.loc 1 1606 9 is_stmt 1 view .LVU57
 336               	.LVL24:
 337               	.L18:
 338               	.LBB18:
1638:fat.c         ****     }
 339               		.loc 1 1638 9 view .LVU58
1638:fat.c         ****     }
 340               		.loc 1 1638 16 is_stmt 0 view .LVU59
 341 00d6 81E0      		ldi r24,lo8(1)
 342               	.L9:
 343               	/* epilogue start */
 344               	.LBE18:
1710:fat.c         **** 
 345               		.loc 1 1710 1 view .LVU60
 346 00d8 2D96      		adiw r28,13
 347 00da 0FB6      		in __tmp_reg__,__SREG__
 348 00dc F894      		cli
 349 00de DEBF      		out __SP_H__,r29
 350 00e0 0FBE      		out __SREG__,__tmp_reg__
 351 00e2 CDBF      		out __SP_L__,r28
 352 00e4 DF91      		pop r29
 353 00e6 CF91      		pop r28
 354 00e8 1F91      		pop r17
 355 00ea 0F91      		pop r16
 356               	.LVL25:
1710:fat.c         **** 
 357               		.loc 1 1710 1 view .LVU61
 358 00ec FF90      		pop r15
 359 00ee EF90      		pop r14
 360               	.LVL26:
1710:fat.c         **** 
 361               		.loc 1 1710 1 view .LVU62
 362 00f0 DF90      		pop r13
 363 00f2 CF90      		pop r12
 364               	.LVL27:
1710:fat.c         **** 
 365               		.loc 1 1710 1 view .LVU63
 366 00f4 BF90      		pop r11
 367 00f6 AF90      		pop r10
 368 00f8 9F90      		pop r9
 369 00fa 8F90      		pop r8
 370 00fc 0895      		ret
 371               	.LVL28:
 372               	.L11:
1615:fat.c         **** #if FAT_LFN_SUPPORT
 373               		.loc 1 1615 5 is_stmt 1 view .LVU64
1617:fat.c         ****     {
 374               		.loc 1 1617 5 view .LVU65
1617:fat.c         ****     {
 375               		.loc 1 1617 7 is_stmt 0 view .LVU66
 376 00fe 8385      		ldd r24,Z+11
 377 0100 8F30      		cpi r24,lo8(15)
 378 0102 01F0      		breq .+2
 379 0104 00C0      		rjmp .L13
 380               	.LBB20:
1620:fat.c         ****         {
 381               		.loc 1 1620 9 is_stmt 1 view .LVU67
1620:fat.c         ****         {
 382               		.loc 1 1620 15 is_stmt 0 view .LVU68
 383 0106 1496      		adiw r26,4
 384 0108 8C91      		ld r24,X
1620:fat.c         ****         {
 385               		.loc 1 1620 11 view .LVU69
 386 010a 8823      		tst r24
 387 010c 01F0      		breq .L14
1620:fat.c         ****         {
 388               		.loc 1 1620 31 discriminator 1 view .LVU70
 389 010e 9585      		ldd r25,Z+13
 390 0110 8917      		cp r24,r25
 391 0112 01F0      		breq .L15
 392               	.L14:
1623:fat.c         **** 
 393               		.loc 1 1623 13 is_stmt 1 view .LVU71
 394 0114 8BE2      		ldi r24,lo8(43)
 395 0116 F801      		movw r30,r16
 396               		0:
 397 0118 1192      		st Z+,__zero_reg__
 398 011a 8A95      		dec r24
 399 011c 01F4      		brne 0b
1625:fat.c         ****             dir_entry->entry_offset = offset;
 400               		.loc 1 1625 13 view .LVU72
1625:fat.c         ****             dir_entry->entry_offset = offset;
 401               		.loc 1 1625 27 is_stmt 0 view .LVU73
 402 011e D701      		movw r26,r14
 403 0120 1D96      		adiw r26,13
 404 0122 8C91      		ld r24,X
 405 0124 F601      		movw r30,r12
 406 0126 8483      		std Z+4,r24
1626:fat.c         ****         }
 407               		.loc 1 1626 13 is_stmt 1 view .LVU74
1626:fat.c         ****         }
 408               		.loc 1 1626 37 is_stmt 0 view .LVU75
 409 0128 D801      		movw r26,r16
 410 012a 9796      		adiw r26,39
 411 012c 8D92      		st X+,r8
 412 012e 9D92      		st X+,r9
 413 0130 AD92      		st X+,r10
 414 0132 BC92      		st X,r11
 415 0134 9A97      		sbiw r26,39+3
 416               	.L15:
1633:fat.c         ****         const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
 417               		.loc 1 1633 9 is_stmt 1 view .LVU76
1633:fat.c         ****         const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
 418               		.loc 1 1633 44 is_stmt 0 view .LVU77
 419 0136 F701      		movw r30,r14
 420 0138 2081      		ld r18,Z
 421 013a 2F73      		andi r18,lo8(63)
1633:fat.c         ****         const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
 422               		.loc 1 1633 52 view .LVU78
 423 013c 2150      		subi r18,1
 424 013e 330B      		sbc r19,r19
1633:fat.c         ****         const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
 425               		.loc 1 1633 57 view .LVU79
 426 0140 4DE0      		ldi r20,lo8(13)
 427               	.LVL29:
1633:fat.c         ****         const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
 428               		.loc 1 1633 57 view .LVU80
 429 0142 429F      		mul r20,r18
 430 0144 C001      		movw r24,r0
 431 0146 439F      		mul r20,r19
 432 0148 900D      		add r25,r0
 433 014a 1124      		clr __zero_reg__
 434               	.LVL30:
1634:fat.c         ****         for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
 435               		.loc 1 1634 9 is_stmt 1 view .LVU81
1634:fat.c         ****         for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
 436               		.loc 1 1634 23 is_stmt 0 view .LVU82
 437 014c E0E0      		ldi r30,lo8(.LC0)
 438 014e F0E0      		ldi r31,hi8(.LC0)
 439 0150 DE01      		movw r26,r28
 440 0152 1196      		adiw r26,1
 441               		0:
 442 0154 0190      		ld r0,Z+
 443 0156 0D92      		st X+,r0
 444 0158 4A95      		dec r20
 445 015a 01F4      		brne 0b
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 446               		.loc 1 1635 9 is_stmt 1 view .LVU83
 447               	.LBB19:
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 448               		.loc 1 1635 13 view .LVU84
 449               	.LVL31:
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 450               		.loc 1 1635 13 is_stmt 0 view .LVU85
 451 015c FE01      		movw r30,r28
 452 015e 3196      		adiw r30,1
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 453               		.loc 1 1635 9 view .LVU86
 454 0160 2DE0      		ldi r18,lo8(13)
 455 0162 280F      		add r18,r24
 456               	.LVL32:
 457               	.L16:
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 458               		.loc 1 1635 36 discriminator 3 view .LVU87
 459 0164 8F31      		cpi r24,31
 460 0166 9105      		cpc r25,__zero_reg__
 461 0168 00F0      		brlo .+2
 462 016a 00C0      		rjmp .L18
1636:fat.c         **** 
 463               		.loc 1 1636 13 is_stmt 1 discriminator 4 view .LVU88
1636:fat.c         **** 
 464               		.loc 1 1636 61 is_stmt 0 discriminator 4 view .LVU89
 465 016c A191      		ld r26,Z+
1636:fat.c         **** 
 466               		.loc 1 1636 48 discriminator 4 view .LVU90
 467 016e AE0D      		add r26,r14
 468 0170 BF2D      		mov r27,r15
 469 0172 B11D      		adc r27,__zero_reg__
 470 0174 3C91      		ld r19,X
1636:fat.c         **** 
 471               		.loc 1 1636 40 discriminator 4 view .LVU91
 472 0176 D801      		movw r26,r16
 473 0178 A80F      		add r26,r24
 474 017a B91F      		adc r27,r25
 475 017c 3C93      		st X,r19
1636:fat.c         **** 
 476               		.loc 1 1636 40 discriminator 4 view .LVU92
 477 017e 0196      		adiw r24,1
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 478               		.loc 1 1635 9 discriminator 4 view .LVU93
 479 0180 2813      		cpse r18,r24
 480 0182 00C0      		rjmp .L16
 481 0184 00C0      		rjmp .L18
 482               	.LVL33:
 483               	.L13:
1635:fat.c         ****             long_name[char_offset + i] = buffer[char_mapping[i]];
 484               		.loc 1 1635 9 discriminator 4 view .LVU94
 485               	.LBE19:
 486               	.LBE20:
1645:fat.c         **** #endif
 487               		.loc 1 1645 9 is_stmt 1 view .LVU95
1645:fat.c         **** #endif
 488               		.loc 1 1645 11 is_stmt 0 view .LVU96
 489 0186 D801      		movw r26,r16
 490 0188 8C91      		ld r24,X
 491 018a 8823      		tst r24
 492 018c 01F0      		breq .L19
1645:fat.c         **** #endif
 493               		.loc 1 1645 53 discriminator 1 view .LVU97
 494 018e C701      		movw r24,r14
 495 0190 0E94 0000 		call fat_calc_83_checksum
 496               	.LVL34:
1645:fat.c         **** #endif
 497               		.loc 1 1645 33 discriminator 1 view .LVU98
 498 0194 F601      		movw r30,r12
 499 0196 9481      		ldd r25,Z+4
 500 0198 9817      		cp r25,r24
 501 019a 01F4      		brne .+2
 502 019c 00C0      		rjmp .L20
 503               	.L19:
 504               	.LBB21:
1649:fat.c         ****             dir_entry->entry_offset = offset;
 505               		.loc 1 1649 13 is_stmt 1 view .LVU99
 506 019e 87E2      		ldi r24,lo8(39)
 507 01a0 D801      		movw r26,r16
 508               		0:
 509 01a2 1D92      		st X+,__zero_reg__
 510 01a4 8A95      		dec r24
 511 01a6 01F4      		brne 0b
1650:fat.c         **** 
 512               		.loc 1 1650 13 view .LVU100
1650:fat.c         **** 
 513               		.loc 1 1650 37 is_stmt 0 view .LVU101
 514 01a8 F801      		movw r30,r16
 515 01aa 87A2      		std Z+39,r8
 516 01ac 90A6      		std Z+40,r9
 517 01ae A1A6      		std Z+41,r10
 518 01b0 B2A6      		std Z+42,r11
1652:fat.c         ****             for(i = 0; i < 8; ++i)
 519               		.loc 1 1652 13 is_stmt 1 view .LVU102
1653:fat.c         ****             {
 520               		.loc 1 1653 13 view .LVU103
 521               	.LVL35:
1653:fat.c         ****             {
 522               		.loc 1 1653 13 is_stmt 0 view .LVU104
 523 01b2 9701      		movw r18,r14
 524 01b4 A801      		movw r20,r16
1653:fat.c         ****             {
 525               		.loc 1 1653 19 view .LVU105
 526 01b6 E0E0      		ldi r30,0
 527               	.LVL36:
 528               	.L23:
1655:fat.c         ****                     break;
 529               		.loc 1 1655 17 is_stmt 1 view .LVU106
1655:fat.c         ****                     break;
 530               		.loc 1 1655 26 is_stmt 0 view .LVU107
 531 01b8 D901      		movw r26,r18
 532 01ba 8D91      		ld r24,X+
 533 01bc 9D01      		movw r18,r26
1655:fat.c         ****                     break;
 534               		.loc 1 1655 19 view .LVU108
 535 01be 8032      		cpi r24,lo8(32)
 536 01c0 01F0      		breq .L21
1657:fat.c         **** 
 537               		.loc 1 1657 17 is_stmt 1 view .LVU109
1657:fat.c         **** 
 538               		.loc 1 1657 30 is_stmt 0 view .LVU110
 539 01c2 DA01      		movw r26,r20
 540 01c4 8C93      		st X,r24
1664:fat.c         ****                     long_name[i] += 'a' - 'A';
 541               		.loc 1 1664 17 is_stmt 1 view .LVU111
1664:fat.c         ****                     long_name[i] += 'a' - 'A';
 542               		.loc 1 1664 19 is_stmt 0 view .LVU112
 543 01c6 D701      		movw r26,r14
 544 01c8 1C96      		adiw r26,12
 545 01ca 9C91      		ld r25,X
 546 01cc 93FF      		sbrs r25,3
 547 01ce 00C0      		rjmp .L22
1664:fat.c         ****                     long_name[i] += 'a' - 'A';
 548               		.loc 1 1664 40 discriminator 1 view .LVU113
 549 01d0 9FEB      		ldi r25,lo8(-65)
 550 01d2 980F      		add r25,r24
 551 01d4 9A31      		cpi r25,lo8(26)
 552 01d6 00F4      		brsh .L22
1665:fat.c         ****             }
 553               		.loc 1 1665 21 is_stmt 1 view .LVU114
1665:fat.c         ****             }
 554               		.loc 1 1665 34 is_stmt 0 view .LVU115
 555 01d8 805E      		subi r24,lo8(-(32))
 556 01da DA01      		movw r26,r20
 557 01dc 8C93      		st X,r24
 558               	.L22:
1653:fat.c         ****             {
 559               		.loc 1 1653 31 discriminator 2 view .LVU116
 560 01de EF5F      		subi r30,lo8(-(1))
 561               	.LVL37:
1653:fat.c         ****             {
 562               		.loc 1 1653 31 discriminator 2 view .LVU117
 563 01e0 4F5F      		subi r20,-1
 564 01e2 5F4F      		sbci r21,-1
1653:fat.c         ****             {
 565               		.loc 1 1653 13 discriminator 2 view .LVU118
 566 01e4 E830      		cpi r30,lo8(8)
 567 01e6 01F4      		brne .L23
 568               	.L21:
1667:fat.c         ****                 long_name[0] = (char) FAT_DIRENTRY_DELETED;
 569               		.loc 1 1667 13 is_stmt 1 view .LVU119
1667:fat.c         ****                 long_name[0] = (char) FAT_DIRENTRY_DELETED;
 570               		.loc 1 1667 15 is_stmt 0 view .LVU120
 571 01e8 D801      		movw r26,r16
 572 01ea 8C91      		ld r24,X
 573 01ec 8530      		cpi r24,lo8(5)
 574 01ee 01F4      		brne .L24
1668:fat.c         **** 
 575               		.loc 1 1668 17 is_stmt 1 view .LVU121
1668:fat.c         **** 
 576               		.loc 1 1668 30 is_stmt 0 view .LVU122
 577 01f0 85EE      		ldi r24,lo8(-27)
 578 01f2 8C93      		st X,r24
 579               	.L24:
1670:fat.c         ****             {
 580               		.loc 1 1670 13 is_stmt 1 view .LVU123
1670:fat.c         ****             {
 581               		.loc 1 1670 15 is_stmt 0 view .LVU124
 582 01f4 D701      		movw r26,r14
 583 01f6 1896      		adiw r26,8
 584 01f8 8C91      		ld r24,X
 585 01fa 8032      		cpi r24,lo8(32)
 586 01fc 01F0      		breq .L25
 587               	.LBB22:
1672:fat.c         **** 
 588               		.loc 1 1672 17 is_stmt 1 view .LVU125
 589               	.LVL38:
1672:fat.c         **** 
 590               		.loc 1 1672 32 is_stmt 0 view .LVU126
 591 01fe D801      		movw r26,r16
 592 0200 AE0F      		add r26,r30
 593 0202 B11D      		adc r27,__zero_reg__
 594 0204 8EE2      		ldi r24,lo8(46)
 595 0206 8C93      		st X,r24
1674:fat.c         ****                 for(; j < 11; ++j)
 596               		.loc 1 1674 17 is_stmt 1 view .LVU127
 597               	.LVL39:
1675:fat.c         ****                 {
 598               		.loc 1 1675 17 view .LVU128
1675:fat.c         ****                 {
 599               		.loc 1 1675 17 is_stmt 0 view .LVU129
 600 0208 B701      		movw r22,r14
 601 020a 685F      		subi r22,-8
 602 020c 7F4F      		sbci r23,-1
 603 020e 94E0      		ldi r25,lo8(4)
 604 0210 9E0F      		add r25,r30
1672:fat.c         **** 
 605               		.loc 1 1672 28 view .LVU130
 606 0212 EF5F      		subi r30,lo8(-(1))
 607               	.LVL40:
 608               	.L27:
1677:fat.c         ****                         break;
 609               		.loc 1 1677 21 is_stmt 1 view .LVU131
1677:fat.c         ****                         break;
 610               		.loc 1 1677 30 is_stmt 0 view .LVU132
 611 0214 DB01      		movw r26,r22
 612 0216 8D91      		ld r24,X+
 613 0218 BD01      		movw r22,r26
 614 021a 9801      		movw r18,r16
 615 021c 2E0F      		add r18,r30
 616 021e 311D      		adc r19,__zero_reg__
1677:fat.c         ****                         break;
 617               		.loc 1 1677 23 view .LVU133
 618 0220 8032      		cpi r24,lo8(32)
 619 0222 01F0      		breq .L25
1679:fat.c         **** 
 620               		.loc 1 1679 21 is_stmt 1 view .LVU134
1679:fat.c         **** 
 621               		.loc 1 1679 34 is_stmt 0 view .LVU135
 622 0224 D901      		movw r26,r18
 623 0226 8C93      		st X,r24
1684:fat.c         ****                         long_name[i] += 'a' - 'A';
 624               		.loc 1 1684 21 is_stmt 1 view .LVU136
1684:fat.c         ****                         long_name[i] += 'a' - 'A';
 625               		.loc 1 1684 23 is_stmt 0 view .LVU137
 626 0228 D701      		movw r26,r14
 627 022a 1C96      		adiw r26,12
 628 022c 4C91      		ld r20,X
 629 022e 44FF      		sbrs r20,4
 630 0230 00C0      		rjmp .L26
1684:fat.c         ****                         long_name[i] += 'a' - 'A';
 631               		.loc 1 1684 44 discriminator 1 view .LVU138
 632 0232 4FEB      		ldi r20,lo8(-65)
 633 0234 480F      		add r20,r24
 634 0236 4A31      		cpi r20,lo8(26)
 635 0238 00F4      		brsh .L26
1685:fat.c         **** 
 636               		.loc 1 1685 25 is_stmt 1 view .LVU139
1685:fat.c         **** 
 637               		.loc 1 1685 38 is_stmt 0 view .LVU140
 638 023a 805E      		subi r24,lo8(-(32))
 639 023c D901      		movw r26,r18
 640 023e 8C93      		st X,r24
 641               	.L26:
1687:fat.c         ****                 }
 642               		.loc 1 1687 21 is_stmt 1 view .LVU141
 643 0240 EF5F      		subi r30,lo8(-(1))
 644               	.LVL41:
1675:fat.c         ****                 {
 645               		.loc 1 1675 17 is_stmt 0 view .LVU142
 646 0242 E913      		cpse r30,r25
 647 0244 00C0      		rjmp .L27
 648               	.LVL42:
 649               	.L25:
1675:fat.c         ****                 {
 650               		.loc 1 1675 17 view .LVU143
 651               	.LBE22:
1691:fat.c         ****         }
 652               		.loc 1 1691 13 is_stmt 1 view .LVU144
1691:fat.c         ****         }
 653               		.loc 1 1691 26 is_stmt 0 view .LVU145
 654 0246 E00F      		add r30,r16
 655 0248 F12F      		mov r31,r17
 656 024a F11D      		adc r31,__zero_reg__
 657               	.LVL43:
1691:fat.c         ****         }
 658               		.loc 1 1691 26 view .LVU146
 659 024c 1082      		st Z,__zero_reg__
 660               	.L20:
1691:fat.c         ****         }
 661               		.loc 1 1691 26 view .LVU147
 662               	.LBE21:
1695:fat.c         ****         dir_entry->cluster = read16(&buffer[26]);
 663               		.loc 1 1695 9 is_stmt 1 view .LVU148
1695:fat.c         ****         dir_entry->cluster = read16(&buffer[26]);
 664               		.loc 1 1695 31 is_stmt 0 view .LVU149
 665 024e F701      		movw r30,r14
 666 0250 8385      		ldd r24,Z+11
 667 0252 D801      		movw r26,r16
 668 0254 9096      		adiw r26,32
 669 0256 8C93      		st X,r24
1696:fat.c         **** #if FAT_FAT32_SUPPORT
 670               		.loc 1 1696 9 is_stmt 1 view .LVU150
1696:fat.c         **** #if FAT_FAT32_SUPPORT
 671               		.loc 1 1696 30 is_stmt 0 view .LVU151
 672 0258 C701      		movw r24,r14
 673 025a 4A96      		adiw r24,26
 674 025c 0E94 0000 		call read16
 675               	.LVL44:
1696:fat.c         **** #if FAT_FAT32_SUPPORT
 676               		.loc 1 1696 28 view .LVU152
 677 0260 F801      		movw r30,r16
 678 0262 92A3      		std Z+34,r25
 679 0264 81A3      		std Z+33,r24
1700:fat.c         **** 
 680               		.loc 1 1700 9 is_stmt 1 view .LVU153
1700:fat.c         **** 
 681               		.loc 1 1700 32 is_stmt 0 view .LVU154
 682 0266 C701      		movw r24,r14
 683 0268 4C96      		adiw r24,28
 684 026a 0E94 0000 		call read32
 685               	.LVL45:
1700:fat.c         **** 
 686               		.loc 1 1700 30 view .LVU155
 687 026e D801      		movw r26,r16
 688 0270 9396      		adiw r26,35
 689 0272 6D93      		st X+,r22
 690 0274 7D93      		st X+,r23
 691 0276 8D93      		st X+,r24
 692 0278 9C93      		st X,r25
 693 027a 9697      		sbiw r26,35+3
1707:fat.c         ****         return 0;
 694               		.loc 1 1707 9 is_stmt 1 view .LVU156
1707:fat.c         ****         return 0;
 695               		.loc 1 1707 23 is_stmt 0 view .LVU157
 696 027c 81E0      		ldi r24,lo8(1)
 697 027e F601      		movw r30,r12
 698 0280 8583      		std Z+5,r24
1708:fat.c         ****     }
 699               		.loc 1 1708 9 is_stmt 1 view .LVU158
1708:fat.c         ****     }
 700               		.loc 1 1708 16 is_stmt 0 view .LVU159
 701 0282 80E0      		ldi r24,0
 702 0284 00C0      		rjmp .L9
 703               		.cfi_endproc
 704               	.LFE21:
 707               	fat_get_next_cluster:
 708               	.LVL46:
 709               	.LFB3:
 439:fat.c         ****     if(!fs || cluster_num < 2)
 710               		.loc 1 439 1 is_stmt 1 view -0
 711               		.cfi_startproc
 439:fat.c         ****     if(!fs || cluster_num < 2)
 712               		.loc 1 439 1 is_stmt 0 view .LVU161
 713 0286 0F93      		push r16
 714               	.LCFI22:
 715               		.cfi_def_cfa_offset 3
 716               		.cfi_offset 16, -2
 717 0288 1F93      		push r17
 718               	.LCFI23:
 719               		.cfi_def_cfa_offset 4
 720               		.cfi_offset 17, -3
 721 028a CF93      		push r28
 722               	.LCFI24:
 723               		.cfi_def_cfa_offset 5
 724               		.cfi_offset 28, -4
 725 028c DF93      		push r29
 726               	.LCFI25:
 727               		.cfi_def_cfa_offset 6
 728               		.cfi_offset 29, -5
 729 028e 00D0      		rcall .
 730               	.LCFI26:
 731               		.cfi_def_cfa_offset 8
 732 0290 CDB7      		in r28,__SP_L__
 733 0292 DEB7      		in r29,__SP_H__
 734               	.LCFI27:
 735               		.cfi_def_cfa_register 28
 736               	/* prologue: function */
 737               	/* frame size = 2 */
 738               	/* stack size = 6 */
 739               	.L__stack_usage = 6
 740 0294 FC01      		movw r30,r24
 440:fat.c         ****         return 0;
 741               		.loc 1 440 5 is_stmt 1 view .LVU162
 440:fat.c         ****         return 0;
 742               		.loc 1 440 7 is_stmt 0 view .LVU163
 743 0296 892B      		or r24,r25
 744 0298 01F0      		breq .L59
 440:fat.c         ****         return 0;
 745               		.loc 1 440 12 discriminator 1 view .LVU164
 746 029a 6230      		cpi r22,2
 747 029c 7105      		cpc r23,__zero_reg__
 748 029e 00F0      		brlo .L59
 749               	.LVL47:
 750               	.LBB26:
 751               	.LBI26:
 438:fat.c         **** {
 752               		.loc 1 438 11 is_stmt 1 view .LVU165
 753               	.LBB27:
 464:fat.c         ****         if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_
 754               		.loc 1 464 9 view .LVU166
 465:fat.c         ****             return 0;
 755               		.loc 1 465 9 view .LVU167
 465:fat.c         ****             return 0;
 756               		.loc 1 465 87 is_stmt 0 view .LVU168
 757 02a0 90E0      		ldi r25,0
 758 02a2 80E0      		ldi r24,0
 759               	.LVL48:
 465:fat.c         ****             return 0;
 760               		.loc 1 465 87 view .LVU169
 761 02a4 660F      		lsl r22
 762 02a6 771F      		rol r23
 763 02a8 881F      		rol r24
 764 02aa 991F      		rol r25
 765               	.LVL49:
 465:fat.c         ****             return 0;
 766               		.loc 1 465 13 view .LVU170
 767 02ac 0681      		ldd r16,Z+6
 768 02ae 1781      		ldd r17,Z+7
 769 02b0 2085      		ldd r18,Z+8
 770 02b2 3185      		ldd r19,Z+9
 771 02b4 600F      		add r22,r16
 772 02b6 711F      		adc r23,r17
 773 02b8 821F      		adc r24,r18
 774 02ba 931F      		adc r25,r19
 465:fat.c         ****             return 0;
 775               		.loc 1 465 26 view .LVU171
 776 02bc 0190      		ld __tmp_reg__,Z+
 777 02be F081      		ld r31,Z
 778 02c0 E02D      		mov r30,__tmp_reg__
 779               	.LVL50:
 465:fat.c         ****             return 0;
 780               		.loc 1 465 13 view .LVU172
 781 02c2 0190      		ld __tmp_reg__,Z+
 782 02c4 F081      		ld r31,Z
 783 02c6 E02D      		mov r30,__tmp_reg__
 784 02c8 22E0      		ldi r18,lo8(2)
 785 02ca 30E0      		ldi r19,0
 786 02cc AE01      		movw r20,r28
 787 02ce 4F5F      		subi r20,-1
 788 02d0 5F4F      		sbci r21,-1
 789 02d2 0995      		icall
 790               	.LVL51:
 465:fat.c         ****             return 0;
 791               		.loc 1 465 11 view .LVU173
 792 02d4 8823      		tst r24
 793 02d6 01F0      		breq .L59
 469:fat.c         ****         
 794               		.loc 1 469 9 is_stmt 1 view .LVU174
 469:fat.c         ****         
 795               		.loc 1 469 21 is_stmt 0 view .LVU175
 796 02d8 8981      		ldd r24,Y+1
 797 02da 9A81      		ldd r25,Y+2
 798               	.LVL52:
 471:fat.c         ****            cluster_num == FAT16_CLUSTER_BAD ||
 799               		.loc 1 471 9 is_stmt 1 view .LVU176
 471:fat.c         ****            cluster_num == FAT16_CLUSTER_BAD ||
 800               		.loc 1 471 11 is_stmt 0 view .LVU177
 801 02dc 9C01      		movw r18,r24
 802 02de 2150      		subi r18,1
 803 02e0 3109      		sbc r19,__zero_reg__
 804 02e2 2F3E      		cpi r18,-17
 805 02e4 3F4F      		sbci r19,-1
 806 02e6 00F0      		brlo .L55
 807               	.LVL53:
 808               	.L59:
 471:fat.c         ****            cluster_num == FAT16_CLUSTER_BAD ||
 809               		.loc 1 471 11 view .LVU178
 810               	.LBE27:
 811               	.LBE26:
 441:fat.c         **** 
 812               		.loc 1 441 16 view .LVU179
 813 02e8 90E0      		ldi r25,0
 814 02ea 80E0      		ldi r24,0
 815               	.L55:
 816               	/* epilogue start */
 479:fat.c         **** 
 817               		.loc 1 479 1 view .LVU180
 818 02ec 0F90      		pop __tmp_reg__
 819 02ee 0F90      		pop __tmp_reg__
 820 02f0 DF91      		pop r29
 821 02f2 CF91      		pop r28
 822 02f4 1F91      		pop r17
 823 02f6 0F91      		pop r16
 824 02f8 0895      		ret
 825               		.cfi_endproc
 826               	.LFE3:
 829               	fat_free_clusters:
 830               	.LVL54:
 831               	.LFB5:
 652:fat.c         ****     if(!fs || cluster_num < 2)
 832               		.loc 1 652 1 is_stmt 1 view -0
 833               		.cfi_startproc
 652:fat.c         ****     if(!fs || cluster_num < 2)
 834               		.loc 1 652 1 is_stmt 0 view .LVU182
 835 02fa 4F92      		push r4
 836               	.LCFI28:
 837               		.cfi_def_cfa_offset 3
 838               		.cfi_offset 4, -2
 839 02fc 5F92      		push r5
 840               	.LCFI29:
 841               		.cfi_def_cfa_offset 4
 842               		.cfi_offset 5, -3
 843 02fe 6F92      		push r6
 844               	.LCFI30:
 845               		.cfi_def_cfa_offset 5
 846               		.cfi_offset 6, -4
 847 0300 7F92      		push r7
 848               	.LCFI31:
 849               		.cfi_def_cfa_offset 6
 850               		.cfi_offset 7, -5
 851 0302 AF92      		push r10
 852               	.LCFI32:
 853               		.cfi_def_cfa_offset 7
 854               		.cfi_offset 10, -6
 855 0304 BF92      		push r11
 856               	.LCFI33:
 857               		.cfi_def_cfa_offset 8
 858               		.cfi_offset 11, -7
 859 0306 CF92      		push r12
 860               	.LCFI34:
 861               		.cfi_def_cfa_offset 9
 862               		.cfi_offset 12, -8
 863 0308 DF92      		push r13
 864               	.LCFI35:
 865               		.cfi_def_cfa_offset 10
 866               		.cfi_offset 13, -9
 867 030a EF92      		push r14
 868               	.LCFI36:
 869               		.cfi_def_cfa_offset 11
 870               		.cfi_offset 14, -10
 871 030c FF92      		push r15
 872               	.LCFI37:
 873               		.cfi_def_cfa_offset 12
 874               		.cfi_offset 15, -11
 875 030e 0F93      		push r16
 876               	.LCFI38:
 877               		.cfi_def_cfa_offset 13
 878               		.cfi_offset 16, -12
 879 0310 1F93      		push r17
 880               	.LCFI39:
 881               		.cfi_def_cfa_offset 14
 882               		.cfi_offset 17, -13
 883 0312 CF93      		push r28
 884               	.LCFI40:
 885               		.cfi_def_cfa_offset 15
 886               		.cfi_offset 28, -14
 887 0314 DF93      		push r29
 888               	.LCFI41:
 889               		.cfi_def_cfa_offset 16
 890               		.cfi_offset 29, -15
 891 0316 00D0      		rcall .
 892               	.LCFI42:
 893               		.cfi_def_cfa_offset 18
 894 0318 CDB7      		in r28,__SP_L__
 895 031a DEB7      		in r29,__SP_H__
 896               	.LCFI43:
 897               		.cfi_def_cfa_register 28
 898               	/* prologue: function */
 899               	/* frame size = 2 */
 900               	/* stack size = 16 */
 901               	.L__stack_usage = 16
 902 031c 5C01      		movw r10,r24
 903 031e 8B01      		movw r16,r22
 653:fat.c         ****         return 0;
 904               		.loc 1 653 5 is_stmt 1 view .LVU183
 653:fat.c         ****         return 0;
 905               		.loc 1 653 7 is_stmt 0 view .LVU184
 906 0320 0097      		sbiw r24,0
 907 0322 01F4      		brne .+2
 908 0324 00C0      		rjmp .L69
 653:fat.c         ****         return 0;
 909               		.loc 1 653 12 discriminator 1 view .LVU185
 910 0326 6230      		cpi r22,2
 911 0328 7105      		cpc r23,__zero_reg__
 912 032a 00F4      		brsh .+2
 913 032c 00C0      		rjmp .L69
 914               	.LVL55:
 915               	.LBB32:
 916               	.LBI32:
 651:fat.c         **** {
 917               		.loc 1 651 9 is_stmt 1 view .LVU186
 918               	.LBB33:
 656:fat.c         **** #if FAT_FAT32_SUPPORT
 919               		.loc 1 656 5 view .LVU187
 656:fat.c         **** #if FAT_FAT32_SUPPORT
 920               		.loc 1 656 14 is_stmt 0 view .LVU188
 921 032e DC01      		movw r26,r24
 922 0330 1696      		adiw r26,6
 923 0332 4D90      		ld r4,X+
 924 0334 5D90      		ld r5,X+
 925 0336 6D90      		ld r6,X+
 926 0338 7C90      		ld r7,X
 927 033a 1997      		sbiw r26,6+3
 928               	.LVL56:
 929               	.LBB34:
 700:fat.c         ****         while(cluster_num)
 930               		.loc 1 700 9 is_stmt 1 view .LVU189
 701:fat.c         ****         {
 931               		.loc 1 701 9 view .LVU190
 932               	.L67:
 933               	.LBB35:
 703:fat.c         ****                 return 0;
 934               		.loc 1 703 13 view .LVU191
 703:fat.c         ****                 return 0;
 935               		.loc 1 703 80 is_stmt 0 view .LVU192
 936 033c 6801      		movw r12,r16
 937 033e F12C      		mov r15,__zero_reg__
 938 0340 E12C      		mov r14,__zero_reg__
 939 0342 CC0C      		lsl r12
 940 0344 DD1C      		rol r13
 941 0346 EE1C      		rol r14
 942 0348 FF1C      		rol r15
 703:fat.c         ****                 return 0;
 943               		.loc 1 703 17 view .LVU193
 944 034a C40C      		add r12,r4
 945 034c D51C      		adc r13,r5
 946 034e E61C      		adc r14,r6
 947 0350 F71C      		adc r15,r7
 703:fat.c         ****                 return 0;
 948               		.loc 1 703 30 view .LVU194
 949 0352 D501      		movw r26,r10
 950 0354 ED91      		ld r30,X+
 951 0356 FC91      		ld r31,X
 703:fat.c         ****                 return 0;
 952               		.loc 1 703 17 view .LVU195
 953 0358 0190      		ld __tmp_reg__,Z+
 954 035a F081      		ld r31,Z
 955 035c E02D      		mov r30,__tmp_reg__
 956 035e 22E0      		ldi r18,lo8(2)
 957 0360 30E0      		ldi r19,0
 958 0362 AE01      		movw r20,r28
 959 0364 4F5F      		subi r20,-1
 960 0366 5F4F      		sbci r21,-1
 961 0368 C701      		movw r24,r14
 962 036a B601      		movw r22,r12
 963 036c 0995      		icall
 964               	.LVL57:
 703:fat.c         ****                 return 0;
 965               		.loc 1 703 15 view .LVU196
 966 036e 8823      		tst r24
 967 0370 01F0      		breq .L63
 707:fat.c         **** 
 968               		.loc 1 707 13 is_stmt 1 view .LVU197
 707:fat.c         **** 
 969               		.loc 1 707 22 is_stmt 0 view .LVU198
 970 0372 0981      		ldd r16,Y+1
 971 0374 1A81      		ldd r17,Y+2
 972               	.LVL58:
 709:fat.c         ****                 return 1;
 973               		.loc 1 709 13 is_stmt 1 view .LVU199
 709:fat.c         ****                 return 1;
 974               		.loc 1 709 15 is_stmt 0 view .LVU200
 975 0376 0115      		cp r16,__zero_reg__
 976 0378 1105      		cpc r17,__zero_reg__
 977 037a 01F0      		breq .L70
 711:fat.c         ****                (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
 978               		.loc 1 711 13 is_stmt 1 view .LVU201
 711:fat.c         ****                (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
 979               		.loc 1 711 54 is_stmt 0 view .LVU202
 980 037c C801      		movw r24,r16
 981 037e 4096      		adiw r24,16
 711:fat.c         ****                (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
 982               		.loc 1 711 15 view .LVU203
 983 0380 0897      		sbiw r24,8
 984 0382 00F0      		brlo .L69
 717:fat.c         ****                 cluster_num_next = 0;
 985               		.loc 1 717 13 is_stmt 1 view .LVU204
 717:fat.c         ****                 cluster_num_next = 0;
 986               		.loc 1 717 15 is_stmt 0 view .LVU205
 987 0384 083F      		cpi r16,-8
 988 0386 BFEF      		ldi r27,-1
 989 0388 1B07      		cpc r17,r27
 990 038a 00F0      		brlo .L66
 718:fat.c         **** 
 991               		.loc 1 718 34 view .LVU206
 992 038c 10E0      		ldi r17,0
 993 038e 00E0      		ldi r16,0
 994               	.LVL59:
 995               	.L66:
 721:fat.c         ****             fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (u
 996               		.loc 1 721 13 is_stmt 1 view .LVU207
 721:fat.c         ****             fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (u
 997               		.loc 1 721 23 is_stmt 0 view .LVU208
 998 0390 1A82      		std Y+2,__zero_reg__
 999 0392 1982      		std Y+1,__zero_reg__
 722:fat.c         **** 
 1000               		.loc 1 722 13 is_stmt 1 view .LVU209
 722:fat.c         **** 
 1001               		.loc 1 722 26 is_stmt 0 view .LVU210
 1002 0394 D501      		movw r26,r10
 1003 0396 ED91      		ld r30,X+
 1004 0398 FC91      		ld r31,X
 722:fat.c         **** 
 1005               		.loc 1 722 13 view .LVU211
 1006 039a 0480      		ldd __tmp_reg__,Z+4
 1007 039c F581      		ldd r31,Z+5
 1008 039e E02D      		mov r30,__tmp_reg__
 1009 03a0 22E0      		ldi r18,lo8(2)
 1010 03a2 30E0      		ldi r19,0
 1011 03a4 AE01      		movw r20,r28
 1012 03a6 4F5F      		subi r20,-1
 1013 03a8 5F4F      		sbci r21,-1
 1014 03aa C701      		movw r24,r14
 1015 03ac B601      		movw r22,r12
 1016 03ae 0995      		icall
 1017               	.LVL60:
 728:fat.c         ****         }
 1018               		.loc 1 728 13 is_stmt 1 view .LVU212
 728:fat.c         ****         }
 1019               		.loc 1 728 13 is_stmt 0 view .LVU213
 1020               	.LBE35:
 701:fat.c         ****         {
 1021               		.loc 1 701 14 view .LVU214
 1022 03b0 0115      		cp r16,__zero_reg__
 1023 03b2 1105      		cpc r17,__zero_reg__
 1024 03b4 01F4      		brne .L67
 1025               	.LVL61:
 1026               	.L70:
 1027               	.LBB36:
 710:fat.c         ****             if(cluster_num_next == FAT16_CLUSTER_BAD ||
 1028               		.loc 1 710 24 view .LVU215
 1029 03b6 81E0      		ldi r24,lo8(1)
 1030               	.LVL62:
 1031               	.L63:
 1032               	/* epilogue start */
 710:fat.c         ****             if(cluster_num_next == FAT16_CLUSTER_BAD ||
 1033               		.loc 1 710 24 view .LVU216
 1034               	.LBE36:
 1035               	.LBE34:
 1036               	.LBE33:
 1037               	.LBE32:
 733:fat.c         **** #endif
 1038               		.loc 1 733 1 view .LVU217
 1039 03b8 0F90      		pop __tmp_reg__
 1040 03ba 0F90      		pop __tmp_reg__
 1041 03bc DF91      		pop r29
 1042 03be CF91      		pop r28
 1043 03c0 1F91      		pop r17
 1044 03c2 0F91      		pop r16
 1045 03c4 FF90      		pop r15
 1046 03c6 EF90      		pop r14
 1047 03c8 DF90      		pop r13
 1048 03ca CF90      		pop r12
 1049 03cc BF90      		pop r11
 1050 03ce AF90      		pop r10
 1051               	.LVL63:
 733:fat.c         **** #endif
 1052               		.loc 1 733 1 view .LVU218
 1053 03d0 7F90      		pop r7
 1054 03d2 6F90      		pop r6
 1055 03d4 5F90      		pop r5
 1056 03d6 4F90      		pop r4
 1057 03d8 0895      		ret
 1058               	.LVL64:
 1059               	.L69:
 654:fat.c         **** 
 1060               		.loc 1 654 16 view .LVU219
 1061 03da 80E0      		ldi r24,0
 1062 03dc 00C0      		rjmp .L63
 1063               		.cfi_endproc
 1064               	.LFE5:
 1067               	fat_append_clusters:
 1068               	.LVL65:
 1069               	.LFB4:
 494:fat.c         ****     if(!fs)
 1070               		.loc 1 494 1 is_stmt 1 view -0
 1071               		.cfi_startproc
 494:fat.c         ****     if(!fs)
 1072               		.loc 1 494 1 is_stmt 0 view .LVU221
 1073 03de 2F92      		push r2
 1074               	.LCFI44:
 1075               		.cfi_def_cfa_offset 3
 1076               		.cfi_offset 2, -2
 1077 03e0 3F92      		push r3
 1078               	.LCFI45:
 1079               		.cfi_def_cfa_offset 4
 1080               		.cfi_offset 3, -3
 1081 03e2 4F92      		push r4
 1082               	.LCFI46:
 1083               		.cfi_def_cfa_offset 5
 1084               		.cfi_offset 4, -4
 1085 03e4 5F92      		push r5
 1086               	.LCFI47:
 1087               		.cfi_def_cfa_offset 6
 1088               		.cfi_offset 5, -5
 1089 03e6 6F92      		push r6
 1090               	.LCFI48:
 1091               		.cfi_def_cfa_offset 7
 1092               		.cfi_offset 6, -6
 1093 03e8 7F92      		push r7
 1094               	.LCFI49:
 1095               		.cfi_def_cfa_offset 8
 1096               		.cfi_offset 7, -7
 1097 03ea 8F92      		push r8
 1098               	.LCFI50:
 1099               		.cfi_def_cfa_offset 9
 1100               		.cfi_offset 8, -8
 1101 03ec 9F92      		push r9
 1102               	.LCFI51:
 1103               		.cfi_def_cfa_offset 10
 1104               		.cfi_offset 9, -9
 1105 03ee AF92      		push r10
 1106               	.LCFI52:
 1107               		.cfi_def_cfa_offset 11
 1108               		.cfi_offset 10, -10
 1109 03f0 BF92      		push r11
 1110               	.LCFI53:
 1111               		.cfi_def_cfa_offset 12
 1112               		.cfi_offset 11, -11
 1113 03f2 CF92      		push r12
 1114               	.LCFI54:
 1115               		.cfi_def_cfa_offset 13
 1116               		.cfi_offset 12, -12
 1117 03f4 DF92      		push r13
 1118               	.LCFI55:
 1119               		.cfi_def_cfa_offset 14
 1120               		.cfi_offset 13, -13
 1121 03f6 EF92      		push r14
 1122               	.LCFI56:
 1123               		.cfi_def_cfa_offset 15
 1124               		.cfi_offset 14, -14
 1125 03f8 FF92      		push r15
 1126               	.LCFI57:
 1127               		.cfi_def_cfa_offset 16
 1128               		.cfi_offset 15, -15
 1129 03fa 0F93      		push r16
 1130               	.LCFI58:
 1131               		.cfi_def_cfa_offset 17
 1132               		.cfi_offset 16, -16
 1133 03fc 1F93      		push r17
 1134               	.LCFI59:
 1135               		.cfi_def_cfa_offset 18
 1136               		.cfi_offset 17, -17
 1137 03fe CF93      		push r28
 1138               	.LCFI60:
 1139               		.cfi_def_cfa_offset 19
 1140               		.cfi_offset 28, -18
 1141 0400 DF93      		push r29
 1142               	.LCFI61:
 1143               		.cfi_def_cfa_offset 20
 1144               		.cfi_offset 29, -19
 1145 0402 CDB7      		in r28,__SP_L__
 1146 0404 DEB7      		in r29,__SP_H__
 1147               	.LCFI62:
 1148               		.cfi_def_cfa_register 28
 1149 0406 2C97      		sbiw r28,12
 1150               	.LCFI63:
 1151               		.cfi_def_cfa_offset 32
 1152 0408 0FB6      		in __tmp_reg__,__SREG__
 1153 040a F894      		cli
 1154 040c DEBF      		out __SP_H__,r29
 1155 040e 0FBE      		out __SREG__,__tmp_reg__
 1156 0410 CDBF      		out __SP_L__,r28
 1157               	/* prologue: function */
 1158               	/* frame size = 12 */
 1159               	/* stack size = 30 */
 1160               	.L__stack_usage = 30
 1161 0412 6C01      		movw r12,r24
 1162 0414 1B01      		movw r2,r22
 1163 0416 5A01      		movw r10,r20
 495:fat.c         ****         return 0;
 1164               		.loc 1 495 5 is_stmt 1 view .LVU222
 495:fat.c         ****         return 0;
 1165               		.loc 1 495 7 is_stmt 0 view .LVU223
 1166 0418 0097      		sbiw r24,0
 1167 041a 01F4      		brne .L77
 1168               	.LVL66:
 1169               	.L97:
 629:fat.c         **** }
 1170               		.loc 1 629 5 is_stmt 1 view .LVU224
 629:fat.c         **** }
 1171               		.loc 1 629 12 is_stmt 0 view .LVU225
 1172 041c F12C      		mov r15,__zero_reg__
 1173 041e E12C      		mov r14,__zero_reg__
 1174               	.L76:
 630:fat.c         **** #endif
 1175               		.loc 1 630 1 view .LVU226
 1176 0420 C701      		movw r24,r14
 1177               	/* epilogue start */
 1178 0422 2C96      		adiw r28,12
 1179 0424 0FB6      		in __tmp_reg__,__SREG__
 1180 0426 F894      		cli
 1181 0428 DEBF      		out __SP_H__,r29
 1182 042a 0FBE      		out __SREG__,__tmp_reg__
 1183 042c CDBF      		out __SP_L__,r28
 1184 042e DF91      		pop r29
 1185 0430 CF91      		pop r28
 1186 0432 1F91      		pop r17
 1187 0434 0F91      		pop r16
 1188 0436 FF90      		pop r15
 1189 0438 EF90      		pop r14
 1190 043a DF90      		pop r13
 1191 043c CF90      		pop r12
 1192               	.LVL67:
 630:fat.c         **** #endif
 1193               		.loc 1 630 1 view .LVU227
 1194 043e BF90      		pop r11
 1195 0440 AF90      		pop r10
 1196 0442 9F90      		pop r9
 1197 0444 8F90      		pop r8
 1198 0446 7F90      		pop r7
 1199 0448 6F90      		pop r6
 1200 044a 5F90      		pop r5
 1201 044c 4F90      		pop r4
 1202 044e 3F90      		pop r3
 1203 0450 2F90      		pop r2
 1204               	.LVL68:
 630:fat.c         **** #endif
 1205               		.loc 1 630 1 view .LVU228
 1206 0452 0895      		ret
 1207               	.LVL69:
 1208               	.L77:
 498:fat.c         ****     device_write_t device_write = fs->partition->device_write;
 1209               		.loc 1 498 5 is_stmt 1 view .LVU229
 498:fat.c         ****     device_write_t device_write = fs->partition->device_write;
 1210               		.loc 1 498 35 is_stmt 0 view .LVU230
 1211 0454 DC01      		movw r26,r24
 1212 0456 ED91      		ld r30,X+
 1213 0458 FC91      		ld r31,X
 1214 045a 1197      		sbiw r26,1
 498:fat.c         ****     device_write_t device_write = fs->partition->device_write;
 1215               		.loc 1 498 19 view .LVU231
 1216 045c 2081      		ld r18,Z
 1217 045e 3181      		ldd r19,Z+1
 1218 0460 3A87      		std Y+10,r19
 1219 0462 2987      		std Y+9,r18
 1220               	.LVL70:
 499:fat.c         ****     offset_t fat_offset = fs->header.fat_offset;
 1221               		.loc 1 499 5 is_stmt 1 view .LVU232
 499:fat.c         ****     offset_t fat_offset = fs->header.fat_offset;
 1222               		.loc 1 499 20 is_stmt 0 view .LVU233
 1223 0464 4481      		ldd r20,Z+4
 1224 0466 5581      		ldd r21,Z+5
 1225 0468 5C83      		std Y+4,r21
 1226 046a 4B83      		std Y+3,r20
 1227               	.LVL71:
 500:fat.c         ****     cluster_t count_left = count;
 1228               		.loc 1 500 5 is_stmt 1 view .LVU234
 500:fat.c         ****     cluster_t count_left = count;
 1229               		.loc 1 500 14 is_stmt 0 view .LVU235
 1230 046c 1696      		adiw r26,6
 1231 046e 8D91      		ld r24,X+
 1232 0470 9D91      		ld r25,X+
 1233 0472 0D90      		ld __tmp_reg__,X+
 1234 0474 BC91      		ld r27,X
 1235 0476 A02D      		mov r26,__tmp_reg__
 1236 0478 8D83      		std Y+5,r24
 1237 047a 9E83      		std Y+6,r25
 1238 047c AF83      		std Y+7,r26
 1239 047e B887      		std Y+8,r27
 1240               	.LVL72:
 501:fat.c         ****     cluster_t cluster_current = fs->cluster_free;
 1241               		.loc 1 501 5 is_stmt 1 view .LVU236
 502:fat.c         ****     cluster_t cluster_next = 0;
 1242               		.loc 1 502 5 view .LVU237
 502:fat.c         ****     cluster_t cluster_next = 0;
 1243               		.loc 1 502 15 is_stmt 0 view .LVU238
 1244 0480 F601      		movw r30,r12
 1245 0482 028D      		ldd r16,Z+26
 1246 0484 138D      		ldd r17,Z+27
 1247               	.LVL73:
 503:fat.c         ****     cluster_t cluster_count;
 1248               		.loc 1 503 5 is_stmt 1 view .LVU239
 504:fat.c         ****     uint16_t fat_entry16;
 1249               		.loc 1 504 5 view .LVU240
 505:fat.c         **** #if FAT_FAT32_SUPPORT
 1250               		.loc 1 505 5 view .LVU241
 514:fat.c         **** 
 1251               		.loc 1 514 9 view .LVU242
 514:fat.c         **** 
 1252               		.loc 1 514 45 is_stmt 0 view .LVU243
 1253 0486 8285      		ldd r24,Z+10
 1254 0488 9385      		ldd r25,Z+11
 1255 048a A485      		ldd r26,Z+12
 1256 048c B585      		ldd r27,Z+13
 1257               	.LVL74:
 514:fat.c         **** 
 1258               		.loc 1 514 45 view .LVU244
 1259 048e B695      		lsr r27
 1260 0490 A795      		ror r26
 1261 0492 9795      		ror r25
 1262 0494 8795      		ror r24
 1263               	.LVL75:
 514:fat.c         **** 
 1264               		.loc 1 514 23 view .LVU245
 1265 0496 9C87      		std Y+12,r25
 1266 0498 8B87      		std Y+11,r24
 1267               	.LVL76:
 516:fat.c         ****     for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current
 1268               		.loc 1 516 5 is_stmt 1 view .LVU246
 516:fat.c         ****     for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current
 1269               		.loc 1 516 22 is_stmt 0 view .LVU247
 1270 049a 138E      		std Z+27,__zero_reg__
 1271 049c 128E      		std Z+26,__zero_reg__
 517:fat.c         ****     {
 1272               		.loc 1 517 5 is_stmt 1 view .LVU248
 1273               	.LBB37:
 517:fat.c         ****     {
 1274               		.loc 1 517 9 view .LVU249
 1275               	.LVL77:
 517:fat.c         ****     {
 1276               		.loc 1 517 19 is_stmt 0 view .LVU250
 1277 049e 4C01      		movw r8,r24
 1278               	.LBE37:
 503:fat.c         ****     cluster_t cluster_count;
 1279               		.loc 1 503 15 view .LVU251
 1280 04a0 F12C      		mov r15,__zero_reg__
 1281 04a2 E12C      		mov r14,__zero_reg__
 1282               	.LVL78:
 1283               	.L79:
 1284               	.LBB38:
 517:fat.c         ****     {
 1285               		.loc 1 517 5 discriminator 1 view .LVU252
 1286 04a4 8114      		cp r8,__zero_reg__
 1287 04a6 9104      		cpc r9,__zero_reg__
 1288 04a8 01F4      		brne .L88
 517:fat.c         ****     {
 1289               		.loc 1 517 5 discriminator 1 view .LVU253
 1290               	.LBE38:
 592:fat.c         ****     {
 1291               		.loc 1 592 5 is_stmt 1 view .LVU254
 594:fat.c         ****             break;
 1292               		.loc 1 594 9 view .LVU255
 594:fat.c         ****             break;
 1293               		.loc 1 594 11 is_stmt 0 view .LVU256
 1294 04aa AB28      		or r10,r11
 1295 04ac 01F0      		breq .L84
 1296 04ae 00C0      		rjmp .L89
 1297               	.L88:
 1298               	.LBB39:
 519:fat.c         ****             cluster_current = 2;
 1299               		.loc 1 519 9 is_stmt 1 view .LVU257
 519:fat.c         ****             cluster_current = 2;
 1300               		.loc 1 519 11 is_stmt 0 view .LVU258
 1301 04b0 0230      		cpi r16,2
 1302 04b2 1105      		cpc r17,__zero_reg__
 1303 04b4 00F0      		brlo .L90
 519:fat.c         ****             cluster_current = 2;
 1304               		.loc 1 519 32 discriminator 1 view .LVU259
 1305 04b6 2B85      		ldd r18,Y+11
 1306 04b8 3C85      		ldd r19,Y+12
 1307 04ba 0217      		cp r16,r18
 1308 04bc 1307      		cpc r17,r19
 1309 04be 00F0      		brlo .L80
 1310               	.L90:
 520:fat.c         **** 
 1311               		.loc 1 520 29 view .LVU260
 1312 04c0 02E0      		ldi r16,lo8(2)
 1313 04c2 10E0      		ldi r17,0
 1314               	.LVL79:
 1315               	.L80:
 531:fat.c         ****                 return 0;
 1316               		.loc 1 531 13 is_stmt 1 view .LVU261
 531:fat.c         ****                 return 0;
 1317               		.loc 1 531 69 is_stmt 0 view .LVU262
 1318 04c4 2801      		movw r4,r16
 1319 04c6 712C      		mov r7,__zero_reg__
 1320 04c8 612C      		mov r6,__zero_reg__
 1321 04ca 440C      		lsl r4
 1322 04cc 551C      		rol r5
 1323 04ce 661C      		rol r6
 1324 04d0 771C      		rol r7
 531:fat.c         ****                 return 0;
 1325               		.loc 1 531 17 view .LVU263
 1326 04d2 8D81      		ldd r24,Y+5
 1327 04d4 9E81      		ldd r25,Y+6
 1328 04d6 AF81      		ldd r26,Y+7
 1329 04d8 B885      		ldd r27,Y+8
 1330 04da 480E      		add r4,r24
 1331 04dc 591E      		adc r5,r25
 1332 04de 6A1E      		adc r6,r26
 1333 04e0 7B1E      		adc r7,r27
 1334 04e2 22E0      		ldi r18,lo8(2)
 1335 04e4 30E0      		ldi r19,0
 1336 04e6 AE01      		movw r20,r28
 1337 04e8 4F5F      		subi r20,-1
 1338 04ea 5F4F      		sbci r21,-1
 1339 04ec C301      		movw r24,r6
 1340 04ee B201      		movw r22,r4
 1341 04f0 E985      		ldd r30,Y+9
 1342 04f2 FA85      		ldd r31,Y+10
 1343 04f4 0995      		icall
 1344               	.LVL80:
 531:fat.c         ****                 return 0;
 1345               		.loc 1 531 15 view .LVU264
 1346 04f6 8823      		tst r24
 1347 04f8 01F4      		brne .+2
 1348 04fa 00C0      		rjmp .L97
 565:fat.c         ****                 continue;
 1349               		.loc 1 565 13 is_stmt 1 view .LVU265
 565:fat.c         ****                 continue;
 1350               		.loc 1 565 15 is_stmt 0 view .LVU266
 1351 04fc 8981      		ldd r24,Y+1
 1352 04fe 9A81      		ldd r25,Y+2
 1353 0500 892B      		or r24,r25
 1354 0502 01F0      		breq .+2
 1355 0504 00C0      		rjmp .L82
 572:fat.c         ****             {
 1356               		.loc 1 572 13 is_stmt 1 view .LVU267
 572:fat.c         ****             {
 1357               		.loc 1 572 15 is_stmt 0 view .LVU268
 1358 0506 A114      		cp r10,__zero_reg__
 1359 0508 B104      		cpc r11,__zero_reg__
 1360 050a 01F4      		brne .L83
 574:fat.c         ****                 break;
 1361               		.loc 1 574 17 is_stmt 1 view .LVU269
 574:fat.c         ****                 break;
 1362               		.loc 1 574 34 is_stmt 0 view .LVU270
 1363 050c D601      		movw r26,r12
 1364 050e 5B96      		adiw r26,26+1
 1365 0510 1C93      		st X,r17
 1366 0512 0E93      		st -X,r16
 1367 0514 5A97      		sbiw r26,26
 575:fat.c         ****             }
 1368               		.loc 1 575 17 is_stmt 1 view .LVU271
 1369               	.LBE39:
 592:fat.c         ****     {
 1370               		.loc 1 592 5 view .LVU272
 594:fat.c         ****             break;
 1371               		.loc 1 594 9 view .LVU273
 1372               	.L84:
 600:fat.c         ****         {
 1373               		.loc 1 600 9 view .LVU274
 600:fat.c         ****         {
 1374               		.loc 1 600 11 is_stmt 0 view .LVU275
 1375 0516 32E0      		ldi r19,2
 1376 0518 2316      		cp r2,r19
 1377 051a 3104      		cpc r3,__zero_reg__
 1378 051c 00F4      		brsh .+2
 1379 051e 00C0      		rjmp .L76
 613:fat.c         **** 
 1380               		.loc 1 613 17 is_stmt 1 view .LVU276
 613:fat.c         **** 
 1381               		.loc 1 613 29 is_stmt 0 view .LVU277
 1382 0520 FA82      		std Y+2,r15
 1383 0522 E982      		std Y+1,r14
 615:fat.c         ****                     break;
 1384               		.loc 1 615 17 is_stmt 1 view .LVU278
 615:fat.c         ****                     break;
 1385               		.loc 1 615 70 is_stmt 0 view .LVU279
 1386 0524 B101      		movw r22,r2
 1387 0526 90E0      		ldi r25,0
 1388 0528 80E0      		ldi r24,0
 1389 052a 660F      		lsl r22
 1390 052c 771F      		rol r23
 1391 052e 881F      		rol r24
 1392 0530 991F      		rol r25
 615:fat.c         ****                     break;
 1393               		.loc 1 615 21 view .LVU280
 1394 0532 2D81      		ldd r18,Y+5
 1395 0534 3E81      		ldd r19,Y+6
 1396 0536 4F81      		ldd r20,Y+7
 1397 0538 5885      		ldd r21,Y+8
 1398 053a 620F      		add r22,r18
 1399 053c 731F      		adc r23,r19
 1400 053e 841F      		adc r24,r20
 1401 0540 951F      		adc r25,r21
 1402 0542 22E0      		ldi r18,lo8(2)
 1403 0544 30E0      		ldi r19,0
 1404 0546 AE01      		movw r20,r28
 1405 0548 4F5F      		subi r20,-1
 1406 054a 5F4F      		sbci r21,-1
 1407 054c EB81      		ldd r30,Y+3
 1408 054e FC81      		ldd r31,Y+4
 1409 0550 0995      		icall
 1410               	.LVL81:
 615:fat.c         ****                     break;
 1411               		.loc 1 615 19 view .LVU281
 1412 0552 8823      		tst r24
 1413 0554 01F0      		breq .L89
 1414 0556 00C0      		rjmp .L76
 1415               	.L83:
 1416               	.LBB40:
 579:fat.c         ****                 fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
 1417               		.loc 1 579 13 is_stmt 1 view .LVU282
 579:fat.c         ****                 fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
 1418               		.loc 1 579 15 is_stmt 0 view .LVU283
 1419 0558 E114      		cp r14,__zero_reg__
 1420 055a F104      		cpc r15,__zero_reg__
 1421 055c 01F4      		brne .L85
 580:fat.c         ****             else
 1422               		.loc 1 580 17 is_stmt 1 view .LVU284
 580:fat.c         ****             else
 1423               		.loc 1 580 29 is_stmt 0 view .LVU285
 1424 055e EFEF      		ldi r30,lo8(-1)
 1425 0560 FFEF      		ldi r31,lo8(-1)
 1426 0562 FA83      		std Y+2,r31
 1427 0564 E983      		std Y+1,r30
 1428               	.L86:
 584:fat.c         ****                 break;
 1429               		.loc 1 584 13 is_stmt 1 view .LVU286
 584:fat.c         ****                 break;
 1430               		.loc 1 584 17 is_stmt 0 view .LVU287
 1431 0566 22E0      		ldi r18,lo8(2)
 1432 0568 30E0      		ldi r19,0
 1433 056a AE01      		movw r20,r28
 1434 056c 4F5F      		subi r20,-1
 1435 056e 5F4F      		sbci r21,-1
 1436 0570 C301      		movw r24,r6
 1437 0572 B201      		movw r22,r4
 1438 0574 EB81      		ldd r30,Y+3
 1439 0576 FC81      		ldd r31,Y+4
 1440 0578 0995      		icall
 1441               	.LVL82:
 584:fat.c         ****                 break;
 1442               		.loc 1 584 15 view .LVU288
 1443 057a 8111      		cpse r24,__zero_reg__
 1444 057c 00C0      		rjmp .L87
 1445               	.L89:
 584:fat.c         ****                 break;
 1446               		.loc 1 584 15 view .LVU289
 1447               	.LBE40:
 627:fat.c         **** 
 1448               		.loc 1 627 5 is_stmt 1 view .LVU290
 1449 057e B701      		movw r22,r14
 1450 0580 C601      		movw r24,r12
 1451 0582 0E94 0000 		call fat_free_clusters
 1452               	.LVL83:
 1453 0586 00C0      		rjmp .L97
 1454               	.L85:
 1455               	.LBB41:
 582:fat.c         **** 
 1456               		.loc 1 582 17 view .LVU291
 582:fat.c         **** 
 1457               		.loc 1 582 29 is_stmt 0 view .LVU292
 1458 0588 FA82      		std Y+2,r15
 1459 058a E982      		std Y+1,r14
 1460 058c 00C0      		rjmp .L86
 1461               	.L87:
 588:fat.c         ****         --count_left;
 1462               		.loc 1 588 9 is_stmt 1 view .LVU293
 1463               	.LVL84:
 589:fat.c         ****     }
 1464               		.loc 1 589 9 view .LVU294
 1465 058e F1E0      		ldi r31,1
 1466 0590 AF1A      		sub r10,r31
 1467 0592 B108      		sbc r11,__zero_reg__
 1468               	.LVL85:
 589:fat.c         ****     }
 1469               		.loc 1 589 9 is_stmt 0 view .LVU295
 1470 0594 7801      		movw r14,r16
 1471               	.LVL86:
 1472               	.L82:
 517:fat.c         ****     {
 1473               		.loc 1 517 67 discriminator 2 view .LVU296
 1474 0596 21E0      		ldi r18,1
 1475 0598 821A      		sub r8,r18
 1476 059a 9108      		sbc r9,__zero_reg__
 1477               	.LVL87:
 517:fat.c         ****     {
 1478               		.loc 1 517 83 discriminator 2 view .LVU297
 1479 059c 0F5F      		subi r16,-1
 1480 059e 1F4F      		sbci r17,-1
 1481               	.LVL88:
 517:fat.c         ****     {
 1482               		.loc 1 517 83 discriminator 2 view .LVU298
 1483 05a0 00C0      		rjmp .L79
 1484               	.LBE41:
 1485               		.cfi_endproc
 1486               	.LFE4:
 1489               	fat_cluster_offset:
 1490               	.LVL89:
 1491               	.LFB9:
 830:fat.c         ****     if(!fs || cluster_num < 2)
 1492               		.loc 1 830 1 is_stmt 1 view -0
 1493               		.cfi_startproc
 830:fat.c         ****     if(!fs || cluster_num < 2)
 1494               		.loc 1 830 1 is_stmt 0 view .LVU300
 1495 05a2 0F93      		push r16
 1496               	.LCFI64:
 1497               		.cfi_def_cfa_offset 3
 1498               		.cfi_offset 16, -2
 1499 05a4 1F93      		push r17
 1500               	.LCFI65:
 1501               		.cfi_def_cfa_offset 4
 1502               		.cfi_offset 17, -3
 1503               	/* prologue: function */
 1504               	/* frame size = 0 */
 1505               	/* stack size = 2 */
 1506               	.L__stack_usage = 2
 1507 05a6 FC01      		movw r30,r24
 831:fat.c         ****         return 0;
 1508               		.loc 1 831 5 is_stmt 1 view .LVU301
 831:fat.c         ****         return 0;
 1509               		.loc 1 831 7 is_stmt 0 view .LVU302
 1510 05a8 892B      		or r24,r25
 1511 05aa 01F0      		breq .L101
 831:fat.c         ****         return 0;
 1512               		.loc 1 831 12 discriminator 1 view .LVU303
 1513 05ac 6230      		cpi r22,2
 1514 05ae 7105      		cpc r23,__zero_reg__
 1515 05b0 00F0      		brlo .L101
 1516               	.LVL90:
 1517               	.LBB44:
 1518               	.LBI44:
 829:fat.c         **** {
 1519               		.loc 1 829 10 is_stmt 1 view .LVU304
 1520               	.LBB45:
 834:fat.c         **** }
 1521               		.loc 1 834 5 view .LVU305
 834:fat.c         **** }
 1522               		.loc 1 834 69 is_stmt 0 view .LVU306
 1523 05b2 9B01      		movw r18,r22
 1524 05b4 2250      		subi r18,2
 1525 05b6 3109      		sbc r19,__zero_reg__
 834:fat.c         **** }
 1526               		.loc 1 834 74 view .LVU307
 1527 05b8 A089      		ldd r26,Z+16
 1528 05ba B189      		ldd r27,Z+17
 1529 05bc 0E94 0000 		call __umulhisi3
 1530               	.LVL91:
 834:fat.c         **** }
 1531               		.loc 1 834 43 view .LVU308
 1532 05c0 0289      		ldd r16,Z+18
 1533 05c2 1389      		ldd r17,Z+19
 1534 05c4 2489      		ldd r18,Z+20
 1535 05c6 3589      		ldd r19,Z+21
 1536 05c8 600F      		add r22,r16
 1537 05ca 711F      		adc r23,r17
 1538 05cc 821F      		adc r24,r18
 1539 05ce 931F      		adc r25,r19
 1540               	.LVL92:
 1541               	.L98:
 1542               	/* epilogue start */
 834:fat.c         **** }
 1543               		.loc 1 834 43 view .LVU309
 1544               	.LBE45:
 1545               	.LBE44:
 835:fat.c         **** 
 1546               		.loc 1 835 1 view .LVU310
 1547 05d0 1F91      		pop r17
 1548 05d2 0F91      		pop r16
 1549 05d4 0895      		ret
 1550               	.LVL93:
 1551               	.L101:
 832:fat.c         **** 
 1552               		.loc 1 832 16 view .LVU311
 1553 05d6 60E0      		ldi r22,0
 1554 05d8 70E0      		ldi r23,0
 1555 05da CB01      		movw r24,r22
 1556               	.LVL94:
 832:fat.c         **** 
 1557               		.loc 1 832 16 view .LVU312
 1558 05dc 00C0      		rjmp .L98
 1559               		.cfi_endproc
 1560               	.LFE9:
 1563               	fat_clear_cluster:
 1564               	.LVL95:
 1565               	.LFB7:
 793:fat.c         ****     if(cluster_num < 2)
 1566               		.loc 1 793 1 is_stmt 1 view -0
 1567               		.cfi_startproc
 793:fat.c         ****     if(cluster_num < 2)
 1568               		.loc 1 793 1 is_stmt 0 view .LVU314
 1569 05de EF92      		push r14
 1570               	.LCFI66:
 1571               		.cfi_def_cfa_offset 3
 1572               		.cfi_offset 14, -2
 1573 05e0 FF92      		push r15
 1574               	.LCFI67:
 1575               		.cfi_def_cfa_offset 4
 1576               		.cfi_offset 15, -3
 1577 05e2 0F93      		push r16
 1578               	.LCFI68:
 1579               		.cfi_def_cfa_offset 5
 1580               		.cfi_offset 16, -4
 1581 05e4 1F93      		push r17
 1582               	.LCFI69:
 1583               		.cfi_def_cfa_offset 6
 1584               		.cfi_offset 17, -5
 1585 05e6 CF93      		push r28
 1586               	.LCFI70:
 1587               		.cfi_def_cfa_offset 7
 1588               		.cfi_offset 28, -6
 1589 05e8 DF93      		push r29
 1590               	.LCFI71:
 1591               		.cfi_def_cfa_offset 8
 1592               		.cfi_offset 29, -7
 1593 05ea CDB7      		in r28,__SP_L__
 1594 05ec DEB7      		in r29,__SP_H__
 1595               	.LCFI72:
 1596               		.cfi_def_cfa_register 28
 1597 05ee 6097      		sbiw r28,16
 1598               	.LCFI73:
 1599               		.cfi_def_cfa_offset 24
 1600 05f0 0FB6      		in __tmp_reg__,__SREG__
 1601 05f2 F894      		cli
 1602 05f4 DEBF      		out __SP_H__,r29
 1603 05f6 0FBE      		out __SREG__,__tmp_reg__
 1604 05f8 CDBF      		out __SP_L__,r28
 1605               	/* prologue: function */
 1606               	/* frame size = 16 */
 1607               	/* stack size = 22 */
 1608               	.L__stack_usage = 22
 1609 05fa 8C01      		movw r16,r24
 794:fat.c         ****         return 0;
 1610               		.loc 1 794 5 is_stmt 1 view .LVU315
 795:fat.c         **** 
 1611               		.loc 1 795 16 is_stmt 0 view .LVU316
 1612 05fc 80E0      		ldi r24,0
 1613               	.LVL96:
 794:fat.c         ****         return 0;
 1614               		.loc 1 794 7 view .LVU317
 1615 05fe 6230      		cpi r22,2
 1616 0600 7105      		cpc r23,__zero_reg__
 1617 0602 00F0      		brlo .L102
 1618               	.LVL97:
 1619               	.LBB48:
 1620               	.LBI48:
 792:fat.c         **** {
 1621               		.loc 1 792 9 is_stmt 1 view .LVU318
 1622               	.LBB49:
 797:fat.c         **** 
 1623               		.loc 1 797 5 view .LVU319
 797:fat.c         **** 
 1624               		.loc 1 797 31 is_stmt 0 view .LVU320
 1625 0604 C801      		movw r24,r16
 1626 0606 0E94 0000 		call fat_cluster_offset
 1627               	.LVL98:
 799:fat.c         ****     memset(zero, 0, sizeof(zero));
 1628               		.loc 1 799 5 is_stmt 1 view .LVU321
 800:fat.c         ****     return fs->partition->device_write_interval(cluster_offset,
 1629               		.loc 1 800 5 view .LVU322
 1630 060a AE01      		movw r20,r28
 1631 060c 4F5F      		subi r20,-1
 1632 060e 5F4F      		sbci r21,-1
 1633 0610 20E1      		ldi r18,lo8(16)
 1634 0612 DA01      		movw r26,r20
 1635               		0:
 1636 0614 1D92      		st X+,__zero_reg__
 1637 0616 2A95      		dec r18
 1638 0618 01F4      		brne 0b
 801:fat.c         ****                                                 zero,
 1639               		.loc 1 801 5 view .LVU323
 801:fat.c         ****                                                 zero,
 1640               		.loc 1 801 12 is_stmt 0 view .LVU324
 1641 061a F801      		movw r30,r16
 1642 061c 2089      		ldd r18,Z+16
 1643 061e 3189      		ldd r19,Z+17
 801:fat.c         ****                                                 zero,
 1644               		.loc 1 801 25 view .LVU325
 1645 0620 0190      		ld __tmp_reg__,Z+
 1646 0622 F081      		ld r31,Z
 1647 0624 E02D      		mov r30,__tmp_reg__
 801:fat.c         ****                                                 zero,
 1648               		.loc 1 801 12 view .LVU326
 1649 0626 0680      		ldd __tmp_reg__,Z+6
 1650 0628 F781      		ldd r31,Z+7
 1651 062a E02D      		mov r30,__tmp_reg__
 1652 062c F12C      		mov r15,__zero_reg__
 1653 062e E12C      		mov r14,__zero_reg__
 1654 0630 00E0      		ldi r16,lo8(gs(fat_clear_cluster_callback))
 1655 0632 10E0      		ldi r17,hi8(gs(fat_clear_cluster_callback))
 1656               	.LVL99:
 801:fat.c         ****                                                 zero,
 1657               		.loc 1 801 12 view .LVU327
 1658 0634 0995      		icall
 1659               	.LVL100:
 1660               	.L102:
 1661               	/* epilogue start */
 801:fat.c         ****                                                 zero,
 1662               		.loc 1 801 12 view .LVU328
 1663               	.LBE49:
 1664               	.LBE48:
 807:fat.c         **** #endif
 1665               		.loc 1 807 1 view .LVU329
 1666 0636 6096      		adiw r28,16
 1667 0638 0FB6      		in __tmp_reg__,__SREG__
 1668 063a F894      		cli
 1669 063c DEBF      		out __SP_H__,r29
 1670 063e 0FBE      		out __SREG__,__tmp_reg__
 1671 0640 CDBF      		out __SP_L__,r28
 1672 0642 DF91      		pop r29
 1673 0644 CF91      		pop r28
 1674 0646 1F91      		pop r17
 1675 0648 0F91      		pop r16
 1676 064a FF90      		pop r15
 1677 064c EF90      		pop r14
 1678 064e 0895      		ret
 1679               		.cfi_endproc
 1680               	.LFE7:
 1683               	fat_find_offset_for_dir_entry.isra.4.part.5:
 1684               	.LVL101:
 1685               	.LFB37:
1741:fat.c         **** {
 1686               		.loc 1 1741 10 is_stmt 1 view -0
 1687               		.cfi_startproc
1741:fat.c         **** {
 1688               		.loc 1 1741 10 is_stmt 0 view .LVU331
 1689 0650 4F92      		push r4
 1690               	.LCFI74:
 1691               		.cfi_def_cfa_offset 3
 1692               		.cfi_offset 4, -2
 1693 0652 5F92      		push r5
 1694               	.LCFI75:
 1695               		.cfi_def_cfa_offset 4
 1696               		.cfi_offset 5, -3
 1697 0654 6F92      		push r6
 1698               	.LCFI76:
 1699               		.cfi_def_cfa_offset 5
 1700               		.cfi_offset 6, -4
 1701 0656 7F92      		push r7
 1702               	.LCFI77:
 1703               		.cfi_def_cfa_offset 6
 1704               		.cfi_offset 7, -5
 1705 0658 8F92      		push r8
 1706               	.LCFI78:
 1707               		.cfi_def_cfa_offset 7
 1708               		.cfi_offset 8, -6
 1709 065a 9F92      		push r9
 1710               	.LCFI79:
 1711               		.cfi_def_cfa_offset 8
 1712               		.cfi_offset 9, -7
 1713 065c AF92      		push r10
 1714               	.LCFI80:
 1715               		.cfi_def_cfa_offset 9
 1716               		.cfi_offset 10, -8
 1717 065e BF92      		push r11
 1718               	.LCFI81:
 1719               		.cfi_def_cfa_offset 10
 1720               		.cfi_offset 11, -9
 1721 0660 CF92      		push r12
 1722               	.LCFI82:
 1723               		.cfi_def_cfa_offset 11
 1724               		.cfi_offset 12, -10
 1725 0662 DF92      		push r13
 1726               	.LCFI83:
 1727               		.cfi_def_cfa_offset 12
 1728               		.cfi_offset 13, -11
 1729 0664 EF92      		push r14
 1730               	.LCFI84:
 1731               		.cfi_def_cfa_offset 13
 1732               		.cfi_offset 14, -12
 1733 0666 FF92      		push r15
 1734               	.LCFI85:
 1735               		.cfi_def_cfa_offset 14
 1736               		.cfi_offset 15, -13
 1737 0668 0F93      		push r16
 1738               	.LCFI86:
 1739               		.cfi_def_cfa_offset 15
 1740               		.cfi_offset 16, -14
 1741 066a 1F93      		push r17
 1742               	.LCFI87:
 1743               		.cfi_def_cfa_offset 16
 1744               		.cfi_offset 17, -15
 1745 066c CF93      		push r28
 1746               	.LCFI88:
 1747               		.cfi_def_cfa_offset 17
 1748               		.cfi_offset 28, -16
 1749 066e DF93      		push r29
 1750               	.LCFI89:
 1751               		.cfi_def_cfa_offset 18
 1752               		.cfi_offset 29, -17
 1753 0670 00D0      		rcall .
 1754 0672 00D0      		rcall .
 1755 0674 0F92      		push __tmp_reg__
 1756               	.LCFI90:
 1757               		.cfi_def_cfa_offset 23
 1758 0676 CDB7      		in r28,__SP_L__
 1759 0678 DEB7      		in r29,__SP_H__
 1760               	.LCFI91:
 1761               		.cfi_def_cfa_register 28
 1762               	/* prologue: function */
 1763               	/* frame size = 5 */
 1764               	/* stack size = 21 */
 1765               	.L__stack_usage = 21
 1766 067a 8C01      		movw r16,r24
 1767 067c 9B01      		movw r18,r22
1748:fat.c         ****     uint8_t free_dir_entries_found = 0;
 1768               		.loc 1 1748 5 is_stmt 1 view .LVU332
1748:fat.c         ****     uint8_t free_dir_entries_found = 0;
 1769               		.loc 1 1748 40 is_stmt 0 view .LVU333
 1770 067e FA01      		movw r30,r20
 1771               		0:
 1772 0680 0190      		ld __tmp_reg__,Z+
 1773 0682 0020      		tst __tmp_reg__
 1774 0684 01F4      		brne 0b
 1775 0686 CF01      		movw r24,r30
 1776               	.LVL102:
1748:fat.c         ****     uint8_t free_dir_entries_found = 0;
 1777               		.loc 1 1748 40 view .LVU334
 1778 0688 841B      		sub r24,r20
 1779 068a 950B      		sbc r25,r21
1748:fat.c         ****     uint8_t free_dir_entries_found = 0;
 1780               		.loc 1 1748 69 view .LVU335
 1781 068c 0B96      		adiw r24,11
1748:fat.c         ****     uint8_t free_dir_entries_found = 0;
 1782               		.loc 1 1748 75 view .LVU336
 1783 068e 6DE0      		ldi r22,lo8(13)
 1784 0690 70E0      		ldi r23,0
 1785 0692 0E94 0000 		call __udivmodhi4
1748:fat.c         ****     uint8_t free_dir_entries_found = 0;
 1786               		.loc 1 1748 13 view .LVU337
 1787 0696 8824      		clr r8
 1788 0698 8394      		inc r8
 1789 069a 860E      		add r8,r22
 1790               	.LVL103:
1749:fat.c         **** #endif
 1791               		.loc 1 1749 5 is_stmt 1 view .LVU338
1751:fat.c         ****     offset_t dir_entry_offset = 0;
 1792               		.loc 1 1751 5 view .LVU339
1751:fat.c         ****     offset_t dir_entry_offset = 0;
 1793               		.loc 1 1751 15 is_stmt 0 view .LVU340
 1794 069c D901      		movw r26,r18
 1795 069e AD90      		ld r10,X+
 1796 06a0 BC90      		ld r11,X
 1797               	.LVL104:
1752:fat.c         ****     offset_t offset = 0;
 1798               		.loc 1 1752 5 is_stmt 1 view .LVU341
1753:fat.c         ****     offset_t offset_to = 0;
 1799               		.loc 1 1753 5 view .LVU342
1754:fat.c         **** #if FAT_FAT32_SUPPORT
 1800               		.loc 1 1754 5 view .LVU343
1759:fat.c         ****     {
 1801               		.loc 1 1759 5 view .LVU344
1759:fat.c         ****     {
 1802               		.loc 1 1759 7 is_stmt 0 view .LVU345
 1803 06a2 A114      		cp r10,__zero_reg__
 1804 06a4 B104      		cpc r11,__zero_reg__
 1805 06a6 01F0      		breq .+2
 1806 06a8 00C0      		rjmp .L116
1770:fat.c         ****             offset_to = fs->header.cluster_zero_offset;
 1807               		.loc 1 1770 13 is_stmt 1 view .LVU346
1770:fat.c         ****             offset_to = fs->header.cluster_zero_offset;
 1808               		.loc 1 1770 20 is_stmt 0 view .LVU347
 1809 06aa F801      		movw r30,r16
 1810 06ac C688      		ldd r12,Z+22
 1811 06ae D788      		ldd r13,Z+23
 1812 06b0 E08C      		ldd r14,Z+24
 1813 06b2 F18C      		ldd r15,Z+25
 1814               	.LVL105:
1771:fat.c         ****             dir_entry_offset = offset;
 1815               		.loc 1 1771 13 is_stmt 1 view .LVU348
1771:fat.c         ****             dir_entry_offset = offset;
 1816               		.loc 1 1771 23 is_stmt 0 view .LVU349
 1817 06b4 2289      		ldd r18,Z+18
 1818 06b6 3389      		ldd r19,Z+19
 1819 06b8 4489      		ldd r20,Z+20
 1820 06ba 5589      		ldd r21,Z+21
 1821 06bc 2A83      		std Y+2,r18
 1822 06be 3B83      		std Y+3,r19
 1823 06c0 4C83      		std Y+4,r20
 1824 06c2 5D83      		std Y+5,r21
 1825               	.LVL106:
1772:fat.c         ****         }
 1826               		.loc 1 1772 13 is_stmt 1 view .LVU350
 1827               	.L106:
1752:fat.c         ****     offset_t offset = 0;
 1828               		.loc 1 1752 14 is_stmt 0 view .LVU351
 1829 06c4 2601      		movw r4,r12
 1830 06c6 3701      		movw r6,r14
 1831 06c8 912C      		mov r9,__zero_reg__
 1832               	.LVL107:
 1833               	.L114:
1776:fat.c         ****     {
 1834               		.loc 1 1776 5 is_stmt 1 view .LVU352
 1835               	.LBB50:
1778:fat.c         ****         {
 1836               		.loc 1 1778 9 view .LVU353
1778:fat.c         ****         {
 1837               		.loc 1 1778 11 is_stmt 0 view .LVU354
 1838 06ca 2A81      		ldd r18,Y+2
 1839 06cc 3B81      		ldd r19,Y+3
 1840 06ce 4C81      		ldd r20,Y+4
 1841 06d0 5D81      		ldd r21,Y+5
 1842 06d2 4216      		cp r4,r18
 1843 06d4 5306      		cpc r5,r19
 1844 06d6 6406      		cpc r6,r20
 1845 06d8 7506      		cpc r7,r21
 1846 06da 01F0      		breq .+2
 1847 06dc 00C0      		rjmp .L107
1780:fat.c         ****                 /* We iterated through the whole root directory and
 1848               		.loc 1 1780 13 is_stmt 1 view .LVU355
1780:fat.c         ****                 /* We iterated through the whole root directory and
 1849               		.loc 1 1780 15 is_stmt 0 view .LVU356
 1850 06de A114      		cp r10,__zero_reg__
 1851 06e0 B104      		cpc r11,__zero_reg__
 1852 06e2 01F4      		brne .+2
 1853 06e4 00C0      		rjmp .L108
1786:fat.c         ****             {
 1854               		.loc 1 1786 13 is_stmt 1 view .LVU357
1786:fat.c         ****             {
 1855               		.loc 1 1786 15 is_stmt 0 view .LVU358
 1856 06e6 4528      		or r4,r5
 1857 06e8 4628      		or r4,r6
 1858 06ea 4728      		or r4,r7
 1859 06ec 01F4      		brne .+2
 1860 06ee 00C0      		rjmp .L109
 1861               	.LBB51:
1792:fat.c         ****                 if(!cluster_next)
 1862               		.loc 1 1792 17 is_stmt 1 view .LVU359
1792:fat.c         ****                 if(!cluster_next)
 1863               		.loc 1 1792 42 is_stmt 0 view .LVU360
 1864 06f0 B501      		movw r22,r10
 1865 06f2 C801      		movw r24,r16
 1866 06f4 0E94 0000 		call fat_get_next_cluster
 1867               	.LVL108:
1793:fat.c         ****                 {
 1868               		.loc 1 1793 17 is_stmt 1 view .LVU361
1793:fat.c         ****                 {
 1869               		.loc 1 1793 19 is_stmt 0 view .LVU362
 1870 06f8 0097      		sbiw r24,0
 1871 06fa 01F4      		brne .L117
1795:fat.c         ****                     if(!cluster_next)
 1872               		.loc 1 1795 21 is_stmt 1 view .LVU363
1795:fat.c         ****                     if(!cluster_next)
 1873               		.loc 1 1795 36 is_stmt 0 view .LVU364
 1874 06fc 41E0      		ldi r20,lo8(1)
 1875 06fe 50E0      		ldi r21,0
 1876 0700 B501      		movw r22,r10
 1877 0702 C801      		movw r24,r16
 1878               	.LVL109:
1795:fat.c         ****                     if(!cluster_next)
 1879               		.loc 1 1795 36 view .LVU365
 1880 0704 0E94 0000 		call fat_append_clusters
 1881               	.LVL110:
 1882 0708 AC01      		movw r20,r24
 1883               	.LVL111:
1796:fat.c         ****                         return 0;
 1884               		.loc 1 1796 21 is_stmt 1 view .LVU366
1796:fat.c         ****                         return 0;
 1885               		.loc 1 1796 23 is_stmt 0 view .LVU367
 1886 070a 0097      		sbiw r24,0
 1887 070c 01F4      		brne .+2
 1888 070e 00C0      		rjmp .L108
1800:fat.c         ****                                        (offset_t) (cluster_next - 2) * fs->header.cluster_size;
 1889               		.loc 1 1800 21 is_stmt 1 view .LVU368
1801:fat.c         **** 
 1890               		.loc 1 1801 65 is_stmt 0 view .LVU369
 1891 0710 9C01      		movw r18,r24
 1892 0712 2250      		subi r18,2
 1893 0714 3109      		sbc r19,__zero_reg__
1801:fat.c         **** 
 1894               		.loc 1 1801 70 view .LVU370
 1895 0716 F801      		movw r30,r16
 1896 0718 A089      		ldd r26,Z+16
 1897 071a B189      		ldd r27,Z+17
 1898 071c 0E94 0000 		call __umulhisi3
1800:fat.c         ****                                        (offset_t) (cluster_next - 2) * fs->header.cluster_size;
 1899               		.loc 1 1800 38 view .LVU371
 1900 0720 C288      		ldd r12,Z+18
 1901 0722 D388      		ldd r13,Z+19
 1902 0724 E488      		ldd r14,Z+20
 1903 0726 F588      		ldd r15,Z+21
 1904               	.LVL112:
1800:fat.c         ****                                        (offset_t) (cluster_next - 2) * fs->header.cluster_size;
 1905               		.loc 1 1800 38 view .LVU372
 1906 0728 C60E      		add r12,r22
 1907 072a D71E      		adc r13,r23
 1908 072c E81E      		adc r14,r24
 1909 072e F91E      		adc r15,r25
 1910               	.LVL113:
1804:fat.c         **** 
 1911               		.loc 1 1804 21 is_stmt 1 view .LVU373
 1912 0730 BA01      		movw r22,r20
 1913 0732 C801      		movw r24,r16
 1914 0734 0E94 0000 		call fat_clear_cluster
 1915               	.LVL114:
1806:fat.c         ****                 }
 1916               		.loc 1 1806 21 view .LVU374
 1917               	.L105:
1806:fat.c         ****                 }
 1918               		.loc 1 1806 21 is_stmt 0 view .LVU375
 1919               	.LBE51:
 1920               	.LBE50:
1847:fat.c         **** #endif
 1921               		.loc 1 1847 1 view .LVU376
 1922 0738 C701      		movw r24,r14
 1923 073a B601      		movw r22,r12
 1924               	/* epilogue start */
 1925 073c 0F90      		pop __tmp_reg__
 1926 073e 0F90      		pop __tmp_reg__
 1927 0740 0F90      		pop __tmp_reg__
 1928 0742 0F90      		pop __tmp_reg__
 1929 0744 0F90      		pop __tmp_reg__
 1930 0746 DF91      		pop r29
 1931 0748 CF91      		pop r28
 1932 074a 1F91      		pop r17
 1933 074c 0F91      		pop r16
 1934               	.LVL115:
1847:fat.c         **** #endif
 1935               		.loc 1 1847 1 view .LVU377
 1936 074e FF90      		pop r15
 1937 0750 EF90      		pop r14
 1938 0752 DF90      		pop r13
 1939 0754 CF90      		pop r12
 1940 0756 BF90      		pop r11
 1941 0758 AF90      		pop r10
 1942               	.LVL116:
1847:fat.c         **** #endif
 1943               		.loc 1 1847 1 view .LVU378
 1944 075a 9F90      		pop r9
 1945 075c 8F90      		pop r8
 1946               	.LVL117:
1847:fat.c         **** #endif
 1947               		.loc 1 1847 1 view .LVU379
 1948 075e 7F90      		pop r7
 1949 0760 6F90      		pop r6
 1950 0762 5F90      		pop r5
 1951 0764 4F90      		pop r4
 1952               	.LVL118:
1847:fat.c         **** #endif
 1953               		.loc 1 1847 1 view .LVU380
 1954 0766 0895      		ret
 1955               	.LVL119:
 1956               	.L116:
1754:fat.c         **** #if FAT_FAT32_SUPPORT
 1957               		.loc 1 1754 14 view .LVU381
 1958 0768 1A82      		std Y+2,__zero_reg__
 1959 076a 1B82      		std Y+3,__zero_reg__
 1960 076c 1C82      		std Y+4,__zero_reg__
 1961 076e 1D82      		std Y+5,__zero_reg__
1752:fat.c         ****     offset_t offset = 0;
 1962               		.loc 1 1752 14 view .LVU382
 1963 0770 C12C      		mov r12,__zero_reg__
 1964 0772 D12C      		mov r13,__zero_reg__
 1965 0774 7601      		movw r14,r12
 1966 0776 00C0      		rjmp .L106
 1967               	.LVL120:
 1968               	.L117:
 1969               	.LBB53:
 1970               	.LBB52:
1793:fat.c         ****                 {
 1971               		.loc 1 1793 19 view .LVU383
 1972 0778 5C01      		movw r10,r24
 1973               	.LVL121:
 1974               	.L109:
1793:fat.c         ****                 {
 1975               		.loc 1 1793 19 view .LVU384
 1976               	.LBE52:
1811:fat.c         ****             offset_to = offset + fs->header.cluster_size;
 1977               		.loc 1 1811 13 is_stmt 1 view .LVU385
1811:fat.c         ****             offset_to = offset + fs->header.cluster_size;
 1978               		.loc 1 1811 22 is_stmt 0 view .LVU386
 1979 077a B501      		movw r22,r10
 1980 077c C801      		movw r24,r16
 1981 077e 0E94 0000 		call fat_cluster_offset
 1982               	.LVL122:
 1983 0782 2B01      		movw r4,r22
 1984               	.LVL123:
1811:fat.c         ****             offset_to = offset + fs->header.cluster_size;
 1985               		.loc 1 1811 22 view .LVU387
 1986 0784 3C01      		movw r6,r24
 1987               	.LVL124:
1812:fat.c         ****             dir_entry_offset = offset;
 1988               		.loc 1 1812 13 is_stmt 1 view .LVU388
1812:fat.c         ****             dir_entry_offset = offset;
 1989               		.loc 1 1812 44 is_stmt 0 view .LVU389
 1990 0786 D801      		movw r26,r16
 1991 0788 5096      		adiw r26,16
 1992 078a 8D91      		ld r24,X+
 1993 078c 9C91      		ld r25,X
 1994               	.LVL125:
1812:fat.c         ****             dir_entry_offset = offset;
 1995               		.loc 1 1812 23 view .LVU390
 1996 078e A301      		movw r20,r6
 1997 0790 9201      		movw r18,r4
 1998 0792 280F      		add r18,r24
 1999 0794 391F      		adc r19,r25
 2000 0796 411D      		adc r20,__zero_reg__
 2001 0798 511D      		adc r21,__zero_reg__
 2002 079a 2A83      		std Y+2,r18
 2003 079c 3B83      		std Y+3,r19
 2004 079e 4C83      		std Y+4,r20
 2005 07a0 5D83      		std Y+5,r21
1813:fat.c         **** #if FAT_LFN_SUPPORT
 2006               		.loc 1 1813 13 is_stmt 1 view .LVU391
 2007               	.LVL126:
1815:fat.c         **** #endif
 2008               		.loc 1 1815 13 view .LVU392
1813:fat.c         **** #if FAT_LFN_SUPPORT
 2009               		.loc 1 1813 30 is_stmt 0 view .LVU393
 2010 07a2 7301      		movw r14,r6
 2011 07a4 6201      		movw r12,r4
1815:fat.c         **** #endif
 2012               		.loc 1 1815 36 view .LVU394
 2013 07a6 912C      		mov r9,__zero_reg__
 2014               	.LVL127:
 2015               	.L107:
1820:fat.c         ****         if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
 2016               		.loc 1 1820 9 is_stmt 1 view .LVU395
1821:fat.c         ****             return 0;
 2017               		.loc 1 1821 9 view .LVU396
1821:fat.c         ****             return 0;
 2018               		.loc 1 1821 26 is_stmt 0 view .LVU397
 2019 07a8 D801      		movw r26,r16
 2020 07aa ED91      		ld r30,X+
 2021 07ac FC91      		ld r31,X
1821:fat.c         ****             return 0;
 2022               		.loc 1 1821 13 view .LVU398
 2023 07ae 0190      		ld __tmp_reg__,Z+
 2024 07b0 F081      		ld r31,Z
 2025 07b2 E02D      		mov r30,__tmp_reg__
 2026 07b4 21E0      		ldi r18,lo8(1)
 2027 07b6 30E0      		ldi r19,0
 2028 07b8 AE01      		movw r20,r28
 2029 07ba 4F5F      		subi r20,-1
 2030 07bc 5F4F      		sbci r21,-1
 2031 07be C301      		movw r24,r6
 2032 07c0 B201      		movw r22,r4
 2033 07c2 0995      		icall
 2034               	.LVL128:
1821:fat.c         ****             return 0;
 2035               		.loc 1 1821 11 view .LVU399
 2036 07c4 8823      		tst r24
 2037 07c6 01F0      		breq .L108
1825:fat.c         ****         {
 2038               		.loc 1 1825 9 is_stmt 1 view .LVU400
1825:fat.c         ****         {
 2039               		.loc 1 1825 23 is_stmt 0 view .LVU401
 2040 07c8 8981      		ldd r24,Y+1
1825:fat.c         ****         {
 2041               		.loc 1 1825 11 view .LVU402
 2042 07ca 853E      		cpi r24,lo8(-27)
 2043 07cc 01F0      		breq .L111
1825:fat.c         ****         {
 2044               		.loc 1 1825 47 view .LVU403
 2045 07ce 8111      		cpse r24,__zero_reg__
 2046 07d0 00C0      		rjmp .L112
 2047               	.L111:
1829:fat.c         ****             if(free_dir_entries_found >= free_dir_entries_needed)
 2048               		.loc 1 1829 13 is_stmt 1 view .LVU404
 2049               	.LVL129:
1829:fat.c         ****             if(free_dir_entries_found >= free_dir_entries_needed)
 2050               		.loc 1 1829 13 is_stmt 0 view .LVU405
 2051 07d2 9394      		inc r9
 2052               	.LVL130:
1830:fat.c         **** #endif
 2053               		.loc 1 1830 13 is_stmt 1 view .LVU406
1830:fat.c         **** #endif
 2054               		.loc 1 1830 15 is_stmt 0 view .LVU407
 2055 07d4 9814      		cp r9,r8
 2056 07d6 00F0      		brlo .+2
 2057 07d8 00C0      		rjmp .L105
1834:fat.c         ****         }
 2058               		.loc 1 1834 13 is_stmt 1 view .LVU408
1834:fat.c         ****         }
 2059               		.loc 1 1834 20 is_stmt 0 view .LVU409
 2060 07da B0E2      		ldi r27,32
 2061 07dc 4B0E      		add r4,r27
 2062 07de 511C      		adc r5,__zero_reg__
 2063 07e0 611C      		adc r6,__zero_reg__
 2064 07e2 711C      		adc r7,__zero_reg__
 2065               	.LVL131:
1834:fat.c         ****         }
 2066               		.loc 1 1834 20 view .LVU410
 2067 07e4 00C0      		rjmp .L114
 2068               	.LVL132:
 2069               	.L112:
1838:fat.c         ****             dir_entry_offset = offset;
 2070               		.loc 1 1838 13 is_stmt 1 view .LVU411
1838:fat.c         ****             dir_entry_offset = offset;
 2071               		.loc 1 1838 20 is_stmt 0 view .LVU412
 2072 07e6 7301      		movw r14,r6
 2073 07e8 6201      		movw r12,r4
 2074 07ea E0E2      		ldi r30,32
 2075 07ec CE0E      		add r12,r30
 2076 07ee D11C      		adc r13,__zero_reg__
 2077 07f0 E11C      		adc r14,__zero_reg__
 2078 07f2 F11C      		adc r15,__zero_reg__
 2079               	.LVL133:
1839:fat.c         **** #if FAT_LFN_SUPPORT
 2080               		.loc 1 1839 13 is_stmt 1 view .LVU413
1841:fat.c         **** #endif
 2081               		.loc 1 1841 13 view .LVU414
1841:fat.c         **** #endif
 2082               		.loc 1 1841 13 is_stmt 0 view .LVU415
 2083 07f4 00C0      		rjmp .L106
 2084               	.LVL134:
 2085               	.L108:
1784:fat.c         **** 
 2086               		.loc 1 1784 24 view .LVU416
 2087 07f6 C12C      		mov r12,__zero_reg__
 2088 07f8 D12C      		mov r13,__zero_reg__
 2089 07fa 7601      		movw r14,r12
 2090 07fc 00C0      		rjmp .L105
 2091               	.LBE53:
 2092               		.cfi_endproc
 2093               	.LFE37:
 2096               	fat_write_dir_entry:
 2097               	.LVL135:
 2098               	.LFB24:
1871:fat.c         ****     if(!fs || !dir_entry)
 2099               		.loc 1 1871 1 is_stmt 1 view -0
 2100               		.cfi_startproc
1871:fat.c         ****     if(!fs || !dir_entry)
 2101               		.loc 1 1871 1 is_stmt 0 view .LVU418
 2102 07fe 3F92      		push r3
 2103               	.LCFI92:
 2104               		.cfi_def_cfa_offset 3
 2105               		.cfi_offset 3, -2
 2106 0800 4F92      		push r4
 2107               	.LCFI93:
 2108               		.cfi_def_cfa_offset 4
 2109               		.cfi_offset 4, -3
 2110 0802 5F92      		push r5
 2111               	.LCFI94:
 2112               		.cfi_def_cfa_offset 5
 2113               		.cfi_offset 5, -4
 2114 0804 6F92      		push r6
 2115               	.LCFI95:
 2116               		.cfi_def_cfa_offset 6
 2117               		.cfi_offset 6, -5
 2118 0806 7F92      		push r7
 2119               	.LCFI96:
 2120               		.cfi_def_cfa_offset 7
 2121               		.cfi_offset 7, -6
 2122 0808 8F92      		push r8
 2123               	.LCFI97:
 2124               		.cfi_def_cfa_offset 8
 2125               		.cfi_offset 8, -7
 2126 080a 9F92      		push r9
 2127               	.LCFI98:
 2128               		.cfi_def_cfa_offset 9
 2129               		.cfi_offset 9, -8
 2130 080c AF92      		push r10
 2131               	.LCFI99:
 2132               		.cfi_def_cfa_offset 10
 2133               		.cfi_offset 10, -9
 2134 080e BF92      		push r11
 2135               	.LCFI100:
 2136               		.cfi_def_cfa_offset 11
 2137               		.cfi_offset 11, -10
 2138 0810 CF92      		push r12
 2139               	.LCFI101:
 2140               		.cfi_def_cfa_offset 12
 2141               		.cfi_offset 12, -11
 2142 0812 DF92      		push r13
 2143               	.LCFI102:
 2144               		.cfi_def_cfa_offset 13
 2145               		.cfi_offset 13, -12
 2146 0814 EF92      		push r14
 2147               	.LCFI103:
 2148               		.cfi_def_cfa_offset 14
 2149               		.cfi_offset 14, -13
 2150 0816 FF92      		push r15
 2151               	.LCFI104:
 2152               		.cfi_def_cfa_offset 15
 2153               		.cfi_offset 15, -14
 2154 0818 0F93      		push r16
 2155               	.LCFI105:
 2156               		.cfi_def_cfa_offset 16
 2157               		.cfi_offset 16, -15
 2158 081a 1F93      		push r17
 2159               	.LCFI106:
 2160               		.cfi_def_cfa_offset 17
 2161               		.cfi_offset 17, -16
 2162 081c CF93      		push r28
 2163               	.LCFI107:
 2164               		.cfi_def_cfa_offset 18
 2165               		.cfi_offset 28, -17
 2166 081e DF93      		push r29
 2167               	.LCFI108:
 2168               		.cfi_def_cfa_offset 19
 2169               		.cfi_offset 29, -18
 2170 0820 CDB7      		in r28,__SP_L__
 2171 0822 DEB7      		in r29,__SP_H__
 2172               	.LCFI109:
 2173               		.cfi_def_cfa_register 28
 2174 0824 A097      		sbiw r28,32
 2175               	.LCFI110:
 2176               		.cfi_def_cfa_offset 51
 2177 0826 0FB6      		in __tmp_reg__,__SREG__
 2178 0828 F894      		cli
 2179 082a DEBF      		out __SP_H__,r29
 2180 082c 0FBE      		out __SREG__,__tmp_reg__
 2181 082e CDBF      		out __SP_L__,r28
 2182               	/* prologue: function */
 2183               	/* frame size = 32 */
 2184               	/* stack size = 49 */
 2185               	.L__stack_usage = 49
 2186 0830 8B01      		movw r16,r22
1872:fat.c         ****         return 0;
 2187               		.loc 1 1872 5 is_stmt 1 view .LVU419
1872:fat.c         ****         return 0;
 2188               		.loc 1 1872 7 is_stmt 0 view .LVU420
 2189 0832 0097      		sbiw r24,0
 2190 0834 01F4      		brne .+2
 2191 0836 00C0      		rjmp .L154
1872:fat.c         ****         return 0;
 2192               		.loc 1 1872 12 discriminator 1 view .LVU421
 2193 0838 6115      		cp r22,__zero_reg__
 2194 083a 7105      		cpc r23,__zero_reg__
 2195 083c 01F4      		brne .+2
 2196 083e 00C0      		rjmp .L154
 2197               	.LVL136:
 2198               	.LBB60:
 2199               	.LBI60:
1870:fat.c         **** {
 2200               		.loc 1 1870 9 is_stmt 1 view .LVU422
 2201               	.LBB61:
1890:fat.c         ****     offset_t offset = dir_entry->entry_offset;
 2202               		.loc 1 1890 5 view .LVU423
1890:fat.c         ****     offset_t offset = dir_entry->entry_offset;
 2203               		.loc 1 1890 20 is_stmt 0 view .LVU424
 2204 0840 DC01      		movw r26,r24
 2205 0842 ED91      		ld r30,X+
 2206 0844 FC91      		ld r31,X
 2207 0846 A480      		ldd r10,Z+4
 2208 0848 B580      		ldd r11,Z+5
 2209               	.LVL137:
1891:fat.c         ****     const char* name = dir_entry->long_name;
 2210               		.loc 1 1891 5 is_stmt 1 view .LVU425
1891:fat.c         ****     const char* name = dir_entry->long_name;
 2211               		.loc 1 1891 14 is_stmt 0 view .LVU426
 2212 084a FB01      		movw r30,r22
 2213 084c 47A0      		ldd r4,Z+39
 2214 084e 50A4      		ldd r5,Z+40
 2215 0850 61A4      		ldd r6,Z+41
 2216 0852 72A4      		ldd r7,Z+42
 2217               	.LVL138:
1892:fat.c         ****     uint8_t name_len = strlen(name);
 2218               		.loc 1 1892 5 is_stmt 1 view .LVU427
1893:fat.c         **** #if FAT_LFN_SUPPORT
 2219               		.loc 1 1893 5 view .LVU428
1893:fat.c         **** #if FAT_LFN_SUPPORT
 2220               		.loc 1 1893 24 is_stmt 0 view .LVU429
 2221               		0:
 2222 0854 0190      		ld __tmp_reg__,Z+
 2223 0856 0020      		tst __tmp_reg__
 2224 0858 01F4      		brne 0b
 2225 085a 3197      		sbiw r30,1
 2226 085c 6F01      		movw r12,r30
 2227 085e C61A      		sub r12,r22
 2228 0860 D70A      		sbc r13,r23
1893:fat.c         **** #if FAT_LFN_SUPPORT
 2229               		.loc 1 1893 13 view .LVU430
 2230 0862 EC2C      		mov r14,r12
 2231               	.LVL139:
1895:fat.c         **** #endif
 2232               		.loc 1 1895 5 is_stmt 1 view .LVU431
1895:fat.c         **** #endif
 2233               		.loc 1 1895 41 is_stmt 0 view .LVU432
 2234 0864 C601      		movw r24,r12
 2235               	.LVL140:
1895:fat.c         **** #endif
 2236               		.loc 1 1895 41 view .LVU433
 2237 0866 0C96      		adiw r24,12
1895:fat.c         **** #endif
 2238               		.loc 1 1895 47 view .LVU434
 2239 0868 6DE0      		ldi r22,lo8(13)
 2240 086a 70E0      		ldi r23,0
 2241               	.LVL141:
1895:fat.c         **** #endif
 2242               		.loc 1 1895 47 view .LVU435
 2243 086c 0E94 0000 		call __divmodhi4
 2244               	.LVL142:
1895:fat.c         **** #endif
 2245               		.loc 1 1895 13 view .LVU436
 2246 0870 F62E      		mov r15,r22
 2247               	.LVL143:
1897:fat.c         **** 
 2248               		.loc 1 1897 5 is_stmt 1 view .LVU437
1902:fat.c         ****     char* name_ext = strrchr(name, '.');
 2249               		.loc 1 1902 5 view .LVU438
 2250 0872 4BE0      		ldi r20,lo8(11)
 2251 0874 50E0      		ldi r21,0
 2252 0876 60E2      		ldi r22,lo8(32)
 2253 0878 70E0      		ldi r23,0
 2254 087a CE01      		movw r24,r28
 2255 087c 0196      		adiw r24,1
 2256 087e 0E94 0000 		call memset
 2257               	.LVL144:
1903:fat.c         ****     if(name_ext && *++name_ext)
 2258               		.loc 1 1903 5 view .LVU439
1903:fat.c         ****     if(name_ext && *++name_ext)
 2259               		.loc 1 1903 22 is_stmt 0 view .LVU440
 2260 0882 6EE2      		ldi r22,lo8(46)
 2261 0884 70E0      		ldi r23,0
 2262 0886 C801      		movw r24,r16
 2263 0888 0E94 0000 		call strrchr
 2264               	.LVL145:
1904:fat.c         ****     {
 2265               		.loc 1 1904 5 is_stmt 1 view .LVU441
1904:fat.c         ****     {
 2266               		.loc 1 1904 7 is_stmt 0 view .LVU442
 2267 088c 0097      		sbiw r24,0
 2268 088e 01F0      		breq .L135
 2269               	.LVL146:
1904:fat.c         ****     {
 2270               		.loc 1 1904 17 view .LVU443
 2271 0890 DC01      		movw r26,r24
 2272 0892 1196      		adiw r26,1
 2273 0894 2C91      		ld r18,X
 2274 0896 2223      		tst r18
 2275 0898 01F0      		breq .L135
 2276 089a BC01      		movw r22,r24
 2277 089c 6F5F      		subi r22,-1
 2278 089e 7F4F      		sbci r23,-1
 2279               	.LVL147:
 2280               	.LBB62:
1906:fat.c         ****         name_len -= name_ext_len + 1;
 2281               		.loc 1 1906 9 is_stmt 1 view .LVU444
1906:fat.c         ****         name_len -= name_ext_len + 1;
 2282               		.loc 1 1906 32 is_stmt 0 view .LVU445
 2283 08a0 FB01      		movw r30,r22
 2284               		0:
 2285 08a2 0190      		ld __tmp_reg__,Z+
 2286 08a4 0020      		tst __tmp_reg__
 2287 08a6 01F4      		brne 0b
 2288 08a8 3197      		sbiw r30,1
 2289 08aa E61B      		sub r30,r22
 2290 08ac F70B      		sbc r31,r23
 2291               	.LVL148:
1907:fat.c         **** 
 2292               		.loc 1 1907 9 is_stmt 1 view .LVU446
 2293 08ae CA94      		dec r12
 2294               	.LVL149:
1907:fat.c         **** 
 2295               		.loc 1 1907 18 is_stmt 0 view .LVU447
 2296 08b0 EC2C      		mov r14,r12
 2297 08b2 EE1A      		sub r14,r30
 2298               	.LVL150:
1909:fat.c         **** #if FAT_LFN_SUPPORT
 2299               		.loc 1 1909 9 is_stmt 1 view .LVU448
1916:fat.c         ****     }
 2300               		.loc 1 1916 9 view .LVU449
 2301 08b4 E430      		cpi r30,lo8(4)
 2302 08b6 00F0      		brlo .L136
 2303 08b8 E3E0      		ldi r30,lo8(3)
 2304               	.LVL151:
 2305               	.L136:
1916:fat.c         ****     }
 2306               		.loc 1 1916 9 is_stmt 0 view .LVU450
 2307 08ba 4E2F      		mov r20,r30
 2308 08bc 50E0      		ldi r21,0
 2309 08be CE01      		movw r24,r28
 2310 08c0 0996      		adiw r24,9
 2311 08c2 0E94 0000 		call memcpy
 2312               	.LVL152:
 2313               	.L135:
1916:fat.c         ****     }
 2314               		.loc 1 1916 9 view .LVU451
 2315               	.LBE62:
1919:fat.c         ****     {
 2316               		.loc 1 1919 5 is_stmt 1 view .LVU452
 2317 08c6 F801      		movw r30,r16
 2318 08c8 D1A0      		ldd r13,Z+33
 2319 08ca 92A0      		ldd r9,Z+34
1919:fat.c         ****     {
 2320               		.loc 1 1919 7 is_stmt 0 view .LVU453
 2321 08cc F8E0      		ldi r31,lo8(8)
 2322 08ce FE15      		cp r31,r14
 2323 08d0 00F4      		brsh .+2
 2324 08d2 00C0      		rjmp .L137
1921:fat.c         **** 
 2325               		.loc 1 1921 9 is_stmt 1 view .LVU454
 2326 08d4 4E2D      		mov r20,r14
 2327 08d6 50E0      		ldi r21,0
 2328 08d8 B801      		movw r22,r16
 2329 08da CE01      		movw r24,r28
 2330 08dc 0196      		adiw r24,1
 2331 08de 0E94 0000 		call memcpy
 2332               	.LVL153:
1933:fat.c         ****            ((name[1] == '.' && name[2] == '\0') ||
 2333               		.loc 1 1933 9 view .LVU455
1933:fat.c         ****            ((name[1] == '.' && name[2] == '\0') ||
 2334               		.loc 1 1933 11 is_stmt 0 view .LVU456
 2335 08e2 D801      		movw r26,r16
 2336 08e4 8C91      		ld r24,X
 2337 08e6 8E32      		cpi r24,lo8(46)
 2338 08e8 01F4      		brne .L138
1934:fat.c         ****             name[1] == '\0')
 2339               		.loc 1 1934 18 view .LVU457
 2340 08ea 1196      		adiw r26,1
 2341 08ec 8C91      		ld r24,X
 2342 08ee 1197      		sbiw r26,1
1933:fat.c         ****            ((name[1] == '.' && name[2] == '\0') ||
 2343               		.loc 1 1933 27 view .LVU458
 2344 08f0 8E32      		cpi r24,lo8(46)
 2345 08f2 01F4      		brne .L139
1934:fat.c         ****             name[1] == '\0')
 2346               		.loc 1 1934 36 view .LVU459
 2347 08f4 1296      		adiw r26,2
 2348 08f6 8C91      		ld r24,X
 2349               	.L139:
1934:fat.c         ****             name[1] == '\0')
 2350               		.loc 1 1934 49 view .LVU460
 2351 08f8 8111      		cpse r24,__zero_reg__
 2352 08fa 00C0      		rjmp .L138
1937:fat.c         **** #endif
 2353               		.loc 1 1937 29 view .LVU461
 2354 08fc F12C      		mov r15,__zero_reg__
 2355               	.L138:
 2356               	.LVL154:
1957:fat.c         ****         buffer[0] = 0x05;
 2357               		.loc 1 1957 5 is_stmt 1 view .LVU462
1957:fat.c         ****         buffer[0] = 0x05;
 2358               		.loc 1 1957 7 is_stmt 0 view .LVU463
 2359 08fe 8981      		ldd r24,Y+1
 2360 0900 853E      		cpi r24,lo8(-27)
 2361 0902 01F4      		brne .L144
1958:fat.c         **** 
 2362               		.loc 1 1958 9 is_stmt 1 view .LVU464
1958:fat.c         **** 
 2363               		.loc 1 1958 19 is_stmt 0 view .LVU465
 2364 0904 85E0      		ldi r24,lo8(5)
 2365 0906 8983      		std Y+1,r24
 2366               	.L144:
1961:fat.c         ****     buffer[0x0b] = dir_entry->attributes;
 2367               		.loc 1 1961 5 is_stmt 1 view .LVU466
 2368 0908 FE01      		movw r30,r28
 2369 090a 3C96      		adiw r30,12
 2370 090c 85E1      		ldi r24,lo8(21)
 2371 090e DF01      		movw r26,r30
 2372               		0:
 2373 0910 1D92      		st X+,__zero_reg__
 2374 0912 8A95      		dec r24
 2375 0914 01F4      		brne 0b
1962:fat.c         **** #if FAT_DATETIME_SUPPORT
 2376               		.loc 1 1962 5 view .LVU467
1962:fat.c         **** #if FAT_DATETIME_SUPPORT
 2377               		.loc 1 1962 18 is_stmt 0 view .LVU468
 2378 0916 F801      		movw r30,r16
 2379 0918 80A1      		ldd r24,Z+32
 2380 091a 8C87      		std Y+12,r24
1970:fat.c         ****     write32(&buffer[0x1c], dir_entry->file_size);
 2381               		.loc 1 1970 5 is_stmt 1 view .LVU469
 2382 091c 6D2D      		mov r22,r13
 2383 091e 792D      		mov r23,r9
 2384 0920 CE01      		movw r24,r28
 2385 0922 4B96      		adiw r24,27
 2386 0924 0E94 0000 		call write16
 2387               	.LVL155:
1971:fat.c         **** 
 2388               		.loc 1 1971 5 view .LVU470
 2389 0928 D801      		movw r26,r16
 2390 092a 9396      		adiw r26,35
 2391 092c 4D91      		ld r20,X+
 2392 092e 5D91      		ld r21,X+
 2393 0930 6D91      		ld r22,X+
 2394 0932 7C91      		ld r23,X
 2395 0934 9697      		sbiw r26,35+3
 2396 0936 CE01      		movw r24,r28
 2397 0938 4D96      		adiw r24,29
 2398 093a 0E94 0000 		call write32
 2399               	.LVL156:
1975:fat.c         **** #else
 2400               		.loc 1 1975 5 view .LVU471
1975:fat.c         **** #else
 2401               		.loc 1 1975 58 is_stmt 0 view .LVU472
 2402 093e B0E2      		ldi r27,lo8(32)
 2403 0940 FB9E      		mul r15,r27
 2404 0942 C001      		movw r24,r0
 2405 0944 1124      		clr __zero_reg__
1975:fat.c         **** #else
 2406               		.loc 1 1975 9 view .LVU473
 2407 0946 A301      		movw r20,r6
 2408 0948 9201      		movw r18,r4
 2409 094a 280F      		add r18,r24
 2410 094c 391F      		adc r19,r25
 2411 094e 411D      		adc r20,__zero_reg__
 2412 0950 511D      		adc r21,__zero_reg__
 2413 0952 CA01      		movw r24,r20
 2414 0954 B901      		movw r22,r18
 2415 0956 20E2      		ldi r18,lo8(32)
 2416 0958 30E0      		ldi r19,0
 2417 095a AE01      		movw r20,r28
 2418 095c 4F5F      		subi r20,-1
 2419 095e 5F4F      		sbci r21,-1
 2420 0960 F501      		movw r30,r10
 2421 0962 0995      		icall
 2422               	.LVL157:
1975:fat.c         **** #else
 2423               		.loc 1 1975 7 view .LVU474
 2424 0964 8823      		tst r24
 2425 0966 01F0      		breq .L133
1983:fat.c         ****     
 2426               		.loc 1 1983 5 is_stmt 1 view .LVU475
1983:fat.c         ****     
 2427               		.loc 1 1983 24 is_stmt 0 view .LVU476
 2428 0968 CE01      		movw r24,r28
 2429 096a 0196      		adiw r24,1
 2430 096c 0E94 0000 		call fat_calc_83_checksum
 2431               	.LVL158:
 2432 0970 D82E      		mov r13,r24
 2433               	.LVL159:
1986:fat.c         ****     {
 2434               		.loc 1 1986 5 is_stmt 1 view .LVU477
 2435               	.LBB63:
1986:fat.c         ****     {
 2436               		.loc 1 1986 9 view .LVU478
1986:fat.c         ****     {
 2437               		.loc 1 1986 9 is_stmt 0 view .LVU479
 2438 0972 FDE0      		ldi r31,lo8(13)
 2439 0974 FF9E      		mul r15,r31
 2440 0976 000D      		add r16,r0
 2441 0978 111D      		adc r17,r1
 2442 097a 1124      		clr __zero_reg__
 2443               	.LVL160:
1986:fat.c         ****     {
 2444               		.loc 1 1986 17 view .LVU480
 2445 097c EF2C      		mov r14,r15
 2446               	.LVL161:
 2447               	.LBB64:
2015:fat.c         **** 
 2448               		.loc 1 2015 26 view .LVU481
 2449 097e CF2C      		mov r12,r15
 2450 0980 6894      		set
 2451 0982 C6F8      		bld r12,6
2018:fat.c         **** 
 2452               		.loc 1 2018 22 view .LVU482
 2453 0984 8FE0      		ldi r24,lo8(15)
 2454 0986 982E      		mov r9,r24
 2455               	.LVL162:
 2456               	.L146:
2018:fat.c         **** 
 2457               		.loc 1 2018 22 view .LVU483
 2458               	.LBE64:
1986:fat.c         ****     {
 2459               		.loc 1 1986 5 view .LVU484
 2460 0988 E110      		cpse r14,__zero_reg__
 2461 098a 00C0      		rjmp .L152
1986:fat.c         ****     {
 2462               		.loc 1 1986 5 view .LVU485
 2463               	.LBE63:
2035:fat.c         **** }
 2464               		.loc 1 2035 12 view .LVU486
 2465 098c 81E0      		ldi r24,lo8(1)
 2466               	.LVL163:
 2467               	.L133:
 2468               	/* epilogue start */
2035:fat.c         **** }
 2469               		.loc 1 2035 12 view .LVU487
 2470               	.LBE61:
 2471               	.LBE60:
2036:fat.c         **** #endif
 2472               		.loc 1 2036 1 view .LVU488
 2473 098e A096      		adiw r28,32
 2474 0990 0FB6      		in __tmp_reg__,__SREG__
 2475 0992 F894      		cli
 2476 0994 DEBF      		out __SP_H__,r29
 2477 0996 0FBE      		out __SREG__,__tmp_reg__
 2478 0998 CDBF      		out __SP_L__,r28
 2479 099a DF91      		pop r29
 2480 099c CF91      		pop r28
 2481 099e 1F91      		pop r17
 2482 09a0 0F91      		pop r16
 2483 09a2 FF90      		pop r15
 2484 09a4 EF90      		pop r14
 2485 09a6 DF90      		pop r13
 2486 09a8 CF90      		pop r12
 2487 09aa BF90      		pop r11
 2488 09ac AF90      		pop r10
 2489 09ae 9F90      		pop r9
 2490 09b0 8F90      		pop r8
 2491 09b2 7F90      		pop r7
 2492 09b4 6F90      		pop r6
 2493 09b6 5F90      		pop r5
 2494 09b8 4F90      		pop r4
 2495 09ba 3F90      		pop r3
 2496 09bc 0895      		ret
 2497               	.LVL164:
 2498               	.L137:
 2499               	.LBB70:
 2500               	.LBB69:
 2501               	.LBB67:
1943:fat.c         **** 
 2502               		.loc 1 1943 9 is_stmt 1 view .LVU489
 2503 09be 86E0      		ldi r24,lo8(6)
 2504 09c0 F801      		movw r30,r16
 2505 09c2 DE01      		movw r26,r28
 2506 09c4 1196      		adiw r26,1
 2507               		0:
 2508 09c6 0190      		ld r0,Z+
 2509 09c8 0D92      		st X+,r0
 2510 09ca 8A95      		dec r24
 2511 09cc 01F4      		brne 0b
1948:fat.c         **** 
 2512               		.loc 1 1948 9 view .LVU490
 2513               	.LVL165:
1950:fat.c         ****         num &= 0x0f;
 2514               		.loc 1 1950 9 view .LVU491
 2515 09ce 8D2D      		mov r24,r13
 2516 09d0 8295      		swap r24
 2517 09d2 8F70      		andi r24,lo8(15)
1950:fat.c         ****         num &= 0x0f;
 2518               		.loc 1 1950 19 is_stmt 0 view .LVU492
 2519 09d4 BFE9      		ldi r27,lo8(-97)
 2520 09d6 BD15      		cp r27,r13
 2521 09d8 00F0      		brlo .L140
 2522 09da 805D      		subi r24,lo8(-(48))
 2523               	.L141:
1950:fat.c         ****         num &= 0x0f;
 2524               		.loc 1 1950 19 view .LVU493
 2525 09dc 8F83      		std Y+7,r24
1951:fat.c         ****         buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
 2526               		.loc 1 1951 9 is_stmt 1 view .LVU494
1951:fat.c         ****         buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
 2527               		.loc 1 1951 13 is_stmt 0 view .LVU495
 2528 09de 8D2D      		mov r24,r13
 2529 09e0 8F70      		andi r24,lo8(15)
 2530               	.LVL166:
1952:fat.c         **** #else
 2531               		.loc 1 1952 9 is_stmt 1 view .LVU496
1952:fat.c         **** #else
 2532               		.loc 1 1952 19 is_stmt 0 view .LVU497
 2533 09e2 8A30      		cpi r24,lo8(10)
 2534 09e4 00F4      		brsh .L142
 2535 09e6 805D      		subi r24,lo8(-(48))
 2536               	.LVL167:
 2537               	.L143:
1952:fat.c         **** #else
 2538               		.loc 1 1952 19 view .LVU498
 2539 09e8 8887      		std Y+8,r24
 2540 09ea 00C0      		rjmp .L138
 2541               	.LVL168:
 2542               	.L140:
1950:fat.c         ****         num &= 0x0f;
 2543               		.loc 1 1950 19 view .LVU499
 2544 09ec 8F59      		subi r24,lo8(-(97))
 2545 09ee 00C0      		rjmp .L141
 2546               	.LVL169:
 2547               	.L142:
1952:fat.c         **** #else
 2548               		.loc 1 1952 19 view .LVU500
 2549 09f0 8F59      		subi r24,lo8(-(97))
 2550               	.LVL170:
1952:fat.c         **** #else
 2551               		.loc 1 1952 19 view .LVU501
 2552 09f2 00C0      		rjmp .L143
 2553               	.LVL171:
 2554               	.L152:
1952:fat.c         **** #else
 2555               		.loc 1 1952 19 view .LVU502
 2556               	.LBE67:
 2557               	.LBB68:
 2558               	.LBB65:
1988:fat.c         ****         
 2559               		.loc 1 1988 9 is_stmt 1 view .LVU503
 2560 09f4 40E2      		ldi r20,lo8(32)
 2561 09f6 50E0      		ldi r21,0
 2562 09f8 6FEF      		ldi r22,lo8(-1)
 2563 09fa 70E0      		ldi r23,0
 2564 09fc CE01      		movw r24,r28
 2565 09fe 0196      		adiw r24,1
 2566 0a00 0E94 0000 		call memset
 2567               	.LVL172:
1991:fat.c         ****         uint8_t i = 1;
 2568               		.loc 1 1991 9 view .LVU504
1992:fat.c         ****         while(i < 0x1f)
 2569               		.loc 1 1992 9 view .LVU505
1993:fat.c         ****         {
 2570               		.loc 1 1993 9 view .LVU506
1993:fat.c         ****         {
 2571               		.loc 1 1993 9 is_stmt 0 view .LVU507
 2572 0a04 0D50      		subi r16,13
 2573 0a06 1109      		sbc r17,__zero_reg__
 2574               	.LVL173:
1992:fat.c         ****         while(i < 0x1f)
 2575               		.loc 1 1992 17 view .LVU508
 2576 0a08 81E0      		ldi r24,lo8(1)
 2577 0a0a 302E      		mov r3,r16
 2578 0a0c 812E      		mov r8,r17
 2579               	.LVL174:
 2580               	.L149:
1995:fat.c         ****             buffer[i++] = 0;
 2581               		.loc 1 1995 13 is_stmt 1 view .LVU509
1995:fat.c         ****             buffer[i++] = 0;
 2582               		.loc 1 1995 21 is_stmt 0 view .LVU510
 2583 0a0e E1E0      		ldi r30,lo8(1)
 2584 0a10 E80F      		add r30,r24
 2585               	.LVL175:
1995:fat.c         ****             buffer[i++] = 0;
 2586               		.loc 1 1995 27 view .LVU511
 2587 0a12 D801      		movw r26,r16
 2588 0a14 9D91      		ld r25,X+
 2589 0a16 8D01      		movw r16,r26
 2590               	.LVL176:
1995:fat.c         ****             buffer[i++] = 0;
 2591               		.loc 1 1995 25 view .LVU512
 2592 0a18 A1E0      		ldi r26,lo8(1)
 2593 0a1a B0E0      		ldi r27,0
 2594 0a1c AC0F      		add r26,r28
 2595 0a1e BD1F      		adc r27,r29
 2596 0a20 A80F      		add r26,r24
 2597 0a22 B11D      		adc r27,__zero_reg__
 2598 0a24 9C93      		st X,r25
1996:fat.c         **** 
 2599               		.loc 1 1996 13 is_stmt 1 view .LVU513
1996:fat.c         **** 
 2600               		.loc 1 1996 21 is_stmt 0 view .LVU514
 2601 0a26 8E5F      		subi r24,lo8(-(2))
 2602               	.LVL177:
1996:fat.c         **** 
 2603               		.loc 1 1996 25 view .LVU515
 2604 0a28 21E0      		ldi r18,lo8(1)
 2605 0a2a 30E0      		ldi r19,0
 2606 0a2c 2C0F      		add r18,r28
 2607 0a2e 3D1F      		adc r19,r29
 2608 0a30 2E0F      		add r18,r30
 2609 0a32 311D      		adc r19,__zero_reg__
 2610 0a34 F901      		movw r30,r18
 2611 0a36 1082      		st Z,__zero_reg__
1998:fat.c         ****             {
 2612               		.loc 1 1998 13 is_stmt 1 view .LVU516
 2613 0a38 8B30      		cpi r24,lo8(11)
 2614 0a3a 01F0      		breq .L155
 2615 0a3c 8A31      		cpi r24,lo8(26)
 2616 0a3e 01F0      		breq .L156
 2617               	.LVL178:
 2618               	.L147:
2008:fat.c         ****                 break;
 2619               		.loc 1 2008 13 view .LVU517
2008:fat.c         ****                 break;
 2620               		.loc 1 2008 17 is_stmt 0 view .LVU518
 2621 0a40 F801      		movw r30,r16
 2622 0a42 3197      		sbiw r30,1
2008:fat.c         ****                 break;
 2623               		.loc 1 2008 15 view .LVU519
 2624 0a44 9081      		ld r25,Z
 2625 0a46 9923      		tst r25
 2626 0a48 01F0      		breq .L148
1993:fat.c         ****         {
 2627               		.loc 1 1993 14 view .LVU520
 2628 0a4a 8F31      		cpi r24,lo8(31)
 2629 0a4c 00F0      		brlo .L149
 2630               	.L148:
2013:fat.c         ****         if(lfn_entry == lfn_entry_count)
 2631               		.loc 1 2013 9 is_stmt 1 view .LVU521
2014:fat.c         ****             buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
 2632               		.loc 1 2014 9 view .LVU522
2014:fat.c         ****             buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
 2633               		.loc 1 2014 11 is_stmt 0 view .LVU523
 2634 0a4e FE14      		cp r15,r14
 2635 0a50 01F0      		breq .L150
2013:fat.c         ****         if(lfn_entry == lfn_entry_count)
 2636               		.loc 1 2013 22 view .LVU524
 2637 0a52 E982      		std Y+1,r14
 2638               	.L151:
2018:fat.c         **** 
 2639               		.loc 1 2018 9 is_stmt 1 view .LVU525
2018:fat.c         **** 
 2640               		.loc 1 2018 22 is_stmt 0 view .LVU526
 2641 0a54 9C86      		std Y+12,r9
2021:fat.c         **** 
 2642               		.loc 1 2021 9 is_stmt 1 view .LVU527
2021:fat.c         **** 
 2643               		.loc 1 2021 22 is_stmt 0 view .LVU528
 2644 0a56 DE86      		std Y+14,r13
2024:fat.c         ****         buffer[0x1a] = 0;
 2645               		.loc 1 2024 9 is_stmt 1 view .LVU529
2024:fat.c         ****         buffer[0x1a] = 0;
 2646               		.loc 1 2024 22 is_stmt 0 view .LVU530
 2647 0a58 1D86      		std Y+13,__zero_reg__
2025:fat.c         ****         buffer[0x1b] = 0;
 2648               		.loc 1 2025 9 is_stmt 1 view .LVU531
2025:fat.c         ****         buffer[0x1b] = 0;
 2649               		.loc 1 2025 22 is_stmt 0 view .LVU532
 2650 0a5a 1B8E      		std Y+27,__zero_reg__
2026:fat.c         **** 
 2651               		.loc 1 2026 9 is_stmt 1 view .LVU533
2026:fat.c         **** 
 2652               		.loc 1 2026 22 is_stmt 0 view .LVU534
 2653 0a5c 1C8E      		std Y+28,__zero_reg__
2029:fat.c         ****     
 2654               		.loc 1 2029 9 is_stmt 1 view .LVU535
 2655 0a5e 20E2      		ldi r18,lo8(32)
 2656 0a60 30E0      		ldi r19,0
 2657 0a62 AE01      		movw r20,r28
 2658 0a64 4F5F      		subi r20,-1
 2659 0a66 5F4F      		sbci r21,-1
 2660 0a68 C301      		movw r24,r6
 2661               	.LVL179:
2029:fat.c         ****     
 2662               		.loc 1 2029 9 is_stmt 0 view .LVU536
 2663 0a6a B201      		movw r22,r4
 2664 0a6c F501      		movw r30,r10
 2665 0a6e 0995      		icall
 2666               	.LVL180:
2031:fat.c         ****     }
 2667               		.loc 1 2031 9 is_stmt 1 view .LVU537
2031:fat.c         ****     }
 2668               		.loc 1 2031 16 is_stmt 0 view .LVU538
 2669 0a70 F0E2      		ldi r31,32
 2670 0a72 4F0E      		add r4,r31
 2671 0a74 511C      		adc r5,__zero_reg__
 2672 0a76 611C      		adc r6,__zero_reg__
 2673 0a78 711C      		adc r7,__zero_reg__
 2674               	.LVL181:
2031:fat.c         ****     }
 2675               		.loc 1 2031 16 view .LVU539
 2676               	.LBE65:
1986:fat.c         ****     {
 2677               		.loc 1 1986 61 view .LVU540
 2678 0a7a EA94      		dec r14
 2679               	.LVL182:
1986:fat.c         ****     {
 2680               		.loc 1 1986 61 view .LVU541
 2681 0a7c 032D      		mov r16,r3
 2682               	.LVL183:
1986:fat.c         ****     {
 2683               		.loc 1 1986 61 view .LVU542
 2684 0a7e 182D      		mov r17,r8
 2685 0a80 00C0      		rjmp .L146
 2686               	.LVL184:
 2687               	.L155:
 2688               	.LBB66:
2001:fat.c         ****                     break;
 2689               		.loc 1 2001 23 view .LVU543
 2690 0a82 8EE0      		ldi r24,lo8(14)
 2691               	.LVL185:
2001:fat.c         ****                     break;
 2692               		.loc 1 2001 23 view .LVU544
 2693 0a84 00C0      		rjmp .L147
 2694               	.LVL186:
 2695               	.L156:
2004:fat.c         ****                     break;
 2696               		.loc 1 2004 23 view .LVU545
 2697 0a86 8CE1      		ldi r24,lo8(28)
 2698               	.LVL187:
2004:fat.c         ****                     break;
 2699               		.loc 1 2004 23 view .LVU546
 2700 0a88 00C0      		rjmp .L147
 2701               	.LVL188:
 2702               	.L150:
2015:fat.c         **** 
 2703               		.loc 1 2015 13 is_stmt 1 view .LVU547
2015:fat.c         **** 
 2704               		.loc 1 2015 26 is_stmt 0 view .LVU548
 2705 0a8a C982      		std Y+1,r12
 2706 0a8c 00C0      		rjmp .L151
 2707               	.LVL189:
 2708               	.L154:
2015:fat.c         **** 
 2709               		.loc 1 2015 26 view .LVU549
 2710               	.LBE66:
 2711               	.LBE68:
 2712               	.LBE69:
 2713               	.LBE70:
1873:fat.c         ****     
 2714               		.loc 1 1873 16 view .LVU550
 2715 0a8e 80E0      		ldi r24,0
 2716               	.LVL190:
1873:fat.c         ****     
 2717               		.loc 1 1873 16 view .LVU551
 2718 0a90 00C0      		rjmp .L133
 2719               		.cfi_endproc
 2720               	.LFE24:
 2722               	.global	fat_open
 2724               	fat_open:
 2725               	.LVL191:
 2726               	.LFB0:
 236:fat.c         ****     if(!partition ||
 2727               		.loc 1 236 1 is_stmt 1 view -0
 2728               		.cfi_startproc
 236:fat.c         ****     if(!partition ||
 2729               		.loc 1 236 1 is_stmt 0 view .LVU553
 2730 0a92 2F92      		push r2
 2731               	.LCFI111:
 2732               		.cfi_def_cfa_offset 3
 2733               		.cfi_offset 2, -2
 2734 0a94 3F92      		push r3
 2735               	.LCFI112:
 2736               		.cfi_def_cfa_offset 4
 2737               		.cfi_offset 3, -3
 2738 0a96 4F92      		push r4
 2739               	.LCFI113:
 2740               		.cfi_def_cfa_offset 5
 2741               		.cfi_offset 4, -4
 2742 0a98 5F92      		push r5
 2743               	.LCFI114:
 2744               		.cfi_def_cfa_offset 6
 2745               		.cfi_offset 5, -5
 2746 0a9a 6F92      		push r6
 2747               	.LCFI115:
 2748               		.cfi_def_cfa_offset 7
 2749               		.cfi_offset 6, -6
 2750 0a9c 7F92      		push r7
 2751               	.LCFI116:
 2752               		.cfi_def_cfa_offset 8
 2753               		.cfi_offset 7, -7
 2754 0a9e 8F92      		push r8
 2755               	.LCFI117:
 2756               		.cfi_def_cfa_offset 9
 2757               		.cfi_offset 8, -8
 2758 0aa0 9F92      		push r9
 2759               	.LCFI118:
 2760               		.cfi_def_cfa_offset 10
 2761               		.cfi_offset 9, -9
 2762 0aa2 AF92      		push r10
 2763               	.LCFI119:
 2764               		.cfi_def_cfa_offset 11
 2765               		.cfi_offset 10, -10
 2766 0aa4 BF92      		push r11
 2767               	.LCFI120:
 2768               		.cfi_def_cfa_offset 12
 2769               		.cfi_offset 11, -11
 2770 0aa6 CF92      		push r12
 2771               	.LCFI121:
 2772               		.cfi_def_cfa_offset 13
 2773               		.cfi_offset 12, -12
 2774 0aa8 DF92      		push r13
 2775               	.LCFI122:
 2776               		.cfi_def_cfa_offset 14
 2777               		.cfi_offset 13, -13
 2778 0aaa EF92      		push r14
 2779               	.LCFI123:
 2780               		.cfi_def_cfa_offset 15
 2781               		.cfi_offset 14, -14
 2782 0aac FF92      		push r15
 2783               	.LCFI124:
 2784               		.cfi_def_cfa_offset 16
 2785               		.cfi_offset 15, -15
 2786 0aae 0F93      		push r16
 2787               	.LCFI125:
 2788               		.cfi_def_cfa_offset 17
 2789               		.cfi_offset 16, -16
 2790 0ab0 1F93      		push r17
 2791               	.LCFI126:
 2792               		.cfi_def_cfa_offset 18
 2793               		.cfi_offset 17, -17
 2794 0ab2 CF93      		push r28
 2795               	.LCFI127:
 2796               		.cfi_def_cfa_offset 19
 2797               		.cfi_offset 28, -18
 2798 0ab4 DF93      		push r29
 2799               	.LCFI128:
 2800               		.cfi_def_cfa_offset 20
 2801               		.cfi_offset 29, -19
 2802 0ab6 CDB7      		in r28,__SP_L__
 2803 0ab8 DEB7      		in r29,__SP_H__
 2804               	.LCFI129:
 2805               		.cfi_def_cfa_register 28
 2806 0aba A697      		sbiw r28,38
 2807               	.LCFI130:
 2808               		.cfi_def_cfa_offset 58
 2809 0abc 0FB6      		in __tmp_reg__,__SREG__
 2810 0abe F894      		cli
 2811 0ac0 DEBF      		out __SP_H__,r29
 2812 0ac2 0FBE      		out __SREG__,__tmp_reg__
 2813 0ac4 CDBF      		out __SP_L__,r28
 2814               	/* prologue: function */
 2815               	/* frame size = 38 */
 2816               	/* stack size = 56 */
 2817               	.L__stack_usage = 56
 2818 0ac6 8C01      		movw r16,r24
 237:fat.c         **** #if FAT_WRITE_SUPPORT
 2819               		.loc 1 237 5 is_stmt 1 view .LVU554
 237:fat.c         **** #if FAT_WRITE_SUPPORT
 2820               		.loc 1 237 7 is_stmt 0 view .LVU555
 2821 0ac8 0097      		sbiw r24,0
 2822 0aca 01F4      		brne .+2
 2823 0acc 00C0      		rjmp .L188
 237:fat.c         **** #if FAT_WRITE_SUPPORT
 2824               		.loc 1 237 19 discriminator 1 view .LVU556
 2825 0ace DC01      		movw r26,r24
 2826 0ad0 1496      		adiw r26,4
 2827 0ad2 8D91      		ld r24,X+
 2828 0ad4 9C91      		ld r25,X
 2829 0ad6 1597      		sbiw r26,4+1
 2830               	.LVL192:
 237:fat.c         **** #if FAT_WRITE_SUPPORT
 2831               		.loc 1 237 19 discriminator 1 view .LVU557
 2832 0ad8 892B      		or r24,r25
 2833 0ada 01F0      		breq .L182
 239:fat.c         ****        !partition->device_write_interval
 2834               		.loc 1 239 33 view .LVU558
 2835 0adc 1696      		adiw r26,6
 2836 0ade 8D91      		ld r24,X+
 2837 0ae0 9C91      		ld r25,X
 2838 0ae2 892B      		or r24,r25
 2839 0ae4 01F0      		breq .L182
 2840               	.LVL193:
 256:fat.c         ****             break;
 2841               		.loc 1 256 9 is_stmt 1 view .LVU559
 256:fat.c         ****             break;
 2842               		.loc 1 256 15 is_stmt 0 view .LVU560
 2843 0ae6 8091 0000 		lds r24,fat_fs_handles
 2844 0aea 9091 0000 		lds r25,fat_fs_handles+1
 256:fat.c         ****             break;
 2845               		.loc 1 256 11 view .LVU561
 2846 0aee 892B      		or r24,r25
 2847 0af0 01F0      		breq .L174
 2848               	.LVL194:
 2849               	.L182:
 245:fat.c         **** 
 2850               		.loc 1 245 16 view .LVU562
 2851 0af2 10E0      		ldi r17,0
 2852 0af4 00E0      		ldi r16,0
 2853               	.LVL195:
 245:fat.c         **** 
 2854               		.loc 1 245 16 view .LVU563
 2855 0af6 00C0      		rjmp .L188
 2856               	.LVL196:
 2857               	.L176:
 273:fat.c         **** #endif
 2858               		.loc 1 273 9 is_stmt 1 view .LVU564
 273:fat.c         **** #endif
 2859               		.loc 1 273 23 is_stmt 0 view .LVU565
 2860 0af8 1092 0000 		sts fat_fs_handles+1,__zero_reg__
 2861 0afc 1092 0000 		sts fat_fs_handles,__zero_reg__
 275:fat.c         ****     }
 2862               		.loc 1 275 9 is_stmt 1 view .LVU566
 2863 0b00 00C0      		rjmp .L182
 2864               	.LVL197:
 2865               	.L177:
 2866               	.LBB73:
 2867               	.LBB74:
 380:fat.c         **** 
 2868               		.loc 1 380 9 view .LVU567
 380:fat.c         **** 
 2869               		.loc 1 380 25 is_stmt 0 view .LVU568
 2870 0b02 8BE0      		ldi r24,lo8(11)
 2871 0b04 F801      		movw r30,r16
 2872 0b06 8087      		std Z+8,r24
 2873 0b08 00C0      		rjmp .L178
 2874               	.LVL198:
 2875               	.L183:
 392:fat.c         **** 
 2876               		.loc 1 392 96 view .LVU569
 2877 0b0a 62E0      		ldi r22,lo8(2)
 2878 0b0c 70E0      		ldi r23,0
 2879 0b0e 80E0      		ldi r24,0
 2880 0b10 90E0      		ldi r25,0
 2881 0b12 00C0      		rjmp .L179
 2882               	.LVL199:
 2883               	.L174:
 392:fat.c         **** 
 2884               		.loc 1 392 96 view .LVU570
 2885               	.LBE74:
 2886               	.LBE73:
 261:fat.c         ****         return 0;
 2887               		.loc 1 261 5 is_stmt 1 view .LVU571
 265:fat.c         **** 
 2888               		.loc 1 265 5 view .LVU572
 2889 0b14 E0E0      		ldi r30,lo8(fat_fs_handles+2)
 2890 0b16 F0E0      		ldi r31,hi8(fat_fs_handles+2)
 2891 0b18 8AE1      		ldi r24,lo8(26)
 2892 0b1a DF01      		movw r26,r30
 2893               		0:
 2894 0b1c 1D92      		st X+,__zero_reg__
 2895 0b1e 8A95      		dec r24
 2896 0b20 01F4      		brne 0b
 267:fat.c         ****     if(!fat_read_header(fs))
 2897               		.loc 1 267 5 view .LVU573
 267:fat.c         ****     if(!fat_read_header(fs))
 2898               		.loc 1 267 19 is_stmt 0 view .LVU574
 2899 0b22 1093 0000 		sts fat_fs_handles+1,r17
 2900 0b26 0093 0000 		sts fat_fs_handles,r16
 268:fat.c         ****     {
 2901               		.loc 1 268 5 is_stmt 1 view .LVU575
 2902               	.LVL200:
 2903               	.LBB76:
 2904               	.LBI73:
 310:fat.c         **** {
 2905               		.loc 1 310 9 view .LVU576
 2906               	.LBB75:
 312:fat.c         ****         return 0;
 2907               		.loc 1 312 5 view .LVU577
 315:fat.c         ****     if(!partition)
 2908               		.loc 1 315 5 view .LVU578
 316:fat.c         ****         return 0;
 2909               		.loc 1 316 5 view .LVU579
 323:fat.c         **** #endif
 2910               		.loc 1 323 5 view .LVU580
 325:fat.c         ****     if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
 2911               		.loc 1 325 5 view .LVU581
 325:fat.c         ****     if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
 2912               		.loc 1 325 14 is_stmt 0 view .LVU582
 2913 0b2a F801      		movw r30,r16
 2914 0b2c 8184      		ldd r8,Z+9
 2915 0b2e 9284      		ldd r9,Z+10
 2916 0b30 A384      		ldd r10,Z+11
 2917 0b32 B484      		ldd r11,Z+12
 2918 0b34 A501      		movw r20,r10
 2919 0b36 9401      		movw r18,r8
 2920 0b38 89E0      		ldi r24,9
 2921               		1:
 2922 0b3a 220F      		lsl r18
 2923 0b3c 331F      		rol r19
 2924 0b3e 441F      		rol r20
 2925 0b40 551F      		rol r21
 2926 0b42 8A95      		dec r24
 2927 0b44 01F4      		brne 1b
 2928 0b46 2A8F      		std Y+26,r18
 2929 0b48 3B8F      		std Y+27,r19
 2930 0b4a 4C8F      		std Y+28,r20
 2931 0b4c 5D8F      		std Y+29,r21
 2932               	.LVL201:
 326:fat.c         ****         return 0;
 2933               		.loc 1 326 5 is_stmt 1 view .LVU583
 326:fat.c         ****         return 0;
 2934               		.loc 1 326 9 is_stmt 0 view .LVU584
 2935 0b4e CA01      		movw r24,r20
 2936 0b50 B901      		movw r22,r18
 2937 0b52 655F      		subi r22,-11
 2938 0b54 7F4F      		sbci r23,-1
 2939 0b56 8F4F      		sbci r24,-1
 2940 0b58 9F4F      		sbci r25,-1
 2941 0b5a 0190      		ld __tmp_reg__,Z+
 2942 0b5c F081      		ld r31,Z
 2943 0b5e E02D      		mov r30,__tmp_reg__
 2944 0b60 29E1      		ldi r18,lo8(25)
 2945 0b62 30E0      		ldi r19,0
 2946               	.LVL202:
 326:fat.c         ****         return 0;
 2947               		.loc 1 326 9 view .LVU585
 2948 0b64 AE01      		movw r20,r28
 2949 0b66 4F5F      		subi r20,-1
 2950 0b68 5F4F      		sbci r21,-1
 2951 0b6a 0995      		icall
 2952               	.LVL203:
 326:fat.c         ****         return 0;
 2953               		.loc 1 326 7 view .LVU586
 2954 0b6c 8823      		tst r24
 2955 0b6e 01F0      		breq .L176
 329:fat.c         ****     uint16_t reserved_sectors = read16(&buffer[0x03]);
 2956               		.loc 1 329 5 is_stmt 1 view .LVU587
 329:fat.c         ****     uint16_t reserved_sectors = read16(&buffer[0x03]);
 2957               		.loc 1 329 33 is_stmt 0 view .LVU588
 2958 0b70 CE01      		movw r24,r28
 2959 0b72 0196      		adiw r24,1
 2960 0b74 0E94 0000 		call read16
 2961               	.LVL204:
 2962 0b78 1C01      		movw r2,r24
 2963               	.LVL205:
 330:fat.c         ****     uint8_t sectors_per_cluster = buffer[0x02];
 2964               		.loc 1 330 5 is_stmt 1 view .LVU589
 330:fat.c         ****     uint8_t sectors_per_cluster = buffer[0x02];
 2965               		.loc 1 330 33 is_stmt 0 view .LVU590
 2966 0b7a CE01      		movw r24,r28
 2967 0b7c 0496      		adiw r24,4
 2968 0b7e 0E94 0000 		call read16
 2969               	.LVL206:
 2970 0b82 9F8F      		std Y+31,r25
 2971 0b84 8E8F      		std Y+30,r24
 2972               	.LVL207:
 331:fat.c         ****     uint8_t fat_copies = buffer[0x05];
 2973               		.loc 1 331 5 is_stmt 1 view .LVU591
 331:fat.c         ****     uint8_t fat_copies = buffer[0x05];
 2974               		.loc 1 331 13 is_stmt 0 view .LVU592
 2975 0b86 BB81      		ldd r27,Y+3
 2976 0b88 B8A3      		std Y+32,r27
 2977               	.LVL208:
 332:fat.c         ****     uint16_t max_root_entries = read16(&buffer[0x06]);
 2978               		.loc 1 332 5 is_stmt 1 view .LVU593
 332:fat.c         ****     uint16_t max_root_entries = read16(&buffer[0x06]);
 2979               		.loc 1 332 13 is_stmt 0 view .LVU594
 2980 0b8a 7E80      		ldd r7,Y+6
 2981               	.LVL209:
 333:fat.c         ****     uint16_t sector_count_16 = read16(&buffer[0x08]);
 2982               		.loc 1 333 5 is_stmt 1 view .LVU595
 333:fat.c         ****     uint16_t sector_count_16 = read16(&buffer[0x08]);
 2983               		.loc 1 333 33 is_stmt 0 view .LVU596
 2984 0b8c CE01      		movw r24,r28
 2985               	.LVL210:
 333:fat.c         ****     uint16_t sector_count_16 = read16(&buffer[0x08]);
 2986               		.loc 1 333 33 view .LVU597
 2987 0b8e 0796      		adiw r24,7
 2988 0b90 0E94 0000 		call read16
 2989               	.LVL211:
 333:fat.c         ****     uint16_t sector_count_16 = read16(&buffer[0x08]);
 2990               		.loc 1 333 33 view .LVU598
 2991 0b94 9AA3      		std Y+34,r25
 2992 0b96 89A3      		std Y+33,r24
 2993               	.LVL212:
 334:fat.c         ****     uint16_t sectors_per_fat = read16(&buffer[0x0b]);
 2994               		.loc 1 334 5 is_stmt 1 view .LVU599
 334:fat.c         ****     uint16_t sectors_per_fat = read16(&buffer[0x0b]);
 2995               		.loc 1 334 32 is_stmt 0 view .LVU600
 2996 0b98 CE01      		movw r24,r28
 2997               	.LVL213:
 334:fat.c         ****     uint16_t sectors_per_fat = read16(&buffer[0x0b]);
 2998               		.loc 1 334 32 view .LVU601
 2999 0b9a 0996      		adiw r24,9
 3000 0b9c 0E94 0000 		call read16
 3001               	.LVL214:
 3002 0ba0 6C01      		movw r12,r24
 3003               	.LVL215:
 335:fat.c         ****     uint32_t sector_count = read32(&buffer[0x15]);
 3004               		.loc 1 335 5 is_stmt 1 view .LVU602
 335:fat.c         ****     uint32_t sector_count = read32(&buffer[0x15]);
 3005               		.loc 1 335 32 is_stmt 0 view .LVU603
 3006 0ba2 CE01      		movw r24,r28
 3007 0ba4 0C96      		adiw r24,12
 3008 0ba6 0E94 0000 		call read16
 3009               	.LVL216:
 3010 0baa 7C01      		movw r14,r24
 3011               	.LVL217:
 336:fat.c         **** #if FAT_FAT32_SUPPORT
 3012               		.loc 1 336 5 is_stmt 1 view .LVU604
 336:fat.c         **** #if FAT_FAT32_SUPPORT
 3013               		.loc 1 336 29 is_stmt 0 view .LVU605
 3014 0bac CE01      		movw r24,r28
 3015 0bae 4696      		adiw r24,22
 3016 0bb0 0E94 0000 		call read32
 3017               	.LVL218:
 3018 0bb4 4B01      		movw r8,r22
 3019 0bb6 5C01      		movw r10,r24
 3020               	.LVL219:
 342:fat.c         ****     {
 3021               		.loc 1 342 5 is_stmt 1 view .LVU606
 342:fat.c         ****     {
 3022               		.loc 1 342 7 is_stmt 0 view .LVU607
 3023 0bb8 8114      		cp r8,__zero_reg__
 3024 0bba 9104      		cpc r9,__zero_reg__
 3025 0bbc A104      		cpc r10,__zero_reg__
 3026 0bbe B104      		cpc r11,__zero_reg__
 3027 0bc0 01F4      		brne .L175
 344:fat.c         ****             /* illegal volume size */
 3028               		.loc 1 344 9 is_stmt 1 view .LVU608
 344:fat.c         ****             /* illegal volume size */
 3029               		.loc 1 344 11 is_stmt 0 view .LVU609
 3030 0bc2 C114      		cp r12,__zero_reg__
 3031 0bc4 D104      		cpc r13,__zero_reg__
 3032 0bc6 01F4      		brne .+2
 3033 0bc8 00C0      		rjmp .L176
 348:fat.c         ****     }
 3034               		.loc 1 348 13 is_stmt 1 view .LVU610
 348:fat.c         ****     }
 3035               		.loc 1 348 26 is_stmt 0 view .LVU611
 3036 0bca 4601      		movw r8,r12
 3037               	.LVL220:
 348:fat.c         ****     }
 3038               		.loc 1 348 26 view .LVU612
 3039 0bcc B12C      		mov r11,__zero_reg__
 3040 0bce A12C      		mov r10,__zero_reg__
 3041               	.LVL221:
 3042               	.L175:
 357:fat.c         ****         /* this is not a FAT16 */
 3043               		.loc 1 357 5 is_stmt 1 view .LVU613
 357:fat.c         ****         /* this is not a FAT16 */
 3044               		.loc 1 357 7 is_stmt 0 view .LVU614
 3045 0bd0 E114      		cp r14,__zero_reg__
 3046 0bd2 F104      		cpc r15,__zero_reg__
 3047 0bd4 01F4      		brne .+2
 3048 0bd6 00C0      		rjmp .L176
 363:fat.c         ****                                  - reserved_sectors
 3049               		.loc 1 363 5 is_stmt 1 view .LVU615
 368:fat.c         **** #endif
 3050               		.loc 1 368 63 is_stmt 0 view .LVU616
 3051 0bd8 272D      		mov r18,r7
 3052 0bda 30E0      		ldi r19,0
 3053 0bdc D701      		movw r26,r14
 3054 0bde 0E94 0000 		call __umulhisi3
 3055 0be2 6BA3      		std Y+35,r22
 3056 0be4 7CA3      		std Y+36,r23
 3057 0be6 8DA3      		std Y+37,r24
 3058 0be8 9EA3      		std Y+38,r25
 3059               	.LVL222:
 371:fat.c         ****     if(data_cluster_count < 4085)
 3060               		.loc 1 371 5 is_stmt 1 view .LVU617
 370:fat.c         ****     uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
 3061               		.loc 1 370 79 is_stmt 0 view .LVU618
 3062 0bea 9101      		movw r18,r2
 3063 0bec 2150      		subi r18,1
 3064 0bee 3109      		sbc r19,__zero_reg__
 3065 0bf0 89A1      		ldd r24,Y+33
 3066 0bf2 9AA1      		ldd r25,Y+34
 3067 0bf4 45E0      		ldi r20,5
 3068               		1:
 3069 0bf6 880F      		lsl r24
 3070 0bf8 991F      		rol r25
 3071 0bfa 4A95      		dec r20
 3072 0bfc 01F4      		brne 1b
 3073 0bfe 820F      		add r24,r18
 3074 0c00 931F      		adc r25,r19
 370:fat.c         ****     uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
 3075               		.loc 1 370 84 view .LVU619
 3076 0c02 B101      		movw r22,r2
 3077               	.LVL223:
 370:fat.c         ****     uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
 3078               		.loc 1 370 84 view .LVU620
 3079 0c04 0E94 0000 		call __udivmodhi4
 363:fat.c         ****                                  - reserved_sectors
 3080               		.loc 1 363 14 view .LVU621
 3081 0c08 8BA1      		ldd r24,Y+35
 3082 0c0a 9CA1      		ldd r25,Y+36
 3083 0c0c ADA1      		ldd r26,Y+37
 3084 0c0e BEA1      		ldd r27,Y+38
 3085 0c10 EE8D      		ldd r30,Y+30
 3086 0c12 FF8D      		ldd r31,Y+31
 3087 0c14 8E0F      		add r24,r30
 3088 0c16 9F1F      		adc r25,r31
 3089 0c18 A11D      		adc r26,__zero_reg__
 3090 0c1a B11D      		adc r27,__zero_reg__
 3091 0c1c 860F      		add r24,r22
 3092 0c1e 971F      		adc r25,r23
 3093 0c20 A11D      		adc r26,__zero_reg__
 3094 0c22 B11D      		adc r27,__zero_reg__
 3095 0c24 A501      		movw r20,r10
 3096 0c26 9401      		movw r18,r8
 3097 0c28 281B      		sub r18,r24
 3098 0c2a 390B      		sbc r19,r25
 3099 0c2c 4A0B      		sbc r20,r26
 3100 0c2e 5B0B      		sbc r21,r27
 3101 0c30 CA01      		movw r24,r20
 3102 0c32 B901      		movw r22,r18
 371:fat.c         ****     if(data_cluster_count < 4085)
 3103               		.loc 1 371 53 view .LVU622
 3104 0c34 A8A1      		ldd r26,Y+32
 3105 0c36 2A2F      		mov r18,r26
 3106 0c38 30E0      		ldi r19,0
 3107 0c3a 50E0      		ldi r21,0
 3108 0c3c 40E0      		ldi r20,0
 371:fat.c         ****     if(data_cluster_count < 4085)
 3109               		.loc 1 371 14 view .LVU623
 3110 0c3e 0E94 0000 		call __udivmodsi4
 3111 0c42 6901      		movw r12,r18
 3112               	.LVL224:
 371:fat.c         ****     if(data_cluster_count < 4085)
 3113               		.loc 1 371 14 view .LVU624
 3114 0c44 7A01      		movw r14,r20
 3115               	.LVL225:
 372:fat.c         ****         /* this is a FAT12, not supported */
 3116               		.loc 1 372 5 is_stmt 1 view .LVU625
 372:fat.c         ****         /* this is a FAT12, not supported */
 3117               		.loc 1 372 7 is_stmt 0 view .LVU626
 3118 0c46 B5EF      		ldi r27,-11
 3119 0c48 CB16      		cp r12,r27
 3120 0c4a BFE0      		ldi r27,15
 3121 0c4c DB06      		cpc r13,r27
 3122 0c4e E104      		cpc r14,__zero_reg__
 3123 0c50 F104      		cpc r15,__zero_reg__
 3124 0c52 00F4      		brsh .+2
 3125 0c54 00C0      		rjmp .L176
 375:fat.c         ****         /* this is a FAT16 */
 3126               		.loc 1 375 10 is_stmt 1 view .LVU627
 375:fat.c         ****         /* this is a FAT16 */
 3127               		.loc 1 375 12 is_stmt 0 view .LVU628
 3128 0c56 E5EF      		ldi r30,-11
 3129 0c58 CE16      		cp r12,r30
 3130 0c5a EFEF      		ldi r30,-1
 3131 0c5c DE06      		cpc r13,r30
 3132 0c5e E104      		cpc r14,__zero_reg__
 3133 0c60 F104      		cpc r15,__zero_reg__
 3134 0c62 00F0      		brlo .+2
 3135 0c64 00C0      		rjmp .L177
 377:fat.c         ****     else
 3136               		.loc 1 377 9 is_stmt 1 view .LVU629
 377:fat.c         ****     else
 3137               		.loc 1 377 25 is_stmt 0 view .LVU630
 3138 0c66 86E0      		ldi r24,lo8(6)
 3139 0c68 D801      		movw r26,r16
 3140 0c6a 1896      		adiw r26,8
 3141 0c6c 8C93      		st X,r24
 3142               	.L178:
 383:fat.c         ****     memset(header, 0, sizeof(*header));
 3143               		.loc 1 383 5 is_stmt 1 view .LVU631
 3144               	.LVL226:
 384:fat.c         ****     
 3145               		.loc 1 384 5 view .LVU632
 3146 0c6e E0E0      		ldi r30,lo8(fat_fs_handles+10)
 3147 0c70 F0E0      		ldi r31,hi8(fat_fs_handles+10)
 3148 0c72 80E1      		ldi r24,lo8(16)
 3149 0c74 DF01      		movw r26,r30
 3150               		0:
 3151 0c76 1D92      		st X+,__zero_reg__
 3152 0c78 8A95      		dec r24
 3153 0c7a 01F4      		brne 0b
 386:fat.c         **** 
 3154               		.loc 1 386 5 view .LVU633
 386:fat.c         **** 
 3155               		.loc 1 386 44 is_stmt 0 view .LVU634
 3156 0c7c 2101      		movw r4,r2
 3157 0c7e 712C      		mov r7,__zero_reg__
 3158               	.LVL227:
 386:fat.c         **** 
 3159               		.loc 1 386 44 view .LVU635
 3160 0c80 612C      		mov r6,__zero_reg__
 3161 0c82 A501      		movw r20,r10
 3162 0c84 9401      		movw r18,r8
 3163 0c86 C301      		movw r24,r6
 3164 0c88 B101      		movw r22,r2
 3165 0c8a 0E94 0000 		call __mulsi3
 386:fat.c         **** 
 3166               		.loc 1 386 18 view .LVU636
 3167 0c8e 6093 0000 		sts fat_fs_handles+2,r22
 3168 0c92 7093 0000 		sts fat_fs_handles+2+1,r23
 3169 0c96 8093 0000 		sts fat_fs_handles+2+2,r24
 3170 0c9a 9093 0000 		sts fat_fs_handles+2+3,r25
 388:fat.c         ****                          partition_offset +
 3171               		.loc 1 388 5 is_stmt 1 view .LVU637
 391:fat.c         ****     header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4)
 3172               		.loc 1 391 54 is_stmt 0 view .LVU638
 3173 0c9e 2E8D      		ldd r18,Y+30
 3174 0ca0 3F8D      		ldd r19,Y+31
 3175 0ca2 D101      		movw r26,r2
 3176 0ca4 0E94 0000 		call __umulhisi3
 389:fat.c         ****                          /* jump to fat */
 3177               		.loc 1 389 43 view .LVU639
 3178 0ca8 8A8C      		ldd r8,Y+26
 3179 0caa 9B8C      		ldd r9,Y+27
 3180 0cac AC8C      		ldd r10,Y+28
 3181 0cae BD8C      		ldd r11,Y+29
 3182               	.LVL228:
 389:fat.c         ****                          /* jump to fat */
 3183               		.loc 1 389 43 view .LVU640
 3184 0cb0 860E      		add r8,r22
 3185 0cb2 971E      		adc r9,r23
 3186 0cb4 A81E      		adc r10,r24
 3187 0cb6 B91E      		adc r11,r25
 388:fat.c         ****                          partition_offset +
 3188               		.loc 1 388 24 view .LVU641
 3189 0cb8 8092 0000 		sts fat_fs_handles+6,r8
 3190 0cbc 9092 0000 		sts fat_fs_handles+6+1,r9
 3191 0cc0 A092 0000 		sts fat_fs_handles+6+2,r10
 3192 0cc4 B092 0000 		sts fat_fs_handles+6+3,r11
 392:fat.c         **** 
 3193               		.loc 1 392 5 is_stmt 1 view .LVU642
 392:fat.c         **** 
 3194               		.loc 1 392 44 is_stmt 0 view .LVU643
 3195 0cc8 A701      		movw r20,r14
 3196 0cca 9601      		movw r18,r12
 3197 0ccc 2E5F      		subi r18,-2
 3198 0cce 3F4F      		sbci r19,-1
 3199 0cd0 4F4F      		sbci r20,-1
 3200 0cd2 5F4F      		sbci r21,-1
 392:fat.c         **** 
 3201               		.loc 1 392 96 view .LVU644
 3202 0cd4 F801      		movw r30,r16
 3203 0cd6 8085      		ldd r24,Z+8
 3204 0cd8 8630      		cpi r24,lo8(6)
 3205 0cda 01F4      		brne .+2
 3206 0cdc 00C0      		rjmp .L183
 392:fat.c         **** 
 3207               		.loc 1 392 96 view .LVU645
 3208 0cde 64E0      		ldi r22,lo8(4)
 3209 0ce0 70E0      		ldi r23,0
 3210 0ce2 80E0      		ldi r24,0
 3211 0ce4 90E0      		ldi r25,0
 3212               	.L179:
 392:fat.c         **** 
 3213               		.loc 1 392 49 view .LVU646
 3214 0ce6 0E94 0000 		call __mulsi3
 392:fat.c         **** 
 3215               		.loc 1 392 22 view .LVU647
 3216 0cea 6093 0000 		sts fat_fs_handles+10,r22
 3217 0cee 7093 0000 		sts fat_fs_handles+10+1,r23
 3218 0cf2 8093 0000 		sts fat_fs_handles+10+2,r24
 3219 0cf6 9093 0000 		sts fat_fs_handles+10+3,r25
 394:fat.c         ****     header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
 3220               		.loc 1 394 5 is_stmt 1 view .LVU648
 394:fat.c         ****     header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
 3221               		.loc 1 394 25 is_stmt 0 view .LVU649
 3222 0cfa 3092 0000 		sts fat_fs_handles+14+1,r3
 3223 0cfe 2092 0000 		sts fat_fs_handles+14,r2
 395:fat.c         **** 
 3224               		.loc 1 395 5 is_stmt 1 view .LVU650
 395:fat.c         **** 
 3225               		.loc 1 395 56 is_stmt 0 view .LVU651
 3226 0d02 F8A1      		ldd r31,Y+32
 3227 0d04 F29D      		mul r31,r2
 3228 0d06 C001      		movw r24,r0
 3229 0d08 F39D      		mul r31,r3
 3230 0d0a 900D      		add r25,r0
 3231 0d0c 1124      		clr __zero_reg__
 395:fat.c         **** 
 3232               		.loc 1 395 26 view .LVU652
 3233 0d0e 9093 0000 		sts fat_fs_handles+16+1,r25
 3234 0d12 8093 0000 		sts fat_fs_handles+16,r24
 401:fat.c         ****                                   header->fat_offset +
 3235               		.loc 1 401 9 is_stmt 1 view .LVU653
 404:fat.c         **** 
 3236               		.loc 1 404 75 is_stmt 0 view .LVU654
 3237 0d16 2BA1      		ldd r18,Y+35
 3238 0d18 3CA1      		ldd r19,Y+36
 3239 0d1a 4DA1      		ldd r20,Y+37
 3240 0d1c 5EA1      		ldd r21,Y+38
 3241 0d1e C301      		movw r24,r6
 3242 0d20 B201      		movw r22,r4
 3243 0d22 0E94 0000 		call __mulsi3
 402:fat.c         ****                                   /* jump to root directory entries */
 3244               		.loc 1 402 54 view .LVU655
 3245 0d26 DC01      		movw r26,r24
 3246 0d28 CB01      		movw r24,r22
 3247 0d2a 880D      		add r24,r8
 3248 0d2c 991D      		adc r25,r9
 3249 0d2e AA1D      		adc r26,r10
 3250 0d30 BB1D      		adc r27,r11
 401:fat.c         ****                                   header->fat_offset +
 3251               		.loc 1 401 33 view .LVU656
 3252 0d32 8093 0000 		sts fat_fs_handles+22,r24
 3253 0d36 9093 0000 		sts fat_fs_handles+22+1,r25
 3254 0d3a A093 0000 		sts fat_fs_handles+22+2,r26
 3255 0d3e B093 0000 		sts fat_fs_handles+22+3,r27
 406:fat.c         ****                                       header->root_dir_offset +
 3256               		.loc 1 406 9 is_stmt 1 view .LVU657
 409:fat.c         ****     }
 3257               		.loc 1 409 67 is_stmt 0 view .LVU658
 3258 0d42 29A1      		ldd r18,Y+33
 3259 0d44 3AA1      		ldd r19,Y+34
 3260 0d46 4901      		movw r8,r18
 3261 0d48 B12C      		mov r11,__zero_reg__
 3262 0d4a A12C      		mov r10,__zero_reg__
 3263 0d4c 25E0      		ldi r18,5
 3264               		1:
 3265 0d4e 880C      		lsl r8
 3266 0d50 991C      		rol r9
 3267 0d52 AA1C      		rol r10
 3268 0d54 BB1C      		rol r11
 3269 0d56 2A95      		dec r18
 3270 0d58 01F4      		brne 1b
 407:fat.c         ****                                       /* skip root directory entries */
 3271               		.loc 1 407 63 view .LVU659
 3272 0d5a 880E      		add r8,r24
 3273 0d5c 991E      		adc r9,r25
 3274 0d5e AA1E      		adc r10,r26
 3275 0d60 BB1E      		adc r11,r27
 406:fat.c         ****                                       header->root_dir_offset +
 3276               		.loc 1 406 37 view .LVU660
 3277 0d62 8092 0000 		sts fat_fs_handles+18,r8
 3278 0d66 9092 0000 		sts fat_fs_handles+18+1,r9
 3279 0d6a A092 0000 		sts fat_fs_handles+18+2,r10
 3280 0d6e B092 0000 		sts fat_fs_handles+18+3,r11
 423:fat.c         **** }
 3281               		.loc 1 423 5 is_stmt 1 view .LVU661
 3282               	.LVL229:
 423:fat.c         **** }
 3283               		.loc 1 423 5 is_stmt 0 view .LVU662
 3284               	.LBE75:
 3285               	.LBE76:
 252:fat.c         ****     uint8_t i;
 3286               		.loc 1 252 27 view .LVU663
 3287 0d72 00E0      		ldi r16,lo8(fat_fs_handles)
 3288 0d74 10E0      		ldi r17,hi8(fat_fs_handles)
 3289               	.LVL230:
 3290               	.L188:
 279:fat.c         **** 
 3291               		.loc 1 279 1 view .LVU664
 3292 0d76 C801      		movw r24,r16
 3293               	/* epilogue start */
 3294 0d78 A696      		adiw r28,38
 3295 0d7a 0FB6      		in __tmp_reg__,__SREG__
 3296 0d7c F894      		cli
 3297 0d7e DEBF      		out __SP_H__,r29
 3298 0d80 0FBE      		out __SREG__,__tmp_reg__
 3299 0d82 CDBF      		out __SP_L__,r28
 3300 0d84 DF91      		pop r29
 3301 0d86 CF91      		pop r28
 3302 0d88 1F91      		pop r17
 3303 0d8a 0F91      		pop r16
 3304 0d8c FF90      		pop r15
 3305 0d8e EF90      		pop r14
 3306 0d90 DF90      		pop r13
 3307 0d92 CF90      		pop r12
 3308 0d94 BF90      		pop r11
 3309 0d96 AF90      		pop r10
 3310 0d98 9F90      		pop r9
 3311 0d9a 8F90      		pop r8
 3312 0d9c 7F90      		pop r7
 3313 0d9e 6F90      		pop r6
 3314 0da0 5F90      		pop r5
 3315 0da2 4F90      		pop r4
 3316 0da4 3F90      		pop r3
 3317 0da6 2F90      		pop r2
 3318 0da8 0895      		ret
 3319               		.cfi_endproc
 3320               	.LFE0:
 3322               	.global	fat_close
 3324               	fat_close:
 3325               	.LVL231:
 3326               	.LFB1:
 292:fat.c         ****     if(!fs)
 3327               		.loc 1 292 1 is_stmt 1 view -0
 3328               		.cfi_startproc
 3329               	/* prologue: function */
 3330               	/* frame size = 0 */
 3331               	/* stack size = 0 */
 3332               	.L__stack_usage = 0
 293:fat.c         ****         return;
 3333               		.loc 1 293 5 view .LVU666
 293:fat.c         ****         return;
 3334               		.loc 1 293 7 is_stmt 0 view .LVU667
 3335 0daa 0097      		sbiw r24,0
 3336 0dac 01F0      		breq .L198
 299:fat.c         **** #endif
 3337               		.loc 1 299 5 is_stmt 1 view .LVU668
 299:fat.c         **** #endif
 3338               		.loc 1 299 19 is_stmt 0 view .LVU669
 3339 0dae FC01      		movw r30,r24
 3340 0db0 1182      		std Z+1,__zero_reg__
 3341 0db2 1082      		st Z,__zero_reg__
 3342               	.L198:
 3343               	/* epilogue start */
 301:fat.c         **** 
 3344               		.loc 1 301 1 view .LVU670
 3345 0db4 0895      		ret
 3346               		.cfi_endproc
 3347               	.LFE1:
 3349               	.global	fat_open_file
 3351               	fat_open_file:
 3352               	.LVL232:
 3353               	.LFB11:
 926:fat.c         ****     if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
 3354               		.loc 1 926 1 is_stmt 1 view -0
 3355               		.cfi_startproc
 3356               	/* prologue: function */
 3357               	/* frame size = 0 */
 3358               	/* stack size = 0 */
 3359               	.L__stack_usage = 0
 927:fat.c         ****         return 0;
 3360               		.loc 1 927 5 view .LVU672
 927:fat.c         ****         return 0;
 3361               		.loc 1 927 7 is_stmt 0 view .LVU673
 3362 0db6 0097      		sbiw r24,0
 3363 0db8 01F0      		breq .L209
 927:fat.c         ****         return 0;
 3364               		.loc 1 927 12 discriminator 1 view .LVU674
 3365 0dba 6115      		cp r22,__zero_reg__
 3366 0dbc 7105      		cpc r23,__zero_reg__
 3367 0dbe 01F0      		breq .L207
 927:fat.c         ****         return 0;
 3368               		.loc 1 927 26 discriminator 2 view .LVU675
 3369 0dc0 FB01      		movw r30,r22
 3370 0dc2 20A1      		ldd r18,Z+32
 3371 0dc4 24FD      		sbrc r18,4
 3372 0dc6 00C0      		rjmp .L207
 3373               	.LVL233:
 939:fat.c         ****             break;
 3374               		.loc 1 939 9 is_stmt 1 view .LVU676
 939:fat.c         ****             break;
 3375               		.loc 1 939 11 is_stmt 0 view .LVU677
 3376 0dc8 2091 0000 		lds r18,fat_file_handles
 3377 0dcc 3091 0000 		lds r19,fat_file_handles+1
 3378 0dd0 232B      		or r18,r19
 3379 0dd2 01F0      		breq .L205
 3380               	.LVL234:
 3381               	.L207:
 928:fat.c         **** 
 3382               		.loc 1 928 16 view .LVU678
 3383 0dd4 90E0      		ldi r25,0
 3384 0dd6 80E0      		ldi r24,0
 3385               	.LVL235:
 928:fat.c         **** 
 3386               		.loc 1 928 16 view .LVU679
 3387 0dd8 0895      		ret
 3388               	.LVL236:
 3389               	.L205:
 944:fat.c         ****         return 0;
 3390               		.loc 1 944 5 is_stmt 1 view .LVU680
 948:fat.c         ****     fd->fs = fs;
 3391               		.loc 1 948 5 view .LVU681
 3392 0dda 2BE2      		ldi r18,lo8(43)
 3393 0ddc A0E0      		ldi r26,lo8(fat_file_handles+2)
 3394 0dde B0E0      		ldi r27,hi8(fat_file_handles+2)
 3395               		0:
 3396 0de0 0190      		ld r0,Z+
 3397 0de2 0D92      		st X+,r0
 3398 0de4 2A95      		dec r18
 3399 0de6 01F4      		brne 0b
 949:fat.c         ****     fd->pos = 0;
 3400               		.loc 1 949 5 view .LVU682
 949:fat.c         ****     fd->pos = 0;
 3401               		.loc 1 949 12 is_stmt 0 view .LVU683
 3402 0de8 9093 0000 		sts fat_file_handles+1,r25
 3403 0dec 8093 0000 		sts fat_file_handles,r24
 950:fat.c         ****     fd->pos_cluster = dir_entry->cluster;
 3404               		.loc 1 950 5 is_stmt 1 view .LVU684
 950:fat.c         ****     fd->pos_cluster = dir_entry->cluster;
 3405               		.loc 1 950 13 is_stmt 0 view .LVU685
 3406 0df0 1092 0000 		sts fat_file_handles+45,__zero_reg__
 3407 0df4 1092 0000 		sts fat_file_handles+45+1,__zero_reg__
 3408 0df8 1092 0000 		sts fat_file_handles+45+2,__zero_reg__
 3409 0dfc 1092 0000 		sts fat_file_handles+45+3,__zero_reg__
 951:fat.c         **** 
 3410               		.loc 1 951 5 is_stmt 1 view .LVU686
 951:fat.c         **** 
 3411               		.loc 1 951 32 is_stmt 0 view .LVU687
 3412 0e00 FB01      		movw r30,r22
 3413 0e02 81A1      		ldd r24,Z+33
 3414 0e04 92A1      		ldd r25,Z+34
 3415               	.LVL237:
 951:fat.c         **** 
 3416               		.loc 1 951 21 view .LVU688
 3417 0e06 9093 0000 		sts fat_file_handles+49+1,r25
 3418 0e0a 8093 0000 		sts fat_file_handles+49,r24
 953:fat.c         **** }
 3419               		.loc 1 953 5 is_stmt 1 view .LVU689
 935:fat.c         ****     uint8_t i;
 3420               		.loc 1 935 29 is_stmt 0 view .LVU690
 3421 0e0e 80E0      		ldi r24,lo8(fat_file_handles)
 3422 0e10 90E0      		ldi r25,hi8(fat_file_handles)
 3423               	.LVL238:
 3424               	.L209:
 3425               	/* epilogue start */
 954:fat.c         **** 
 3426               		.loc 1 954 1 view .LVU691
 3427 0e12 0895      		ret
 3428               		.cfi_endproc
 3429               	.LFE11:
 3431               	.global	fat_close_file
 3433               	fat_close_file:
 3434               	.LVL239:
 3435               	.LFB12:
 964:fat.c         ****     if(fd)
 3436               		.loc 1 964 1 is_stmt 1 view -0
 3437               		.cfi_startproc
 3438               	/* prologue: function */
 3439               	/* frame size = 0 */
 3440               	/* stack size = 0 */
 3441               	.L__stack_usage = 0
 965:fat.c         ****     {
 3442               		.loc 1 965 5 view .LVU693
 965:fat.c         ****     {
 3443               		.loc 1 965 7 is_stmt 0 view .LVU694
 3444 0e14 0097      		sbiw r24,0
 3445 0e16 01F0      		breq .L212
 975:fat.c         **** #endif
 3446               		.loc 1 975 9 is_stmt 1 view .LVU695
 975:fat.c         **** #endif
 3447               		.loc 1 975 16 is_stmt 0 view .LVU696
 3448 0e18 FC01      		movw r30,r24
 3449 0e1a 1182      		std Z+1,__zero_reg__
 3450 0e1c 1082      		st Z,__zero_reg__
 3451               	.L212:
 3452               	/* epilogue start */
 978:fat.c         **** 
 3453               		.loc 1 978 1 view .LVU697
 3454 0e1e 0895      		ret
 3455               		.cfi_endproc
 3456               	.LFE12:
 3458               	.global	fat_read_file
 3460               	fat_read_file:
 3461               	.LVL240:
 3462               	.LFB13:
 993:fat.c         ****     /* check arguments */
 3463               		.loc 1 993 1 is_stmt 1 view -0
 3464               		.cfi_startproc
 993:fat.c         ****     /* check arguments */
 3465               		.loc 1 993 1 is_stmt 0 view .LVU699
 3466 0e20 2F92      		push r2
 3467               	.LCFI131:
 3468               		.cfi_def_cfa_offset 3
 3469               		.cfi_offset 2, -2
 3470 0e22 3F92      		push r3
 3471               	.LCFI132:
 3472               		.cfi_def_cfa_offset 4
 3473               		.cfi_offset 3, -3
 3474 0e24 4F92      		push r4
 3475               	.LCFI133:
 3476               		.cfi_def_cfa_offset 5
 3477               		.cfi_offset 4, -4
 3478 0e26 5F92      		push r5
 3479               	.LCFI134:
 3480               		.cfi_def_cfa_offset 6
 3481               		.cfi_offset 5, -5
 3482 0e28 6F92      		push r6
 3483               	.LCFI135:
 3484               		.cfi_def_cfa_offset 7
 3485               		.cfi_offset 6, -6
 3486 0e2a 7F92      		push r7
 3487               	.LCFI136:
 3488               		.cfi_def_cfa_offset 8
 3489               		.cfi_offset 7, -7
 3490 0e2c 8F92      		push r8
 3491               	.LCFI137:
 3492               		.cfi_def_cfa_offset 9
 3493               		.cfi_offset 8, -8
 3494 0e2e 9F92      		push r9
 3495               	.LCFI138:
 3496               		.cfi_def_cfa_offset 10
 3497               		.cfi_offset 9, -9
 3498 0e30 AF92      		push r10
 3499               	.LCFI139:
 3500               		.cfi_def_cfa_offset 11
 3501               		.cfi_offset 10, -10
 3502 0e32 BF92      		push r11
 3503               	.LCFI140:
 3504               		.cfi_def_cfa_offset 12
 3505               		.cfi_offset 11, -11
 3506 0e34 CF92      		push r12
 3507               	.LCFI141:
 3508               		.cfi_def_cfa_offset 13
 3509               		.cfi_offset 12, -12
 3510 0e36 DF92      		push r13
 3511               	.LCFI142:
 3512               		.cfi_def_cfa_offset 14
 3513               		.cfi_offset 13, -13
 3514 0e38 EF92      		push r14
 3515               	.LCFI143:
 3516               		.cfi_def_cfa_offset 15
 3517               		.cfi_offset 14, -14
 3518 0e3a FF92      		push r15
 3519               	.LCFI144:
 3520               		.cfi_def_cfa_offset 16
 3521               		.cfi_offset 15, -15
 3522 0e3c 0F93      		push r16
 3523               	.LCFI145:
 3524               		.cfi_def_cfa_offset 17
 3525               		.cfi_offset 16, -16
 3526 0e3e 1F93      		push r17
 3527               	.LCFI146:
 3528               		.cfi_def_cfa_offset 18
 3529               		.cfi_offset 17, -17
 3530 0e40 CF93      		push r28
 3531               	.LCFI147:
 3532               		.cfi_def_cfa_offset 19
 3533               		.cfi_offset 28, -18
 3534 0e42 DF93      		push r29
 3535               	.LCFI148:
 3536               		.cfi_def_cfa_offset 20
 3537               		.cfi_offset 29, -19
 3538 0e44 00D0      		rcall .
 3539 0e46 00D0      		rcall .
 3540               	.LCFI149:
 3541               		.cfi_def_cfa_offset 24
 3542 0e48 CDB7      		in r28,__SP_L__
 3543 0e4a DEB7      		in r29,__SP_H__
 3544               	.LCFI150:
 3545               		.cfi_def_cfa_register 28
 3546               	/* prologue: function */
 3547               	/* frame size = 4 */
 3548               	/* stack size = 22 */
 3549               	.L__stack_usage = 22
 3550 0e4c 8C01      		movw r16,r24
 3551 0e4e 6B01      		movw r12,r22
 3552 0e50 5C83      		std Y+4,r21
 3553 0e52 4B83      		std Y+3,r20
 995:fat.c         ****         return -1;
 3554               		.loc 1 995 5 is_stmt 1 view .LVU700
 995:fat.c         ****         return -1;
 3555               		.loc 1 995 7 is_stmt 0 view .LVU701
 3556 0e54 892B      		or r24,r25
 3557 0e56 01F4      		brne .L218
 3558               	.LVL241:
 3559               	.L220:
 996:fat.c         **** 
 3560               		.loc 1 996 16 view .LVU702
 3561 0e58 2FEF      		ldi r18,lo8(-1)
 3562 0e5a 3FEF      		ldi r19,lo8(-1)
 3563               	.L245:
1016:fat.c         ****                 return 0;
 3564               		.loc 1 1016 15 view .LVU703
 3565 0e5c 3A83      		std Y+2,r19
 3566 0e5e 2983      		std Y+1,r18
 3567               	.L217:
1072:fat.c         **** 
 3568               		.loc 1 1072 1 view .LVU704
 3569 0e60 8981      		ldd r24,Y+1
 3570 0e62 9A81      		ldd r25,Y+2
 3571               	/* epilogue start */
 3572 0e64 0F90      		pop __tmp_reg__
 3573 0e66 0F90      		pop __tmp_reg__
 3574 0e68 0F90      		pop __tmp_reg__
 3575 0e6a 0F90      		pop __tmp_reg__
 3576 0e6c DF91      		pop r29
 3577 0e6e CF91      		pop r28
 3578               	.LVL242:
1072:fat.c         **** 
 3579               		.loc 1 1072 1 view .LVU705
 3580 0e70 1F91      		pop r17
 3581               	.LVL243:
1072:fat.c         **** 
 3582               		.loc 1 1072 1 view .LVU706
 3583 0e72 0F91      		pop r16
 3584               	.LVL244:
1072:fat.c         **** 
 3585               		.loc 1 1072 1 view .LVU707
 3586 0e74 FF90      		pop r15
 3587               	.LVL245:
1072:fat.c         **** 
 3588               		.loc 1 1072 1 view .LVU708
 3589 0e76 EF90      		pop r14
 3590               	.LVL246:
1072:fat.c         **** 
 3591               		.loc 1 1072 1 view .LVU709
 3592 0e78 DF90      		pop r13
 3593               	.LVL247:
1072:fat.c         **** 
 3594               		.loc 1 1072 1 view .LVU710
 3595 0e7a CF90      		pop r12
 3596               	.LVL248:
1072:fat.c         **** 
 3597               		.loc 1 1072 1 view .LVU711
 3598 0e7c BF90      		pop r11
 3599               	.LVL249:
1072:fat.c         **** 
 3600               		.loc 1 1072 1 view .LVU712
 3601 0e7e AF90      		pop r10
 3602               	.LVL250:
1072:fat.c         **** 
 3603               		.loc 1 1072 1 view .LVU713
 3604 0e80 9F90      		pop r9
 3605               	.LVL251:
1072:fat.c         **** 
 3606               		.loc 1 1072 1 view .LVU714
 3607 0e82 8F90      		pop r8
 3608               	.LVL252:
1072:fat.c         **** 
 3609               		.loc 1 1072 1 view .LVU715
 3610 0e84 7F90      		pop r7
 3611               	.LVL253:
1072:fat.c         **** 
 3612               		.loc 1 1072 1 view .LVU716
 3613 0e86 6F90      		pop r6
 3614               	.LVL254:
1072:fat.c         **** 
 3615               		.loc 1 1072 1 view .LVU717
 3616 0e88 5F90      		pop r5
 3617               	.LVL255:
1072:fat.c         **** 
 3618               		.loc 1 1072 1 view .LVU718
 3619 0e8a 4F90      		pop r4
 3620               	.LVL256:
1072:fat.c         **** 
 3621               		.loc 1 1072 1 view .LVU719
 3622 0e8c 3F90      		pop r3
 3623               	.LVL257:
1072:fat.c         **** 
 3624               		.loc 1 1072 1 view .LVU720
 3625 0e8e 2F90      		pop r2
 3626               	.LVL258:
1072:fat.c         **** 
 3627               		.loc 1 1072 1 view .LVU721
 3628 0e90 0895      		ret
 3629               	.LVL259:
 3630               	.L218:
 995:fat.c         ****         return -1;
 3631               		.loc 1 995 12 discriminator 1 view .LVU722
 3632 0e92 672B      		or r22,r23
 3633 0e94 01F0      		breq .L220
 995:fat.c         ****         return -1;
 3634               		.loc 1 995 23 discriminator 2 view .LVU723
 3635 0e96 8B81      		ldd r24,Y+3
 3636 0e98 9C81      		ldd r25,Y+4
 3637 0e9a 892B      		or r24,r25
 3638 0e9c 01F0      		breq .L220
 999:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
 3639               		.loc 1 999 5 is_stmt 1 view .LVU724
 999:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
 3640               		.loc 1 999 10 is_stmt 0 view .LVU725
 3641 0e9e D801      		movw r26,r16
 3642 0ea0 9D96      		adiw r26,45
 3643 0ea2 8D90      		ld r8,X+
 3644 0ea4 9D90      		ld r9,X+
 3645 0ea6 AD90      		ld r10,X+
 3646 0ea8 BC90      		ld r11,X
 3647 0eaa D097      		sbiw r26,45+3
 999:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
 3648               		.loc 1 999 44 view .LVU726
 3649 0eac 9596      		adiw r26,37
 3650 0eae 8D91      		ld r24,X+
 3651 0eb0 9D91      		ld r25,X+
 3652 0eb2 0D90      		ld __tmp_reg__,X+
 3653 0eb4 BC91      		ld r27,X
 3654 0eb6 A02D      		mov r26,__tmp_reg__
 3655 0eb8 9A82      		std Y+2,r9
 3656 0eba 8982      		std Y+1,r8
 999:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
 3657               		.loc 1 999 16 view .LVU727
 3658 0ebc B501      		movw r22,r10
 3659 0ebe A401      		movw r20,r8
 3660               	.LVL260:
 999:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
 3661               		.loc 1 999 16 view .LVU728
 3662 0ec0 EB81      		ldd r30,Y+3
 3663 0ec2 FC81      		ldd r31,Y+4
 3664 0ec4 4E0F      		add r20,r30
 3665 0ec6 5F1F      		adc r21,r31
 3666 0ec8 611D      		adc r22,__zero_reg__
 3667 0eca 711D      		adc r23,__zero_reg__
 999:fat.c         ****         buffer_len = fd->dir_entry.file_size - fd->pos;
 3668               		.loc 1 999 7 view .LVU729
 3669 0ecc 8417      		cp r24,r20
 3670 0ece 9507      		cpc r25,r21
 3671 0ed0 A607      		cpc r26,r22
 3672 0ed2 B707      		cpc r27,r23
 3673 0ed4 00F4      		brsh .L221
1000:fat.c         ****     if(buffer_len == 0)
 3674               		.loc 1 1000 9 is_stmt 1 view .LVU730
1000:fat.c         ****     if(buffer_len == 0)
 3675               		.loc 1 1000 20 is_stmt 0 view .LVU731
 3676 0ed6 9C01      		movw r18,r24
 3677 0ed8 2819      		sub r18,r8
 3678 0eda 3909      		sbc r19,r9
 3679 0edc 3C83      		std Y+4,r19
 3680 0ede 2B83      		std Y+3,r18
 3681               	.LVL261:
1001:fat.c         ****         return 0;
 3682               		.loc 1 1001 5 is_stmt 1 view .LVU732
1001:fat.c         ****         return 0;
 3683               		.loc 1 1001 7 is_stmt 0 view .LVU733
 3684 0ee0 232B      		or r18,r19
 3685 0ee2 01F4      		brne .+2
 3686 0ee4 00C0      		rjmp .L231
 3687               	.LVL262:
 3688               	.L221:
1004:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
 3689               		.loc 1 1004 5 is_stmt 1 view .LVU734
1004:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
 3690               		.loc 1 1004 14 is_stmt 0 view .LVU735
 3691 0ee6 D801      		movw r26,r16
 3692 0ee8 ED91      		ld r30,X+
 3693 0eea FC91      		ld r31,X
 3694 0eec 1197      		sbiw r26,1
 3695 0eee 2088      		ldd r2,Z+16
 3696 0ef0 3188      		ldd r3,Z+17
 3697               	.LVL263:
1005:fat.c         ****     uintptr_t buffer_left = buffer_len;
 3698               		.loc 1 1005 5 is_stmt 1 view .LVU736
1005:fat.c         ****     uintptr_t buffer_left = buffer_len;
 3699               		.loc 1 1005 15 is_stmt 0 view .LVU737
 3700 0ef2 D196      		adiw r26,49
 3701 0ef4 ED90      		ld r14,X+
 3702 0ef6 FC90      		ld r15,X
 3703 0ef8 D297      		sbiw r26,49+1
 3704               	.LVL264:
1006:fat.c         ****     uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
 3705               		.loc 1 1006 5 is_stmt 1 view .LVU738
1007:fat.c         **** 
 3706               		.loc 1 1007 5 view .LVU739
1010:fat.c         ****     {
 3707               		.loc 1 1010 5 view .LVU740
1010:fat.c         ****     {
 3708               		.loc 1 1010 7 is_stmt 0 view .LVU741
 3709 0efa E114      		cp r14,__zero_reg__
 3710 0efc F104      		cpc r15,__zero_reg__
 3711 0efe 01F4      		brne .L222
1012:fat.c         ****         
 3712               		.loc 1 1012 9 is_stmt 1 view .LVU742
1012:fat.c         ****         
 3713               		.loc 1 1012 21 is_stmt 0 view .LVU743
 3714 0f00 9396      		adiw r26,35
 3715 0f02 ED90      		ld r14,X+
 3716 0f04 FC90      		ld r15,X
 3717               	.LVL265:
1014:fat.c         ****         {
 3718               		.loc 1 1014 9 is_stmt 1 view .LVU744
1014:fat.c         ****         {
 3719               		.loc 1 1014 11 is_stmt 0 view .LVU745
 3720 0f06 E114      		cp r14,__zero_reg__
 3721 0f08 F104      		cpc r15,__zero_reg__
 3722 0f0a 01F4      		brne .L223
1016:fat.c         ****                 return 0;
 3723               		.loc 1 1016 13 is_stmt 1 view .LVU746
1016:fat.c         ****                 return 0;
 3724               		.loc 1 1016 15 is_stmt 0 view .LVU747
 3725 0f0c E1E0      		ldi r30,lo8(1)
 3726 0f0e F0E0      		ldi r31,0
 3727 0f10 FA83      		std Y+2,r31
 3728 0f12 E983      		std Y+1,r30
 3729               	.LVL266:
1016:fat.c         ****                 return 0;
 3730               		.loc 1 1016 15 view .LVU748
 3731 0f14 8928      		or r8,r9
 3732 0f16 8A28      		or r8,r10
 3733 0f18 8B28      		or r8,r11
 3734 0f1a 01F4      		brne .L224
 3735 0f1c 1A82      		std Y+2,__zero_reg__
 3736 0f1e 1982      		std Y+1,__zero_reg__
 3737               	.L224:
 3738 0f20 2981      		ldd r18,Y+1
 3739 0f22 3A81      		ldd r19,Y+2
 3740 0f24 3195      		neg r19
 3741 0f26 2195      		neg r18
 3742 0f28 3109      		sbc r19,__zero_reg__
 3743 0f2a 00C0      		rjmp .L245
 3744               	.LVL267:
 3745               	.L223:
1022:fat.c         ****         {
 3746               		.loc 1 1022 9 is_stmt 1 view .LVU749
 3747               	.LBB77:
1025:fat.c         ****             {
 3748               		.loc 1 1025 23 is_stmt 0 view .LVU750
 3749 0f2c 2101      		movw r4,r2
 3750 0f2e 712C      		mov r7,__zero_reg__
 3751 0f30 612C      		mov r6,__zero_reg__
 3752               	.LBE77:
1022:fat.c         ****         {
 3753               		.loc 1 1022 11 view .LVU751
 3754 0f32 8114      		cp r8,__zero_reg__
 3755 0f34 9104      		cpc r9,__zero_reg__
 3756 0f36 A104      		cpc r10,__zero_reg__
 3757 0f38 B104      		cpc r11,__zero_reg__
 3758 0f3a 01F4      		brne .L225
 3759               	.L222:
1007:fat.c         **** 
 3760               		.loc 1 1007 73 view .LVU752
 3761 0f3c 3101      		movw r6,r2
 3762 0f3e B1E0      		ldi r27,1
 3763 0f40 6B1A      		sub r6,r27
 3764 0f42 7108      		sbc r7,__zero_reg__
1007:fat.c         **** 
 3765               		.loc 1 1007 14 view .LVU753
 3766 0f44 E981      		ldd r30,Y+1
 3767 0f46 FA81      		ldd r31,Y+2
 3768 0f48 6E22      		and r6,r30
 3769 0f4a 7F22      		and r7,r31
 3770 0f4c 8B80      		ldd r8,Y+3
 3771 0f4e 9C80      		ldd r9,Y+4
 3772               	.LVL268:
 3773               	.L230:
1036:fat.c         ****     {
 3774               		.loc 1 1036 5 is_stmt 1 view .LVU754
 3775               	.LBB78:
1039:fat.c         ****         uint16_t copy_length = cluster_size - first_cluster_offset;
 3776               		.loc 1 1039 9 view .LVU755
1039:fat.c         ****         uint16_t copy_length = cluster_size - first_cluster_offset;
 3777               		.loc 1 1039 56 is_stmt 0 view .LVU756
 3778 0f50 D801      		movw r26,r16
 3779 0f52 4D90      		ld r4,X+
 3780 0f54 5C90      		ld r5,X
1039:fat.c         ****         uint16_t copy_length = cluster_size - first_cluster_offset;
 3781               		.loc 1 1039 35 view .LVU757
 3782 0f56 B701      		movw r22,r14
 3783 0f58 C201      		movw r24,r4
 3784 0f5a 0E94 0000 		call fat_cluster_offset
 3785               	.LVL269:
1040:fat.c         ****         if(copy_length > buffer_left)
 3786               		.loc 1 1040 9 is_stmt 1 view .LVU758
1040:fat.c         ****         if(copy_length > buffer_left)
 3787               		.loc 1 1040 18 is_stmt 0 view .LVU759
 3788 0f5e 9101      		movw r18,r2
 3789 0f60 2619      		sub r18,r6
 3790 0f62 3709      		sbc r19,r7
 3791               	.LVL270:
1041:fat.c         ****             copy_length = buffer_left;
 3792               		.loc 1 1041 9 is_stmt 1 view .LVU760
 3793 0f64 5401      		movw r10,r8
 3794 0f66 2815      		cp r18,r8
 3795 0f68 3905      		cpc r19,r9
 3796 0f6a 00F4      		brsh .L227
1041:fat.c         ****             copy_length = buffer_left;
 3797               		.loc 1 1041 9 is_stmt 0 view .LVU761
 3798 0f6c 5901      		movw r10,r18
 3799               	.L227:
 3800               	.LVL271:
1045:fat.c         ****             return buffer_len - buffer_left;
 3801               		.loc 1 1045 9 is_stmt 1 view .LVU762
1039:fat.c         ****         uint16_t copy_length = cluster_size - first_cluster_offset;
 3802               		.loc 1 1039 18 is_stmt 0 view .LVU763
 3803 0f6e 660D      		add r22,r6
 3804 0f70 771D      		adc r23,r7
 3805 0f72 811D      		adc r24,__zero_reg__
 3806 0f74 911D      		adc r25,__zero_reg__
 3807               	.LVL272:
1045:fat.c         ****             return buffer_len - buffer_left;
 3808               		.loc 1 1045 30 view .LVU764
 3809 0f76 D201      		movw r26,r4
 3810 0f78 ED91      		ld r30,X+
 3811 0f7a FC91      		ld r31,X
1045:fat.c         ****             return buffer_len - buffer_left;
 3812               		.loc 1 1045 13 view .LVU765
 3813 0f7c 0190      		ld __tmp_reg__,Z+
 3814 0f7e F081      		ld r31,Z
 3815 0f80 E02D      		mov r30,__tmp_reg__
 3816 0f82 9501      		movw r18,r10
 3817 0f84 A601      		movw r20,r12
 3818 0f86 0995      		icall
 3819               	.LVL273:
1045:fat.c         ****             return buffer_len - buffer_left;
 3820               		.loc 1 1045 11 view .LVU766
 3821 0f88 8111      		cpse r24,__zero_reg__
 3822 0f8a 00C0      		rjmp .L228
1046:fat.c         **** 
 3823               		.loc 1 1046 13 is_stmt 1 view .LVU767
1046:fat.c         **** 
 3824               		.loc 1 1046 31 is_stmt 0 view .LVU768
 3825 0f8c EB81      		ldd r30,Y+3
 3826 0f8e FC81      		ldd r31,Y+4
 3827               	.LVL274:
 3828               	.L246:
1063:fat.c         ****             }
 3829               		.loc 1 1063 35 view .LVU769
 3830 0f90 E819      		sub r30,r8
 3831 0f92 F909      		sbc r31,r9
 3832               	.L244:
1063:fat.c         ****             }
 3833               		.loc 1 1063 35 view .LVU770
 3834               	.LBE78:
1071:fat.c         **** }
 3835               		.loc 1 1071 12 view .LVU771
 3836 0f94 FA83      		std Y+2,r31
 3837 0f96 E983      		std Y+1,r30
 3838 0f98 00C0      		rjmp .L217
 3839               	.LVL275:
 3840               	.L226:
 3841               	.LBB79:
1027:fat.c         ****                 cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
 3842               		.loc 1 1027 17 is_stmt 1 view .LVU772
1027:fat.c         ****                 cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
 3843               		.loc 1 1027 21 is_stmt 0 view .LVU773
 3844 0f9a 8418      		sub r8,r4
 3845 0f9c 9508      		sbc r9,r5
 3846 0f9e A608      		sbc r10,r6
 3847 0fa0 B708      		sbc r11,r7
 3848               	.LVL276:
1028:fat.c         ****                 if(!cluster_num)
 3849               		.loc 1 1028 17 is_stmt 1 view .LVU774
1028:fat.c         ****                 if(!cluster_num)
 3850               		.loc 1 1028 31 is_stmt 0 view .LVU775
 3851 0fa2 B701      		movw r22,r14
 3852 0fa4 0E94 0000 		call fat_get_next_cluster
 3853               	.LVL277:
 3854 0fa8 7C01      		movw r14,r24
 3855               	.LVL278:
1029:fat.c         ****                     return -1;
 3856               		.loc 1 1029 17 is_stmt 1 view .LVU776
1029:fat.c         ****                     return -1;
 3857               		.loc 1 1029 19 is_stmt 0 view .LVU777
 3858 0faa 892B      		or r24,r25
 3859 0fac 01F4      		brne .+2
 3860 0fae 00C0      		rjmp .L220
 3861               	.LVL279:
 3862               	.L225:
1029:fat.c         ****                     return -1;
 3863               		.loc 1 1029 19 view .LVU778
 3864 0fb0 D801      		movw r26,r16
 3865 0fb2 8D91      		ld r24,X+
 3866 0fb4 9C91      		ld r25,X
1025:fat.c         ****             {
 3867               		.loc 1 1025 18 view .LVU779
 3868 0fb6 8414      		cp r8,r4
 3869 0fb8 9504      		cpc r9,r5
 3870 0fba A604      		cpc r10,r6
 3871 0fbc B704      		cpc r11,r7
 3872 0fbe 00F4      		brsh .L226
1025:fat.c         ****             {
 3873               		.loc 1 1025 18 view .LVU780
 3874 0fc0 00C0      		rjmp .L222
 3875               	.LVL280:
 3876               	.L233:
1025:fat.c         ****             {
 3877               		.loc 1 1025 18 view .LVU781
 3878 0fc2 4201      		movw r8,r4
 3879 0fc4 00C0      		rjmp .L230
 3880               	.LVL281:
 3881               	.L228:
1025:fat.c         ****             {
 3882               		.loc 1 1025 18 view .LVU782
 3883               	.LBE79:
 3884               	.LBB80:
1049:fat.c         ****         buffer_left -= copy_length;
 3885               		.loc 1 1049 9 is_stmt 1 view .LVU783
1049:fat.c         ****         buffer_left -= copy_length;
 3886               		.loc 1 1049 16 is_stmt 0 view .LVU784
 3887 0fc6 CA0C      		add r12,r10
 3888 0fc8 DB1C      		adc r13,r11
 3889               	.LVL282:
1050:fat.c         ****         fd->pos += copy_length;
 3890               		.loc 1 1050 9 is_stmt 1 view .LVU785
1050:fat.c         ****         fd->pos += copy_length;
 3891               		.loc 1 1050 21 is_stmt 0 view .LVU786
 3892 0fca 2401      		movw r4,r8
 3893 0fcc 4A18      		sub r4,r10
 3894 0fce 5B08      		sbc r5,r11
 3895               	.LVL283:
1051:fat.c         **** 
 3896               		.loc 1 1051 9 is_stmt 1 view .LVU787
1051:fat.c         **** 
 3897               		.loc 1 1051 17 is_stmt 0 view .LVU788
 3898 0fd0 F801      		movw r30,r16
 3899 0fd2 85A5      		ldd r24,Z+45
 3900 0fd4 96A5      		ldd r25,Z+46
 3901 0fd6 A7A5      		ldd r26,Z+47
 3902 0fd8 B0A9      		ldd r27,Z+48
 3903 0fda 8A0D      		add r24,r10
 3904 0fdc 9B1D      		adc r25,r11
 3905 0fde A11D      		adc r26,__zero_reg__
 3906 0fe0 B11D      		adc r27,__zero_reg__
 3907 0fe2 85A7      		std Z+45,r24
 3908 0fe4 96A7      		std Z+46,r25
 3909 0fe6 A7A7      		std Z+47,r26
 3910 0fe8 B0AB      		std Z+48,r27
1053:fat.c         ****         {
 3911               		.loc 1 1053 9 is_stmt 1 view .LVU789
1053:fat.c         ****         {
 3912               		.loc 1 1053 33 is_stmt 0 view .LVU790
 3913 0fea C301      		movw r24,r6
 3914 0fec 8A0D      		add r24,r10
 3915 0fee 9B1D      		adc r25,r11
1053:fat.c         ****         {
 3916               		.loc 1 1053 11 view .LVU791
 3917 0ff0 8215      		cp r24,r2
 3918 0ff2 9305      		cpc r25,r3
 3919 0ff4 00F0      		brlo .L229
1056:fat.c         ****             {
 3920               		.loc 1 1056 13 is_stmt 1 view .LVU792
1056:fat.c         ****             {
 3921               		.loc 1 1056 31 is_stmt 0 view .LVU793
 3922 0ff6 B701      		movw r22,r14
 3923 0ff8 8081      		ld r24,Z
 3924 0ffa 9181      		ldd r25,Z+1
 3925 0ffc 0E94 0000 		call fat_get_next_cluster
 3926               	.LVL284:
 3927 1000 7C01      		movw r14,r24
 3928               	.LVL285:
1056:fat.c         ****             {
 3929               		.loc 1 1056 15 view .LVU794
 3930 1002 892B      		or r24,r25
 3931 1004 01F4      		brne .L232
1062:fat.c         ****                 return buffer_len - buffer_left;
 3932               		.loc 1 1062 17 is_stmt 1 view .LVU795
1062:fat.c         ****                 return buffer_len - buffer_left;
 3933               		.loc 1 1062 33 is_stmt 0 view .LVU796
 3934 1006 D801      		movw r26,r16
 3935 1008 D296      		adiw r26,49+1
 3936 100a 1C92      		st X,__zero_reg__
 3937 100c 1E92      		st -X,__zero_reg__
 3938 100e D197      		sbiw r26,49
1063:fat.c         ****             }
 3939               		.loc 1 1063 17 is_stmt 1 view .LVU797
1063:fat.c         ****             }
 3940               		.loc 1 1063 35 is_stmt 0 view .LVU798
 3941 1010 EB81      		ldd r30,Y+3
 3942 1012 FC81      		ldd r31,Y+4
 3943 1014 EA0D      		add r30,r10
 3944 1016 FB1D      		adc r31,r11
 3945 1018 00C0      		rjmp .L246
 3946               	.L232:
1058:fat.c         ****             }
 3947               		.loc 1 1058 38 view .LVU799
 3948 101a 712C      		mov r7,__zero_reg__
 3949 101c 612C      		mov r6,__zero_reg__
 3950               	.LVL286:
 3951               	.L229:
1067:fat.c         **** 
 3952               		.loc 1 1067 9 is_stmt 1 view .LVU800
1067:fat.c         **** 
 3953               		.loc 1 1067 25 is_stmt 0 view .LVU801
 3954 101e D801      		movw r26,r16
 3955 1020 D296      		adiw r26,49+1
 3956 1022 FC92      		st X,r15
 3957 1024 EE92      		st -X,r14
 3958 1026 D197      		sbiw r26,49
 3959               	.LBE80:
1069:fat.c         **** 
 3960               		.loc 1 1069 5 view .LVU802
 3961 1028 4114      		cp r4,__zero_reg__
 3962 102a 5104      		cpc r5,__zero_reg__
 3963 102c 01F4      		brne .L233
1071:fat.c         **** }
 3964               		.loc 1 1071 5 is_stmt 1 view .LVU803
1071:fat.c         **** }
 3965               		.loc 1 1071 12 is_stmt 0 view .LVU804
 3966 102e EB81      		ldd r30,Y+3
 3967 1030 FC81      		ldd r31,Y+4
 3968 1032 00C0      		rjmp .L244
 3969               	.LVL287:
 3970               	.L231:
1002:fat.c         ****     
 3971               		.loc 1 1002 16 view .LVU805
 3972 1034 1A82      		std Y+2,__zero_reg__
 3973 1036 1982      		std Y+1,__zero_reg__
 3974 1038 00C0      		rjmp .L217
 3975               		.cfi_endproc
 3976               	.LFE13:
 3978               	.global	fat_write_file
 3980               	fat_write_file:
 3981               	.LVL288:
 3982               	.LFB14:
1088:fat.c         ****     /* check arguments */
 3983               		.loc 1 1088 1 is_stmt 1 view -0
 3984               		.cfi_startproc
1088:fat.c         ****     /* check arguments */
 3985               		.loc 1 1088 1 is_stmt 0 view .LVU807
 3986 103a 2F92      		push r2
 3987               	.LCFI151:
 3988               		.cfi_def_cfa_offset 3
 3989               		.cfi_offset 2, -2
 3990 103c 3F92      		push r3
 3991               	.LCFI152:
 3992               		.cfi_def_cfa_offset 4
 3993               		.cfi_offset 3, -3
 3994 103e 4F92      		push r4
 3995               	.LCFI153:
 3996               		.cfi_def_cfa_offset 5
 3997               		.cfi_offset 4, -4
 3998 1040 5F92      		push r5
 3999               	.LCFI154:
 4000               		.cfi_def_cfa_offset 6
 4001               		.cfi_offset 5, -5
 4002 1042 6F92      		push r6
 4003               	.LCFI155:
 4004               		.cfi_def_cfa_offset 7
 4005               		.cfi_offset 6, -6
 4006 1044 7F92      		push r7
 4007               	.LCFI156:
 4008               		.cfi_def_cfa_offset 8
 4009               		.cfi_offset 7, -7
 4010 1046 8F92      		push r8
 4011               	.LCFI157:
 4012               		.cfi_def_cfa_offset 9
 4013               		.cfi_offset 8, -8
 4014 1048 9F92      		push r9
 4015               	.LCFI158:
 4016               		.cfi_def_cfa_offset 10
 4017               		.cfi_offset 9, -9
 4018 104a AF92      		push r10
 4019               	.LCFI159:
 4020               		.cfi_def_cfa_offset 11
 4021               		.cfi_offset 10, -10
 4022 104c BF92      		push r11
 4023               	.LCFI160:
 4024               		.cfi_def_cfa_offset 12
 4025               		.cfi_offset 11, -11
 4026 104e CF92      		push r12
 4027               	.LCFI161:
 4028               		.cfi_def_cfa_offset 13
 4029               		.cfi_offset 12, -12
 4030 1050 DF92      		push r13
 4031               	.LCFI162:
 4032               		.cfi_def_cfa_offset 14
 4033               		.cfi_offset 13, -13
 4034 1052 EF92      		push r14
 4035               	.LCFI163:
 4036               		.cfi_def_cfa_offset 15
 4037               		.cfi_offset 14, -14
 4038 1054 FF92      		push r15
 4039               	.LCFI164:
 4040               		.cfi_def_cfa_offset 16
 4041               		.cfi_offset 15, -15
 4042 1056 0F93      		push r16
 4043               	.LCFI165:
 4044               		.cfi_def_cfa_offset 17
 4045               		.cfi_offset 16, -16
 4046 1058 1F93      		push r17
 4047               	.LCFI166:
 4048               		.cfi_def_cfa_offset 18
 4049               		.cfi_offset 17, -17
 4050 105a CF93      		push r28
 4051               	.LCFI167:
 4052               		.cfi_def_cfa_offset 19
 4053               		.cfi_offset 28, -18
 4054 105c DF93      		push r29
 4055               	.LCFI168:
 4056               		.cfi_def_cfa_offset 20
 4057               		.cfi_offset 29, -19
 4058 105e 00D0      		rcall .
 4059 1060 00D0      		rcall .
 4060               	.LCFI169:
 4061               		.cfi_def_cfa_offset 24
 4062 1062 CDB7      		in r28,__SP_L__
 4063 1064 DEB7      		in r29,__SP_H__
 4064               	.LCFI170:
 4065               		.cfi_def_cfa_register 28
 4066               	/* prologue: function */
 4067               	/* frame size = 4 */
 4068               	/* stack size = 22 */
 4069               	.L__stack_usage = 22
 4070 1066 9C83      		std Y+4,r25
 4071 1068 8B83      		std Y+3,r24
 4072 106a 6B01      		movw r12,r22
 4073 106c 5A83      		std Y+2,r21
 4074 106e 4983      		std Y+1,r20
1090:fat.c         ****         return -1;
 4075               		.loc 1 1090 5 is_stmt 1 view .LVU808
1090:fat.c         ****         return -1;
 4076               		.loc 1 1090 7 is_stmt 0 view .LVU809
 4077 1070 892B      		or r24,r25
 4078 1072 01F4      		brne .L248
 4079               	.LVL289:
 4080               	.L250:
1091:fat.c         ****     if(fd->pos > fd->dir_entry.file_size)
 4081               		.loc 1 1091 16 view .LVU810
 4082 1074 8FEF      		ldi r24,lo8(-1)
 4083 1076 9FEF      		ldi r25,lo8(-1)
 4084               	.LVL290:
 4085               	.L247:
 4086               	/* epilogue start */
1208:fat.c         **** #endif
 4087               		.loc 1 1208 1 view .LVU811
 4088 1078 0F90      		pop __tmp_reg__
 4089 107a 0F90      		pop __tmp_reg__
 4090 107c 0F90      		pop __tmp_reg__
 4091 107e 0F90      		pop __tmp_reg__
 4092 1080 DF91      		pop r29
 4093 1082 CF91      		pop r28
 4094               	.LVL291:
1208:fat.c         **** #endif
 4095               		.loc 1 1208 1 view .LVU812
 4096 1084 1F91      		pop r17
 4097               	.LVL292:
1208:fat.c         **** #endif
 4098               		.loc 1 1208 1 view .LVU813
 4099 1086 0F91      		pop r16
 4100               	.LVL293:
1208:fat.c         **** #endif
 4101               		.loc 1 1208 1 view .LVU814
 4102 1088 FF90      		pop r15
 4103               	.LVL294:
1208:fat.c         **** #endif
 4104               		.loc 1 1208 1 view .LVU815
 4105 108a EF90      		pop r14
 4106               	.LVL295:
1208:fat.c         **** #endif
 4107               		.loc 1 1208 1 view .LVU816
 4108 108c DF90      		pop r13
 4109               	.LVL296:
1208:fat.c         **** #endif
 4110               		.loc 1 1208 1 view .LVU817
 4111 108e CF90      		pop r12
 4112               	.LVL297:
1208:fat.c         **** #endif
 4113               		.loc 1 1208 1 view .LVU818
 4114 1090 BF90      		pop r11
 4115               	.LVL298:
1208:fat.c         **** #endif
 4116               		.loc 1 1208 1 view .LVU819
 4117 1092 AF90      		pop r10
 4118               	.LVL299:
1208:fat.c         **** #endif
 4119               		.loc 1 1208 1 view .LVU820
 4120 1094 9F90      		pop r9
 4121               	.LVL300:
1208:fat.c         **** #endif
 4122               		.loc 1 1208 1 view .LVU821
 4123 1096 8F90      		pop r8
 4124               	.LVL301:
1208:fat.c         **** #endif
 4125               		.loc 1 1208 1 view .LVU822
 4126 1098 7F90      		pop r7
 4127               	.LVL302:
1208:fat.c         **** #endif
 4128               		.loc 1 1208 1 view .LVU823
 4129 109a 6F90      		pop r6
 4130               	.LVL303:
1208:fat.c         **** #endif
 4131               		.loc 1 1208 1 view .LVU824
 4132 109c 5F90      		pop r5
 4133               	.LVL304:
1208:fat.c         **** #endif
 4134               		.loc 1 1208 1 view .LVU825
 4135 109e 4F90      		pop r4
 4136               	.LVL305:
1208:fat.c         **** #endif
 4137               		.loc 1 1208 1 view .LVU826
 4138 10a0 3F90      		pop r3
 4139               	.LVL306:
1208:fat.c         **** #endif
 4140               		.loc 1 1208 1 view .LVU827
 4141 10a2 2F90      		pop r2
 4142               	.LVL307:
1208:fat.c         **** #endif
 4143               		.loc 1 1208 1 view .LVU828
 4144 10a4 0895      		ret
 4145               	.LVL308:
 4146               	.L248:
1090:fat.c         ****         return -1;
 4147               		.loc 1 1090 12 discriminator 1 view .LVU829
 4148 10a6 672B      		or r22,r23
 4149 10a8 01F0      		breq .L250
1090:fat.c         ****         return -1;
 4150               		.loc 1 1090 23 discriminator 2 view .LVU830
 4151 10aa 8981      		ldd r24,Y+1
 4152 10ac 9A81      		ldd r25,Y+2
 4153               	.LVL309:
1090:fat.c         ****         return -1;
 4154               		.loc 1 1090 23 discriminator 2 view .LVU831
 4155 10ae 892B      		or r24,r25
 4156 10b0 01F0      		breq .L250
1092:fat.c         ****         return -1;
 4157               		.loc 1 1092 5 is_stmt 1 view .LVU832
1092:fat.c         ****         return -1;
 4158               		.loc 1 1092 10 is_stmt 0 view .LVU833
 4159 10b2 AB81      		ldd r26,Y+3
 4160 10b4 BC81      		ldd r27,Y+4
 4161 10b6 9D96      		adiw r26,45
 4162 10b8 4D91      		ld r20,X+
 4163 10ba 5D91      		ld r21,X+
 4164 10bc 6D91      		ld r22,X+
 4165 10be 7C91      		ld r23,X
 4166 10c0 D097      		sbiw r26,45+3
 4167               	.LVL310:
1092:fat.c         ****         return -1;
 4168               		.loc 1 1092 7 view .LVU834
 4169 10c2 9596      		adiw r26,37
 4170 10c4 8D91      		ld r24,X+
 4171 10c6 9D91      		ld r25,X+
 4172 10c8 0D90      		ld __tmp_reg__,X+
 4173 10ca BC91      		ld r27,X
 4174 10cc A02D      		mov r26,__tmp_reg__
 4175 10ce 8417      		cp r24,r20
 4176 10d0 9507      		cpc r25,r21
 4177 10d2 A607      		cpc r26,r22
 4178 10d4 B707      		cpc r27,r23
 4179 10d6 00F0      		brlo .L250
1095:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
 4180               		.loc 1 1095 5 is_stmt 1 view .LVU835
1095:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
 4181               		.loc 1 1095 31 is_stmt 0 view .LVU836
 4182 10d8 EB81      		ldd r30,Y+3
 4183 10da FC81      		ldd r31,Y+4
 4184 10dc 8081      		ld r24,Z
 4185 10de 9181      		ldd r25,Z+1
1095:fat.c         ****     cluster_t cluster_num = fd->pos_cluster;
 4186               		.loc 1 1095 14 view .LVU837
 4187 10e0 DC01      		movw r26,r24
 4188 10e2 5096      		adiw r26,16
 4189 10e4 2D90      		ld r2,X+
 4190 10e6 3C90      		ld r3,X
 4191               	.LVL311:
1096:fat.c         ****     uintptr_t buffer_left = buffer_len;
 4192               		.loc 1 1096 5 is_stmt 1 view .LVU838
1096:fat.c         ****     uintptr_t buffer_left = buffer_len;
 4193               		.loc 1 1096 15 is_stmt 0 view .LVU839
 4194 10e8 01A9      		ldd r16,Z+49
 4195 10ea 12A9      		ldd r17,Z+50
 4196               	.LVL312:
1097:fat.c         ****     uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
 4197               		.loc 1 1097 5 is_stmt 1 view .LVU840
1098:fat.c         **** 
 4198               		.loc 1 1098 5 view .LVU841
1098:fat.c         **** 
 4199               		.loc 1 1098 73 is_stmt 0 view .LVU842
 4200 10ec 7101      		movw r14,r2
 4201 10ee B1E0      		ldi r27,1
 4202 10f0 EB1A      		sub r14,r27
 4203 10f2 F108      		sbc r15,__zero_reg__
1098:fat.c         **** 
 4204               		.loc 1 1098 14 view .LVU843
 4205 10f4 E422      		and r14,r20
 4206 10f6 F522      		and r15,r21
 4207               	.LVL313:
1101:fat.c         ****     {
 4208               		.loc 1 1101 5 is_stmt 1 view .LVU844
1101:fat.c         ****     {
 4209               		.loc 1 1101 7 is_stmt 0 view .LVU845
 4210 10f8 0115      		cp r16,__zero_reg__
 4211 10fa 1105      		cpc r17,__zero_reg__
 4212 10fc 01F4      		brne .L251
1103:fat.c         ****         
 4213               		.loc 1 1103 9 is_stmt 1 view .LVU846
1103:fat.c         ****         
 4214               		.loc 1 1103 21 is_stmt 0 view .LVU847
 4215 10fe 03A1      		ldd r16,Z+35
 4216 1100 14A1      		ldd r17,Z+36
 4217               	.LVL314:
1105:fat.c         ****         {
 4218               		.loc 1 1105 9 is_stmt 1 view .LVU848
1105:fat.c         ****         {
 4219               		.loc 1 1105 11 is_stmt 0 view .LVU849
 4220 1102 0115      		cp r16,__zero_reg__
 4221 1104 1105      		cpc r17,__zero_reg__
 4222 1106 01F4      		brne .L252
1107:fat.c         ****             {
 4223               		.loc 1 1107 13 is_stmt 1 view .LVU850
1107:fat.c         ****             {
 4224               		.loc 1 1107 15 is_stmt 0 view .LVU851
 4225 1108 452B      		or r20,r21
 4226 110a 462B      		or r20,r22
 4227 110c 472B      		or r20,r23
 4228 110e 01F0      		breq .+2
 4229 1110 00C0      		rjmp .L250
1110:fat.c         ****                 if(!cluster_num)
 4230               		.loc 1 1110 17 is_stmt 1 view .LVU852
1110:fat.c         ****                 if(!cluster_num)
 4231               		.loc 1 1110 55 is_stmt 0 view .LVU853
 4232 1112 41E0      		ldi r20,lo8(1)
 4233 1114 50E0      		ldi r21,0
 4234 1116 70E0      		ldi r23,0
 4235 1118 60E0      		ldi r22,0
 4236 111a 0E94 0000 		call fat_append_clusters
 4237               	.LVL315:
 4238 111e 8C01      		movw r16,r24
 4239               	.LVL316:
1110:fat.c         ****                 if(!cluster_num)
 4240               		.loc 1 1110 39 view .LVU854
 4241 1120 EB81      		ldd r30,Y+3
 4242 1122 FC81      		ldd r31,Y+4
 4243 1124 94A3      		std Z+36,r25
 4244 1126 83A3      		std Z+35,r24
1111:fat.c         ****                     return 0;
 4245               		.loc 1 1111 17 is_stmt 1 view .LVU855
1111:fat.c         ****                     return 0;
 4246               		.loc 1 1111 19 is_stmt 0 view .LVU856
 4247 1128 892B      		or r24,r25
 4248 112a 01F4      		brne .L252
 4249               	.LVL317:
 4250               	.L255:
1112:fat.c         ****             }
 4251               		.loc 1 1112 28 view .LVU857
 4252 112c 90E0      		ldi r25,0
 4253 112e 80E0      		ldi r24,0
 4254 1130 00C0      		rjmp .L247
 4255               	.LVL318:
 4256               	.L252:
1120:fat.c         ****         {
 4257               		.loc 1 1120 9 is_stmt 1 view .LVU858
1120:fat.c         ****         {
 4258               		.loc 1 1120 14 is_stmt 0 view .LVU859
 4259 1132 AB81      		ldd r26,Y+3
 4260 1134 BC81      		ldd r27,Y+4
 4261 1136 9D96      		adiw r26,45
 4262 1138 8D90      		ld r8,X+
 4263 113a 9D90      		ld r9,X+
 4264 113c AD90      		ld r10,X+
 4265 113e BC90      		ld r11,X
 4266 1140 D097      		sbiw r26,45+3
 4267               	.LBB81:
1124:fat.c         ****             {
 4268               		.loc 1 1124 23 view .LVU860
 4269 1142 2101      		movw r4,r2
 4270 1144 712C      		mov r7,__zero_reg__
 4271 1146 612C      		mov r6,__zero_reg__
 4272               	.LBE81:
1120:fat.c         ****         {
 4273               		.loc 1 1120 11 view .LVU861
 4274 1148 8114      		cp r8,__zero_reg__
 4275 114a 9104      		cpc r9,__zero_reg__
 4276 114c A104      		cpc r10,__zero_reg__
 4277 114e B104      		cpc r11,__zero_reg__
 4278 1150 01F0      		breq .+2
 4279 1152 00C0      		rjmp .L254
 4280               	.L251:
 4281               	.LBB82:
1120:fat.c         ****         {
 4282               		.loc 1 1120 11 view .LVU862
 4283 1154 A980      		ldd r10,Y+1
 4284 1156 BA80      		ldd r11,Y+2
 4285               	.LVL319:
 4286               	.L261:
1120:fat.c         ****         {
 4287               		.loc 1 1120 11 view .LVU863
 4288               	.LBE82:
1145:fat.c         ****     {
 4289               		.loc 1 1145 5 is_stmt 1 view .LVU864
 4290               	.LBB83:
1148:fat.c         ****         uint16_t write_length = cluster_size - first_cluster_offset;
 4291               		.loc 1 1148 9 view .LVU865
1148:fat.c         ****         uint16_t write_length = cluster_size - first_cluster_offset;
 4292               		.loc 1 1148 56 is_stmt 0 view .LVU866
 4293 1158 EB81      		ldd r30,Y+3
 4294 115a FC81      		ldd r31,Y+4
 4295 115c 6080      		ld r6,Z
 4296 115e 7180      		ldd r7,Z+1
1148:fat.c         ****         uint16_t write_length = cluster_size - first_cluster_offset;
 4297               		.loc 1 1148 35 view .LVU867
 4298 1160 B801      		movw r22,r16
 4299 1162 C301      		movw r24,r6
 4300 1164 0E94 0000 		call fat_cluster_offset
 4301               	.LVL320:
1149:fat.c         ****         if(write_length > buffer_left)
 4302               		.loc 1 1149 9 is_stmt 1 view .LVU868
1149:fat.c         ****         if(write_length > buffer_left)
 4303               		.loc 1 1149 18 is_stmt 0 view .LVU869
 4304 1168 9101      		movw r18,r2
 4305 116a 2E19      		sub r18,r14
 4306 116c 3F09      		sbc r19,r15
 4307               	.LVL321:
1150:fat.c         ****             write_length = buffer_left;
 4308               		.loc 1 1150 9 is_stmt 1 view .LVU870
 4309 116e 4501      		movw r8,r10
 4310 1170 2A15      		cp r18,r10
 4311 1172 3B05      		cpc r19,r11
 4312 1174 00F4      		brsh .L257
1150:fat.c         ****             write_length = buffer_left;
 4313               		.loc 1 1150 9 is_stmt 0 view .LVU871
 4314 1176 4901      		movw r8,r18
 4315               	.L257:
 4316               	.LVL322:
1154:fat.c         ****             break;
 4317               		.loc 1 1154 9 is_stmt 1 view .LVU872
1148:fat.c         ****         uint16_t write_length = cluster_size - first_cluster_offset;
 4318               		.loc 1 1148 18 is_stmt 0 view .LVU873
 4319 1178 6E0D      		add r22,r14
 4320 117a 7F1D      		adc r23,r15
 4321 117c 811D      		adc r24,__zero_reg__
 4322 117e 911D      		adc r25,__zero_reg__
 4323               	.LVL323:
1154:fat.c         ****             break;
 4324               		.loc 1 1154 30 view .LVU874
 4325 1180 D301      		movw r26,r6
 4326 1182 ED91      		ld r30,X+
 4327 1184 FC91      		ld r31,X
1154:fat.c         ****             break;
 4328               		.loc 1 1154 13 view .LVU875
 4329 1186 0480      		ldd __tmp_reg__,Z+4
 4330 1188 F581      		ldd r31,Z+5
 4331 118a E02D      		mov r30,__tmp_reg__
 4332 118c 9401      		movw r18,r8
 4333 118e A601      		movw r20,r12
 4334 1190 0995      		icall
 4335               	.LVL324:
1154:fat.c         ****             break;
 4336               		.loc 1 1154 11 view .LVU876
 4337 1192 8823      		tst r24
 4338 1194 01F0      		breq .L258
1158:fat.c         ****         buffer_left -= write_length;
 4339               		.loc 1 1158 9 is_stmt 1 view .LVU877
1158:fat.c         ****         buffer_left -= write_length;
 4340               		.loc 1 1158 16 is_stmt 0 view .LVU878
 4341 1196 C80C      		add r12,r8
 4342 1198 D91C      		adc r13,r9
 4343               	.LVL325:
1159:fat.c         ****         fd->pos += write_length;
 4344               		.loc 1 1159 9 is_stmt 1 view .LVU879
1159:fat.c         ****         fd->pos += write_length;
 4345               		.loc 1 1159 21 is_stmt 0 view .LVU880
 4346 119a A818      		sub r10,r8
 4347 119c B908      		sbc r11,r9
 4348               	.LVL326:
1160:fat.c         **** 
 4349               		.loc 1 1160 9 is_stmt 1 view .LVU881
1160:fat.c         **** 
 4350               		.loc 1 1160 17 is_stmt 0 view .LVU882
 4351 119e EB81      		ldd r30,Y+3
 4352 11a0 FC81      		ldd r31,Y+4
 4353 11a2 85A5      		ldd r24,Z+45
 4354 11a4 96A5      		ldd r25,Z+46
 4355 11a6 A7A5      		ldd r26,Z+47
 4356 11a8 B0A9      		ldd r27,Z+48
 4357 11aa 880D      		add r24,r8
 4358 11ac 991D      		adc r25,r9
 4359 11ae A11D      		adc r26,__zero_reg__
 4360 11b0 B11D      		adc r27,__zero_reg__
 4361 11b2 85A7      		std Z+45,r24
 4362 11b4 96A7      		std Z+46,r25
 4363 11b6 A7A7      		std Z+47,r26
 4364 11b8 B0AB      		std Z+48,r27
1162:fat.c         ****         {
 4365               		.loc 1 1162 9 is_stmt 1 view .LVU883
1162:fat.c         ****         {
 4366               		.loc 1 1162 33 is_stmt 0 view .LVU884
 4367 11ba 8E0C      		add r8,r14
 4368 11bc 9F1C      		adc r9,r15
 4369               	.LVL327:
1162:fat.c         ****         {
 4370               		.loc 1 1162 11 view .LVU885
 4371 11be 8214      		cp r8,r2
 4372 11c0 9304      		cpc r9,r3
 4373 11c2 00F4      		brsh .+2
 4374 11c4 00C0      		rjmp .L259
 4375               	.LBB84:
1165:fat.c         ****             if(!cluster_num_next && buffer_left > 0)
 4376               		.loc 1 1165 13 is_stmt 1 view .LVU886
1165:fat.c         ****             if(!cluster_num_next && buffer_left > 0)
 4377               		.loc 1 1165 42 is_stmt 0 view .LVU887
 4378 11c6 B801      		movw r22,r16
 4379 11c8 8081      		ld r24,Z
 4380 11ca 9181      		ldd r25,Z+1
 4381 11cc 0E94 0000 		call fat_get_next_cluster
 4382               	.LVL328:
 4383 11d0 7C01      		movw r14,r24
 4384               	.LVL329:
1166:fat.c         ****                 /* we reached the last cluster, append a new one */
 4385               		.loc 1 1166 13 is_stmt 1 view .LVU888
1166:fat.c         ****                 /* we reached the last cluster, append a new one */
 4386               		.loc 1 1166 15 is_stmt 0 view .LVU889
 4387 11d2 0097      		sbiw r24,0
 4388 11d4 01F0      		breq .+2
 4389 11d6 00C0      		rjmp .L264
1166:fat.c         ****                 /* we reached the last cluster, append a new one */
 4390               		.loc 1 1166 34 discriminator 1 view .LVU890
 4391 11d8 A114      		cp r10,__zero_reg__
 4392 11da B104      		cpc r11,__zero_reg__
 4393 11dc 01F0      		breq .L260
1168:fat.c         ****             if(!cluster_num_next)
 4394               		.loc 1 1168 17 is_stmt 1 view .LVU891
1168:fat.c         ****             if(!cluster_num_next)
 4395               		.loc 1 1168 36 is_stmt 0 view .LVU892
 4396 11de 41E0      		ldi r20,lo8(1)
 4397 11e0 50E0      		ldi r21,0
 4398 11e2 B801      		movw r22,r16
 4399 11e4 AB81      		ldd r26,Y+3
 4400 11e6 BC81      		ldd r27,Y+4
 4401 11e8 8D91      		ld r24,X+
 4402 11ea 9C91      		ld r25,X
 4403 11ec 0E94 0000 		call fat_append_clusters
 4404               	.LVL330:
 4405 11f0 8C01      		movw r16,r24
 4406               	.LVL331:
1169:fat.c         ****             {
 4407               		.loc 1 1169 13 is_stmt 1 view .LVU893
1169:fat.c         ****             {
 4408               		.loc 1 1169 15 is_stmt 0 view .LVU894
 4409 11f2 892B      		or r24,r25
 4410 11f4 01F0      		breq .+2
 4411 11f6 00C0      		rjmp .L259
 4412               	.LVL332:
 4413               	.L260:
1171:fat.c         ****                 break;
 4414               		.loc 1 1171 17 is_stmt 1 view .LVU895
1171:fat.c         ****                 break;
 4415               		.loc 1 1171 33 is_stmt 0 view .LVU896
 4416 11f8 EB81      		ldd r30,Y+3
 4417 11fa FC81      		ldd r31,Y+4
 4418 11fc 12AA      		std Z+50,__zero_reg__
 4419 11fe 11AA      		std Z+49,__zero_reg__
1172:fat.c         ****             }
 4420               		.loc 1 1172 17 is_stmt 1 view .LVU897
 4421               	.LVL333:
 4422               	.L258:
1172:fat.c         ****             }
 4423               		.loc 1 1172 17 is_stmt 0 view .LVU898
 4424               	.LBE84:
 4425               	.LBE83:
1184:fat.c         ****     {
 4426               		.loc 1 1184 5 is_stmt 1 view .LVU899
1184:fat.c         ****     {
 4427               		.loc 1 1184 10 is_stmt 0 view .LVU900
 4428 1200 EB81      		ldd r30,Y+3
 4429 1202 FC81      		ldd r31,Y+4
 4430 1204 85A5      		ldd r24,Z+45
 4431 1206 96A5      		ldd r25,Z+46
 4432 1208 A7A5      		ldd r26,Z+47
 4433 120a B0A9      		ldd r27,Z+48
1184:fat.c         ****     {
 4434               		.loc 1 1184 31 view .LVU901
 4435 120c C5A0      		ldd r12,Z+37
 4436 120e D6A0      		ldd r13,Z+38
 4437 1210 E7A0      		ldd r14,Z+39
 4438 1212 F0A4      		ldd r15,Z+40
 4439               	.LVL334:
1184:fat.c         ****     {
 4440               		.loc 1 1184 7 view .LVU902
 4441 1214 C816      		cp r12,r24
 4442 1216 D906      		cpc r13,r25
 4443 1218 EA06      		cpc r14,r26
 4444 121a FB06      		cpc r15,r27
 4445 121c 00F4      		brsh .L262
 4446               	.LBB86:
1187:fat.c         **** #endif
 4447               		.loc 1 1187 9 is_stmt 1 view .LVU903
 4448               	.LVL335:
1191:fat.c         **** 
 4449               		.loc 1 1191 9 view .LVU904
1191:fat.c         **** 
 4450               		.loc 1 1191 33 is_stmt 0 view .LVU905
 4451 121e 85A3      		std Z+37,r24
 4452 1220 96A3      		std Z+38,r25
 4453 1222 A7A3      		std Z+39,r26
 4454 1224 B0A7      		std Z+40,r27
1195:fat.c         ****         {
 4455               		.loc 1 1195 9 is_stmt 1 view .LVU906
1195:fat.c         ****         {
 4456               		.loc 1 1195 13 is_stmt 0 view .LVU907
 4457 1226 DF01      		movw r26,r30
 4458 1228 8D91      		ld r24,X+
 4459 122a 9D91      		ld r25,X+
 4460 122c BD01      		movw r22,r26
 4461 122e 0E94 0000 		call fat_write_dir_entry
 4462               	.LVL336:
1195:fat.c         ****         {
 4463               		.loc 1 1195 11 view .LVU908
 4464 1232 8111      		cpse r24,__zero_reg__
 4465 1234 00C0      		rjmp .L262
1201:fat.c         ****             fd->pos = size_old;
 4466               		.loc 1 1201 13 is_stmt 1 view .LVU909
1201:fat.c         ****             fd->pos = size_old;
 4467               		.loc 1 1201 25 is_stmt 0 view .LVU910
 4468 1236 EB81      		ldd r30,Y+3
 4469 1238 FC81      		ldd r31,Y+4
 4470 123a A5A4      		ldd r10,Z+45
 4471 123c B6A4      		ldd r11,Z+46
 4472               	.LVL337:
1201:fat.c         ****             fd->pos = size_old;
 4473               		.loc 1 1201 25 view .LVU911
 4474 123e AC18      		sub r10,r12
 4475 1240 BD08      		sbc r11,r13
 4476               	.LVL338:
1202:fat.c         ****         }
 4477               		.loc 1 1202 13 is_stmt 1 view .LVU912
1202:fat.c         ****         }
 4478               		.loc 1 1202 21 is_stmt 0 view .LVU913
 4479 1242 C5A6      		std Z+45,r12
 4480 1244 D6A6      		std Z+46,r13
 4481 1246 E7A6      		std Z+47,r14
 4482 1248 F0AA      		std Z+48,r15
 4483               	.LVL339:
 4484               	.L262:
1202:fat.c         ****         }
 4485               		.loc 1 1202 21 view .LVU914
 4486               	.LBE86:
1207:fat.c         **** }
 4487               		.loc 1 1207 5 is_stmt 1 view .LVU915
1207:fat.c         **** }
 4488               		.loc 1 1207 23 is_stmt 0 view .LVU916
 4489 124a 8981      		ldd r24,Y+1
 4490 124c 9A81      		ldd r25,Y+2
 4491 124e 8A19      		sub r24,r10
 4492 1250 9B09      		sbc r25,r11
 4493 1252 00C0      		rjmp .L247
 4494               	.LVL340:
 4495               	.L256:
 4496               	.LBB87:
1126:fat.c         ****                 cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
 4497               		.loc 1 1126 17 is_stmt 1 view .LVU917
1126:fat.c         ****                 cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
 4498               		.loc 1 1126 21 is_stmt 0 view .LVU918
 4499 1254 8418      		sub r8,r4
 4500 1256 9508      		sbc r9,r5
 4501 1258 A608      		sbc r10,r6
 4502 125a B708      		sbc r11,r7
 4503               	.LVL341:
1127:fat.c         ****                 if(!cluster_num_next)
 4504               		.loc 1 1127 17 is_stmt 1 view .LVU919
1127:fat.c         ****                 if(!cluster_num_next)
 4505               		.loc 1 1127 36 is_stmt 0 view .LVU920
 4506 125c B801      		movw r22,r16
 4507 125e 0E94 0000 		call fat_get_next_cluster
 4508               	.LVL342:
1128:fat.c         ****                 {
 4509               		.loc 1 1128 17 is_stmt 1 view .LVU921
1128:fat.c         ****                 {
 4510               		.loc 1 1128 19 is_stmt 0 view .LVU922
 4511 1262 0097      		sbiw r24,0
 4512 1264 01F4      		brne .L263
1130:fat.c         ****                         return -1; /* current file position points beyond end of file */
 4513               		.loc 1 1130 21 is_stmt 1 view .LVU923
1130:fat.c         ****                         return -1; /* current file position points beyond end of file */
 4514               		.loc 1 1130 23 is_stmt 0 view .LVU924
 4515 1266 8114      		cp r8,__zero_reg__
 4516 1268 9104      		cpc r9,__zero_reg__
 4517 126a A104      		cpc r10,__zero_reg__
 4518 126c B104      		cpc r11,__zero_reg__
 4519 126e 01F0      		breq .+2
 4520 1270 00C0      		rjmp .L250
1134:fat.c         ****                     if(!cluster_num_next)
 4521               		.loc 1 1134 21 is_stmt 1 view .LVU925
1134:fat.c         ****                     if(!cluster_num_next)
 4522               		.loc 1 1134 40 is_stmt 0 view .LVU926
 4523 1272 41E0      		ldi r20,lo8(1)
 4524 1274 50E0      		ldi r21,0
 4525 1276 B801      		movw r22,r16
 4526 1278 EB81      		ldd r30,Y+3
 4527 127a FC81      		ldd r31,Y+4
 4528 127c 8081      		ld r24,Z
 4529 127e 9181      		ldd r25,Z+1
 4530               	.LVL343:
1134:fat.c         ****                     if(!cluster_num_next)
 4531               		.loc 1 1134 40 view .LVU927
 4532 1280 0E94 0000 		call fat_append_clusters
 4533               	.LVL344:
 4534 1284 8C01      		movw r16,r24
 4535               	.LVL345:
1135:fat.c         ****                         return 0;
 4536               		.loc 1 1135 21 is_stmt 1 view .LVU928
1135:fat.c         ****                         return 0;
 4537               		.loc 1 1135 23 is_stmt 0 view .LVU929
 4538 1286 892B      		or r24,r25
 4539 1288 01F4      		brne .+2
 4540 128a 00C0      		rjmp .L255
 4541               	.LVL346:
 4542               	.L254:
1135:fat.c         ****                         return 0;
 4543               		.loc 1 1135 23 view .LVU930
 4544 128c AB81      		ldd r26,Y+3
 4545 128e BC81      		ldd r27,Y+4
 4546 1290 8D91      		ld r24,X+
 4547 1292 9C91      		ld r25,X
1124:fat.c         ****             {
 4548               		.loc 1 1124 18 view .LVU931
 4549 1294 8414      		cp r8,r4
 4550 1296 9504      		cpc r9,r5
 4551 1298 A604      		cpc r10,r6
 4552 129a B704      		cpc r11,r7
 4553 129c 00F4      		brsh .L256
 4554 129e 00C0      		rjmp .L251
 4555               	.LVL347:
 4556               	.L263:
1124:fat.c         ****             {
 4557               		.loc 1 1124 18 view .LVU932
 4558 12a0 8C01      		movw r16,r24
 4559               	.LVL348:
1124:fat.c         ****             {
 4560               		.loc 1 1124 18 view .LVU933
 4561 12a2 00C0      		rjmp .L254
 4562               	.LVL349:
 4563               	.L264:
1124:fat.c         ****             {
 4564               		.loc 1 1124 18 view .LVU934
 4565               	.LBE87:
 4566               	.LBB88:
 4567               	.LBB85:
 4568 12a4 8C01      		movw r16,r24
 4569               	.LVL350:
1176:fat.c         ****         }
 4570               		.loc 1 1176 34 view .LVU935
 4571 12a6 F12C      		mov r15,__zero_reg__
 4572 12a8 E12C      		mov r14,__zero_reg__
 4573               	.LVL351:
 4574               	.L259:
1176:fat.c         ****         }
 4575               		.loc 1 1176 34 view .LVU936
 4576               	.LBE85:
1179:fat.c         **** 
 4577               		.loc 1 1179 9 is_stmt 1 view .LVU937
1179:fat.c         **** 
 4578               		.loc 1 1179 25 is_stmt 0 view .LVU938
 4579 12aa AB81      		ldd r26,Y+3
 4580 12ac BC81      		ldd r27,Y+4
 4581 12ae D296      		adiw r26,49+1
 4582 12b0 1C93      		st X,r17
 4583 12b2 0E93      		st -X,r16
 4584 12b4 D197      		sbiw r26,49
 4585               	.LBE88:
1181:fat.c         **** 
 4586               		.loc 1 1181 5 view .LVU939
 4587 12b6 A114      		cp r10,__zero_reg__
 4588 12b8 B104      		cpc r11,__zero_reg__
 4589 12ba 01F0      		breq .+2
 4590 12bc 00C0      		rjmp .L261
 4591 12be 00C0      		rjmp .L258
 4592               		.cfi_endproc
 4593               	.LFE14:
 4595               	.global	fat_resize_file
 4597               	fat_resize_file:
 4598               	.LVL352:
 4599               	.LFB16:
1303:fat.c         ****     if(!fd)
 4600               		.loc 1 1303 1 is_stmt 1 view -0
 4601               		.cfi_startproc
1303:fat.c         ****     if(!fd)
 4602               		.loc 1 1303 1 is_stmt 0 view .LVU941
 4603 12c0 2F92      		push r2
 4604               	.LCFI171:
 4605               		.cfi_def_cfa_offset 3
 4606               		.cfi_offset 2, -2
 4607 12c2 3F92      		push r3
 4608               	.LCFI172:
 4609               		.cfi_def_cfa_offset 4
 4610               		.cfi_offset 3, -3
 4611 12c4 4F92      		push r4
 4612               	.LCFI173:
 4613               		.cfi_def_cfa_offset 5
 4614               		.cfi_offset 4, -4
 4615 12c6 5F92      		push r5
 4616               	.LCFI174:
 4617               		.cfi_def_cfa_offset 6
 4618               		.cfi_offset 5, -5
 4619 12c8 6F92      		push r6
 4620               	.LCFI175:
 4621               		.cfi_def_cfa_offset 7
 4622               		.cfi_offset 6, -6
 4623 12ca 7F92      		push r7
 4624               	.LCFI176:
 4625               		.cfi_def_cfa_offset 8
 4626               		.cfi_offset 7, -7
 4627 12cc 8F92      		push r8
 4628               	.LCFI177:
 4629               		.cfi_def_cfa_offset 9
 4630               		.cfi_offset 8, -8
 4631 12ce 9F92      		push r9
 4632               	.LCFI178:
 4633               		.cfi_def_cfa_offset 10
 4634               		.cfi_offset 9, -9
 4635 12d0 AF92      		push r10
 4636               	.LCFI179:
 4637               		.cfi_def_cfa_offset 11
 4638               		.cfi_offset 10, -10
 4639 12d2 BF92      		push r11
 4640               	.LCFI180:
 4641               		.cfi_def_cfa_offset 12
 4642               		.cfi_offset 11, -11
 4643 12d4 CF92      		push r12
 4644               	.LCFI181:
 4645               		.cfi_def_cfa_offset 13
 4646               		.cfi_offset 12, -12
 4647 12d6 DF92      		push r13
 4648               	.LCFI182:
 4649               		.cfi_def_cfa_offset 14
 4650               		.cfi_offset 13, -13
 4651 12d8 EF92      		push r14
 4652               	.LCFI183:
 4653               		.cfi_def_cfa_offset 15
 4654               		.cfi_offset 14, -14
 4655 12da FF92      		push r15
 4656               	.LCFI184:
 4657               		.cfi_def_cfa_offset 16
 4658               		.cfi_offset 15, -15
 4659 12dc 0F93      		push r16
 4660               	.LCFI185:
 4661               		.cfi_def_cfa_offset 17
 4662               		.cfi_offset 16, -16
 4663 12de 1F93      		push r17
 4664               	.LCFI186:
 4665               		.cfi_def_cfa_offset 18
 4666               		.cfi_offset 17, -17
 4667 12e0 CF93      		push r28
 4668               	.LCFI187:
 4669               		.cfi_def_cfa_offset 19
 4670               		.cfi_offset 28, -18
 4671 12e2 DF93      		push r29
 4672               	.LCFI188:
 4673               		.cfi_def_cfa_offset 20
 4674               		.cfi_offset 29, -19
 4675 12e4 00D0      		rcall .
 4676               	.LCFI189:
 4677               		.cfi_def_cfa_offset 22
 4678 12e6 CDB7      		in r28,__SP_L__
 4679 12e8 DEB7      		in r29,__SP_H__
 4680               	.LCFI190:
 4681               		.cfi_def_cfa_register 28
 4682               	/* prologue: function */
 4683               	/* frame size = 2 */
 4684               	/* stack size = 20 */
 4685               	.L__stack_usage = 20
 4686 12ea 1C01      		movw r2,r24
 4687 12ec 4A01      		movw r8,r20
 4688 12ee 5B01      		movw r10,r22
1304:fat.c         ****         return 0;
 4689               		.loc 1 1304 5 is_stmt 1 view .LVU942
1304:fat.c         ****         return 0;
 4690               		.loc 1 1304 7 is_stmt 0 view .LVU943
 4691 12f0 0097      		sbiw r24,0
 4692 12f2 01F4      		brne .L283
 4693               	.LVL353:
 4694               	.L291:
1305:fat.c         **** 
 4695               		.loc 1 1305 16 view .LVU944
 4696 12f4 80E0      		ldi r24,0
 4697               	.L282:
 4698               	/* epilogue start */
1378:fat.c         **** #endif
 4699               		.loc 1 1378 1 view .LVU945
 4700 12f6 0F90      		pop __tmp_reg__
 4701 12f8 0F90      		pop __tmp_reg__
 4702 12fa DF91      		pop r29
 4703 12fc CF91      		pop r28
 4704 12fe 1F91      		pop r17
 4705 1300 0F91      		pop r16
 4706 1302 FF90      		pop r15
 4707 1304 EF90      		pop r14
 4708 1306 DF90      		pop r13
 4709 1308 CF90      		pop r12
 4710 130a BF90      		pop r11
 4711 130c AF90      		pop r10
 4712 130e 9F90      		pop r9
 4713 1310 8F90      		pop r8
 4714 1312 7F90      		pop r7
 4715 1314 6F90      		pop r6
 4716 1316 5F90      		pop r5
 4717 1318 4F90      		pop r4
 4718 131a 3F90      		pop r3
 4719 131c 2F90      		pop r2
 4720               	.LVL354:
1378:fat.c         **** #endif
 4721               		.loc 1 1378 1 view .LVU946
 4722 131e 0895      		ret
 4723               	.LVL355:
 4724               	.L283:
1307:fat.c         ****     uint16_t cluster_size = fd->fs->header.cluster_size;
 4725               		.loc 1 1307 5 is_stmt 1 view .LVU947
1307:fat.c         ****     uint16_t cluster_size = fd->fs->header.cluster_size;
 4726               		.loc 1 1307 15 is_stmt 0 view .LVU948
 4727 1320 DC01      		movw r26,r24
 4728 1322 9396      		adiw r26,35
 4729 1324 0D91      		ld r16,X+
 4730 1326 1C91      		ld r17,X
 4731               	.LVL356:
1308:fat.c         ****     uint32_t size_new = size;
 4732               		.loc 1 1308 5 is_stmt 1 view .LVU949
1309:fat.c         **** 
 4733               		.loc 1 1309 5 view .LVU950
1311:fat.c         ****     {
 4734               		.loc 1 1311 5 view .LVU951
1313:fat.c         ****             /* the file stays empty */
 4735               		.loc 1 1313 9 view .LVU952
1313:fat.c         ****             /* the file stays empty */
 4736               		.loc 1 1313 11 is_stmt 0 view .LVU953
 4737 1328 0115      		cp r16,__zero_reg__
 4738 132a 1105      		cpc r17,__zero_reg__
 4739 132c 01F4      		brne .L285
1313:fat.c         ****             /* the file stays empty */
 4740               		.loc 1 1313 29 discriminator 1 view .LVU954
 4741 132e 8114      		cp r8,__zero_reg__
 4742 1330 9104      		cpc r9,__zero_reg__
 4743 1332 A104      		cpc r10,__zero_reg__
 4744 1334 B104      		cpc r11,__zero_reg__
 4745 1336 01F4      		brne .+2
 4746 1338 00C0      		rjmp .L286
 4747               	.L285:
1308:fat.c         ****     uint32_t size_new = size;
 4748               		.loc 1 1308 14 view .LVU955
 4749 133a D101      		movw r26,r2
 4750 133c ED91      		ld r30,X+
 4751 133e FC91      		ld r31,X
 4752 1340 C088      		ldd r12,Z+16
 4753 1342 D188      		ldd r13,Z+17
 4754 1344 2401      		movw r4,r8
 4755 1346 3501      		movw r6,r10
1318:fat.c         ****         {
 4756               		.loc 1 1318 24 view .LVU956
 4757 1348 F12C      		mov r15,__zero_reg__
 4758 134a E12C      		mov r14,__zero_reg__
 4759               	.LVL357:
 4760               	.L287:
1318:fat.c         ****         {
 4761               		.loc 1 1318 24 view .LVU957
 4762 134c F101      		movw r30,r2
 4763 134e 8081      		ld r24,Z
 4764 1350 9181      		ldd r25,Z+1
1318:fat.c         ****         {
 4765               		.loc 1 1318 14 view .LVU958
 4766 1352 C414      		cp r12,r4
 4767 1354 D504      		cpc r13,r5
 4768 1356 E604      		cpc r14,r6
 4769 1358 F704      		cpc r15,r7
 4770 135a 00F4      		brsh .+2
 4771 135c 00C0      		rjmp .L289
1333:fat.c         ****         {
 4772               		.loc 1 1333 9 is_stmt 1 view .LVU959
1333:fat.c         ****         {
 4773               		.loc 1 1333 36 is_stmt 0 view .LVU960
 4774 135e 0115      		cp r16,__zero_reg__
 4775 1360 1105      		cpc r17,__zero_reg__
 4776 1362 01F4      		brne .L292
 4777               	.L288:
 4778               	.LBB94:
1338:fat.c         ****             cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
 4779               		.loc 1 1338 13 is_stmt 1 view .LVU961
 4780               	.LVL358:
1339:fat.c         ****             if(!cluster_new_chain)
 4781               		.loc 1 1339 13 view .LVU962
1338:fat.c         ****             cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
 4782               		.loc 1 1338 64 is_stmt 0 view .LVU963
 4783 1364 C701      		movw r24,r14
 4784 1366 B601      		movw r22,r12
 4785 1368 640D      		add r22,r4
 4786 136a 751D      		adc r23,r5
 4787 136c 861D      		adc r24,r6
 4788 136e 971D      		adc r25,r7
 4789 1370 6150      		subi r22,1
 4790 1372 7109      		sbc r23,__zero_reg__
 4791 1374 8109      		sbc r24,__zero_reg__
 4792 1376 9109      		sbc r25,__zero_reg__
1338:fat.c         ****             cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
 4793               		.loc 1 1338 69 view .LVU964
 4794 1378 A701      		movw r20,r14
 4795 137a 9601      		movw r18,r12
 4796 137c 0E94 0000 		call __udivmodsi4
1339:fat.c         ****             if(!cluster_new_chain)
 4797               		.loc 1 1339 43 view .LVU965
 4798 1380 A901      		movw r20,r18
 4799 1382 B801      		movw r22,r16
 4800 1384 D101      		movw r26,r2
 4801 1386 8D91      		ld r24,X+
 4802 1388 9C91      		ld r25,X
 4803 138a 0E94 0000 		call fat_append_clusters
 4804               	.LVL359:
1340:fat.c         ****                 return 0;
 4805               		.loc 1 1340 13 is_stmt 1 view .LVU966
1340:fat.c         ****                 return 0;
 4806               		.loc 1 1340 15 is_stmt 0 view .LVU967
 4807 138e 0097      		sbiw r24,0
 4808 1390 01F4      		brne .+2
 4809 1392 00C0      		rjmp .L291
1343:fat.c         ****             {
 4810               		.loc 1 1343 13 is_stmt 1 view .LVU968
1343:fat.c         ****             {
 4811               		.loc 1 1343 15 is_stmt 0 view .LVU969
 4812 1394 0115      		cp r16,__zero_reg__
 4813 1396 1105      		cpc r17,__zero_reg__
 4814 1398 01F4      		brne .L292
1345:fat.c         ****                 fd->dir_entry.cluster = cluster_num;
 4815               		.loc 1 1345 17 is_stmt 1 view .LVU970
 4816               	.LVL360:
1346:fat.c         ****             }
 4817               		.loc 1 1346 17 view .LVU971
1346:fat.c         ****             }
 4818               		.loc 1 1346 39 is_stmt 0 view .LVU972
 4819 139a F101      		movw r30,r2
 4820 139c 94A3      		std Z+36,r25
 4821 139e 83A3      		std Z+35,r24
 4822 13a0 8C01      		movw r16,r24
 4823               	.LVL361:
 4824               	.L292:
1346:fat.c         ****             }
 4825               		.loc 1 1346 39 view .LVU973
 4826               	.LBE94:
1351:fat.c         ****         if(size == 0)
 4827               		.loc 1 1351 9 is_stmt 1 view .LVU974
1351:fat.c         ****         if(size == 0)
 4828               		.loc 1 1351 33 is_stmt 0 view .LVU975
 4829 13a2 D101      		movw r26,r2
 4830 13a4 9596      		adiw r26,37
 4831 13a6 8D92      		st X+,r8
 4832 13a8 9D92      		st X+,r9
 4833 13aa AD92      		st X+,r10
 4834 13ac BC92      		st X,r11
 4835 13ae 9897      		sbiw r26,37+3
1352:fat.c         ****             fd->dir_entry.cluster = 0;
 4836               		.loc 1 1352 9 is_stmt 1 view .LVU976
1352:fat.c         ****             fd->dir_entry.cluster = 0;
 4837               		.loc 1 1352 11 is_stmt 0 view .LVU977
 4838 13b0 8114      		cp r8,__zero_reg__
 4839 13b2 9104      		cpc r9,__zero_reg__
 4840 13b4 A104      		cpc r10,__zero_reg__
 4841 13b6 B104      		cpc r11,__zero_reg__
 4842 13b8 01F4      		brne .L293
1353:fat.c         ****         if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
 4843               		.loc 1 1353 13 is_stmt 1 view .LVU978
1353:fat.c         ****         if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
 4844               		.loc 1 1353 35 is_stmt 0 view .LVU979
 4845 13ba 9496      		adiw r26,35+1
 4846 13bc 1C92      		st X,__zero_reg__
 4847 13be 1E92      		st -X,__zero_reg__
 4848 13c0 9397      		sbiw r26,35
 4849               	.L293:
1354:fat.c         ****             return 0;
 4850               		.loc 1 1354 9 is_stmt 1 view .LVU980
1354:fat.c         ****             return 0;
 4851               		.loc 1 1354 13 is_stmt 0 view .LVU981
 4852 13c2 F101      		movw r30,r2
 4853 13c4 8191      		ld r24,Z+
 4854 13c6 9191      		ld r25,Z+
 4855 13c8 BF01      		movw r22,r30
 4856 13ca 0E94 0000 		call fat_write_dir_entry
 4857               	.LVL362:
1354:fat.c         ****             return 0;
 4858               		.loc 1 1354 11 view .LVU982
 4859 13ce 8823      		tst r24
 4860 13d0 01F4      		brne .+2
 4861 13d2 00C0      		rjmp .L291
1357:fat.c         ****         {
 4862               		.loc 1 1357 9 is_stmt 1 view .LVU983
1357:fat.c         ****         {
 4863               		.loc 1 1357 11 is_stmt 0 view .LVU984
 4864 13d4 8114      		cp r8,__zero_reg__
 4865 13d6 9104      		cpc r9,__zero_reg__
 4866 13d8 A104      		cpc r10,__zero_reg__
 4867 13da B104      		cpc r11,__zero_reg__
 4868 13dc 01F4      		brne .L294
1360:fat.c         ****         }
 4869               		.loc 1 1360 13 is_stmt 1 view .LVU985
 4870 13de B801      		movw r22,r16
 4871 13e0 D101      		movw r26,r2
 4872 13e2 8D91      		ld r24,X+
 4873 13e4 9C91      		ld r25,X
 4874               	.LVL363:
 4875               	.L317:
 4876               	.LBB95:
 4877               	.LBB96:
 775:fat.c         ****     else
 4878               		.loc 1 775 16 is_stmt 0 view .LVU986
 4879 13e6 0E94 0000 		call fat_free_clusters
 4880               	.LVL364:
 4881               	.L286:
 775:fat.c         ****     else
 4882               		.loc 1 775 16 view .LVU987
 4883               	.LBE96:
 4884               	.LBE95:
1371:fat.c         ****     {
 4885               		.loc 1 1371 5 is_stmt 1 view .LVU988
1371:fat.c         ****     {
 4886               		.loc 1 1371 7 is_stmt 0 view .LVU989
 4887 13ea F101      		movw r30,r2
 4888 13ec 85A5      		ldd r24,Z+45
 4889 13ee 96A5      		ldd r25,Z+46
 4890 13f0 A7A5      		ldd r26,Z+47
 4891 13f2 B0A9      		ldd r27,Z+48
 4892 13f4 8816      		cp r8,r24
 4893 13f6 9906      		cpc r9,r25
 4894 13f8 AA06      		cpc r10,r26
 4895 13fa BB06      		cpc r11,r27
 4896 13fc 00F4      		brsh .L297
1373:fat.c         ****         fd->pos_cluster = 0;
 4897               		.loc 1 1373 9 is_stmt 1 view .LVU990
1373:fat.c         ****         fd->pos_cluster = 0;
 4898               		.loc 1 1373 17 is_stmt 0 view .LVU991
 4899 13fe 85A6      		std Z+45,r8
 4900 1400 96A6      		std Z+46,r9
 4901 1402 A7A6      		std Z+47,r10
 4902 1404 B0AA      		std Z+48,r11
1374:fat.c         ****     }
 4903               		.loc 1 1374 9 is_stmt 1 view .LVU992
1374:fat.c         ****     }
 4904               		.loc 1 1374 25 is_stmt 0 view .LVU993
 4905 1406 12AA      		std Z+50,__zero_reg__
 4906 1408 11AA      		std Z+49,__zero_reg__
 4907               	.L297:
1377:fat.c         **** }
 4908               		.loc 1 1377 12 view .LVU994
 4909 140a 81E0      		ldi r24,lo8(1)
 4910 140c 00C0      		rjmp .L282
 4911               	.LVL365:
 4912               	.L289:
 4913               	.LBB99:
1321:fat.c         ****             if(cluster_num_next)
 4914               		.loc 1 1321 13 is_stmt 1 view .LVU995
1321:fat.c         ****             if(cluster_num_next)
 4915               		.loc 1 1321 42 is_stmt 0 view .LVU996
 4916 140e B801      		movw r22,r16
 4917 1410 0E94 0000 		call fat_get_next_cluster
 4918               	.LVL366:
1322:fat.c         ****             {
 4919               		.loc 1 1322 13 is_stmt 1 view .LVU997
1322:fat.c         ****             {
 4920               		.loc 1 1322 15 is_stmt 0 view .LVU998
 4921 1414 0097      		sbiw r24,0
 4922 1416 01F4      		brne .+2
 4923 1418 00C0      		rjmp .L288
1324:fat.c         ****                 size_new -= cluster_size;
 4924               		.loc 1 1324 17 is_stmt 1 view .LVU999
 4925               	.LVL367:
1325:fat.c         ****             }
 4926               		.loc 1 1325 17 view .LVU1000
1325:fat.c         ****             }
 4927               		.loc 1 1325 26 is_stmt 0 view .LVU1001
 4928 141a 4C18      		sub r4,r12
 4929 141c 5D08      		sbc r5,r13
 4930 141e 6E08      		sbc r6,r14
 4931 1420 7F08      		sbc r7,r15
 4932               	.LVL368:
1325:fat.c         ****             }
 4933               		.loc 1 1325 26 view .LVU1002
 4934 1422 8C01      		movw r16,r24
 4935 1424 00C0      		rjmp .L287
 4936               	.LVL369:
 4937               	.L294:
1325:fat.c         ****             }
 4938               		.loc 1 1325 26 view .LVU1003
 4939               	.LBE99:
1362:fat.c         ****         {
 4940               		.loc 1 1362 14 is_stmt 1 view .LVU1004
1362:fat.c         ****         {
 4941               		.loc 1 1362 16 is_stmt 0 view .LVU1005
 4942 1426 C414      		cp r12,r4
 4943 1428 D504      		cpc r13,r5
 4944 142a E604      		cpc r14,r6
 4945 142c F704      		cpc r15,r7
 4946 142e 00F0      		brlo .L286
1365:fat.c         ****         }
 4947               		.loc 1 1365 13 is_stmt 1 view .LVU1006
 4948 1430 F101      		movw r30,r2
 4949 1432 E080      		ld r14,Z
 4950 1434 F180      		ldd r15,Z+1
 4951               	.LVL370:
 4952               	.LBB100:
 4953               	.LBI95:
 749:fat.c         **** {
 4954               		.loc 1 749 9 view .LVU1007
 4955               	.LBB98:
 751:fat.c         ****         return 0;
 4956               		.loc 1 751 5 view .LVU1008
 751:fat.c         ****         return 0;
 4957               		.loc 1 751 7 is_stmt 0 view .LVU1009
 4958 1436 E114      		cp r14,__zero_reg__
 4959 1438 F104      		cpc r15,__zero_reg__
 4960 143a 01F0      		breq .L286
 751:fat.c         ****         return 0;
 4961               		.loc 1 751 12 view .LVU1010
 4962 143c 0230      		cpi r16,2
 4963 143e 1105      		cpc r17,__zero_reg__
 4964 1440 00F0      		brlo .L286
 755:fat.c         **** 
 4965               		.loc 1 755 5 is_stmt 1 view .LVU1011
 755:fat.c         **** 
 4966               		.loc 1 755 34 is_stmt 0 view .LVU1012
 4967 1442 B801      		movw r22,r16
 4968 1444 C701      		movw r24,r14
 4969 1446 0E94 0000 		call fat_get_next_cluster
 4970               	.LVL371:
 4971 144a 6C01      		movw r12,r24
 4972               	.LVL372:
 4973               	.LBB97:
 768:fat.c         ****         if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat
 4974               		.loc 1 768 9 is_stmt 1 view .LVU1013
 768:fat.c         ****         if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat
 4975               		.loc 1 768 18 is_stmt 0 view .LVU1014
 4976 144c 8FEF      		ldi r24,lo8(-1)
 4977 144e 9FEF      		ldi r25,lo8(-1)
 4978 1450 9A83      		std Y+2,r25
 4979 1452 8983      		std Y+1,r24
 769:fat.c         ****             return 0;
 4980               		.loc 1 769 9 is_stmt 1 view .LVU1015
 769:fat.c         ****             return 0;
 4981               		.loc 1 769 88 is_stmt 0 view .LVU1016
 4982 1454 30E0      		ldi r19,0
 4983 1456 20E0      		ldi r18,0
 4984 1458 C901      		movw r24,r18
 4985 145a B801      		movw r22,r16
 4986 145c 660F      		lsl r22
 4987 145e 771F      		rol r23
 4988 1460 881F      		rol r24
 4989 1462 991F      		rol r25
 769:fat.c         ****             return 0;
 4990               		.loc 1 769 13 view .LVU1017
 4991 1464 D701      		movw r26,r14
 4992 1466 1696      		adiw r26,6
 4993 1468 0D91      		ld r16,X+
 4994 146a 1D91      		ld r17,X+
 4995 146c 2D91      		ld r18,X+
 4996 146e 3C91      		ld r19,X
 4997 1470 1997      		sbiw r26,6+3
 4998               	.LVL373:
 769:fat.c         ****             return 0;
 4999               		.loc 1 769 13 view .LVU1018
 5000 1472 600F      		add r22,r16
 5001 1474 711F      		adc r23,r17
 5002 1476 821F      		adc r24,r18
 5003 1478 931F      		adc r25,r19
 769:fat.c         ****             return 0;
 5004               		.loc 1 769 26 view .LVU1019
 5005 147a ED91      		ld r30,X+
 5006 147c FC91      		ld r31,X
 769:fat.c         ****             return 0;
 5007               		.loc 1 769 13 view .LVU1020
 5008 147e 0480      		ldd __tmp_reg__,Z+4
 5009 1480 F581      		ldd r31,Z+5
 5010 1482 E02D      		mov r30,__tmp_reg__
 5011 1484 22E0      		ldi r18,lo8(2)
 5012 1486 30E0      		ldi r19,0
 5013 1488 AE01      		movw r20,r28
 5014 148a 4F5F      		subi r20,-1
 5015 148c 5F4F      		sbci r21,-1
 5016 148e 0995      		icall
 5017               	.LVL374:
 769:fat.c         ****             return 0;
 5018               		.loc 1 769 11 view .LVU1021
 5019 1490 8823      		tst r24
 5020 1492 01F4      		brne .+2
 5021 1494 00C0      		rjmp .L286
 5022               	.LBE97:
 774:fat.c         ****         return fat_free_clusters(fs, cluster_num_next);
 5023               		.loc 1 774 5 is_stmt 1 view .LVU1022
 774:fat.c         ****         return fat_free_clusters(fs, cluster_num_next);
 5024               		.loc 1 774 7 is_stmt 0 view .LVU1023
 5025 1496 C114      		cp r12,__zero_reg__
 5026 1498 D104      		cpc r13,__zero_reg__
 5027 149a 01F4      		brne .+2
 5028 149c 00C0      		rjmp .L286
 775:fat.c         ****     else
 5029               		.loc 1 775 9 is_stmt 1 view .LVU1024
 775:fat.c         ****     else
 5030               		.loc 1 775 16 is_stmt 0 view .LVU1025
 5031 149e B601      		movw r22,r12
 5032 14a0 C701      		movw r24,r14
 5033 14a2 00C0      		rjmp .L317
 5034               	.LBE98:
 5035               	.LBE100:
 5036               		.cfi_endproc
 5037               	.LFE16:
 5039               	.global	fat_seek_file
 5041               	fat_seek_file:
 5042               	.LVL375:
 5043               	.LFB15:
1248:fat.c         ****     if(!fd || !offset)
 5044               		.loc 1 1248 1 is_stmt 1 view -0
 5045               		.cfi_startproc
1248:fat.c         ****     if(!fd || !offset)
 5046               		.loc 1 1248 1 is_stmt 0 view .LVU1027
 5047 14a4 CF92      		push r12
 5048               	.LCFI191:
 5049               		.cfi_def_cfa_offset 3
 5050               		.cfi_offset 12, -2
 5051 14a6 DF92      		push r13
 5052               	.LCFI192:
 5053               		.cfi_def_cfa_offset 4
 5054               		.cfi_offset 13, -3
 5055 14a8 EF92      		push r14
 5056               	.LCFI193:
 5057               		.cfi_def_cfa_offset 5
 5058               		.cfi_offset 14, -4
 5059 14aa FF92      		push r15
 5060               	.LCFI194:
 5061               		.cfi_def_cfa_offset 6
 5062               		.cfi_offset 15, -5
 5063 14ac 0F93      		push r16
 5064               	.LCFI195:
 5065               		.cfi_def_cfa_offset 7
 5066               		.cfi_offset 16, -6
 5067 14ae 1F93      		push r17
 5068               	.LCFI196:
 5069               		.cfi_def_cfa_offset 8
 5070               		.cfi_offset 17, -7
 5071 14b0 CF93      		push r28
 5072               	.LCFI197:
 5073               		.cfi_def_cfa_offset 9
 5074               		.cfi_offset 28, -8
 5075 14b2 DF93      		push r29
 5076               	.LCFI198:
 5077               		.cfi_def_cfa_offset 10
 5078               		.cfi_offset 29, -9
 5079               	/* prologue: function */
 5080               	/* frame size = 0 */
 5081               	/* stack size = 8 */
 5082               	.L__stack_usage = 8
 5083 14b4 EC01      		movw r28,r24
 5084 14b6 8B01      		movw r16,r22
1249:fat.c         ****         return 0;
 5085               		.loc 1 1249 5 is_stmt 1 view .LVU1028
1249:fat.c         ****         return 0;
 5086               		.loc 1 1249 7 is_stmt 0 view .LVU1029
 5087 14b8 892B      		or r24,r25
 5088 14ba 01F4      		brne .L319
 5089               	.LVL376:
 5090               	.L335:
1265:fat.c         ****     }
 5091               		.loc 1 1265 20 view .LVU1030
 5092 14bc 80E0      		ldi r24,0
 5093               	.L318:
 5094               	/* epilogue start */
1280:fat.c         **** 
 5095               		.loc 1 1280 1 view .LVU1031
 5096 14be DF91      		pop r29
 5097 14c0 CF91      		pop r28
 5098               	.LVL377:
1280:fat.c         **** 
 5099               		.loc 1 1280 1 view .LVU1032
 5100 14c2 1F91      		pop r17
 5101 14c4 0F91      		pop r16
 5102               	.LVL378:
1280:fat.c         **** 
 5103               		.loc 1 1280 1 view .LVU1033
 5104 14c6 FF90      		pop r15
 5105 14c8 EF90      		pop r14
 5106 14ca DF90      		pop r13
 5107 14cc CF90      		pop r12
 5108 14ce 0895      		ret
 5109               	.LVL379:
 5110               	.L319:
1249:fat.c         ****         return 0;
 5111               		.loc 1 1249 12 discriminator 1 view .LVU1034
 5112 14d0 6115      		cp r22,__zero_reg__
 5113 14d2 7105      		cpc r23,__zero_reg__
 5114 14d4 01F0      		breq .L335
1252:fat.c         ****     switch(whence)
 5115               		.loc 1 1252 5 is_stmt 1 view .LVU1035
 5116               	.LVL380:
1253:fat.c         ****     {
 5117               		.loc 1 1253 5 view .LVU1036
 5118 14d6 4130      		cpi r20,lo8(1)
 5119 14d8 01F0      		breq .L322
 5120 14da 4423      		tst r20
 5121 14dc 01F0      		breq .L323
 5122 14de 4230      		cpi r20,lo8(2)
 5123 14e0 01F4      		brne .L335
1262:fat.c         ****             break;
 5124               		.loc 1 1262 13 view .LVU1037
1262:fat.c         ****             break;
 5125               		.loc 1 1262 21 is_stmt 0 view .LVU1038
 5126 14e2 CDA0      		ldd r12,Y+37
 5127 14e4 DEA0      		ldd r13,Y+38
 5128 14e6 EFA0      		ldd r14,Y+39
 5129 14e8 F8A4      		ldd r15,Y+40
 5130 14ea 00C0      		rjmp .L334
 5131               	.L323:
1256:fat.c         ****             break;
 5132               		.loc 1 1256 13 is_stmt 1 view .LVU1039
1256:fat.c         ****             break;
 5133               		.loc 1 1256 21 is_stmt 0 view .LVU1040
 5134 14ec FB01      		movw r30,r22
 5135 14ee C080      		ld r12,Z
 5136 14f0 D180      		ldd r13,Z+1
 5137 14f2 E280      		ldd r14,Z+2
 5138 14f4 F380      		ldd r15,Z+3
 5139               	.LVL381:
1257:fat.c         ****         case FAT_SEEK_CUR:
 5140               		.loc 1 1257 13 is_stmt 1 view .LVU1041
 5141               	.L325:
1268:fat.c         **** #if FAT_WRITE_SUPPORT
 5142               		.loc 1 1268 5 view .LVU1042
1268:fat.c         **** #if FAT_WRITE_SUPPORT
 5143               		.loc 1 1268 7 is_stmt 0 view .LVU1043
 5144 14f6 8DA1      		ldd r24,Y+37
 5145 14f8 9EA1      		ldd r25,Y+38
 5146 14fa AFA1      		ldd r26,Y+39
 5147 14fc B8A5      		ldd r27,Y+40
 5148 14fe 8C15      		cp r24,r12
 5149 1500 9D05      		cpc r25,r13
 5150 1502 AE05      		cpc r26,r14
 5151 1504 BF05      		cpc r27,r15
 5152 1506 00F0      		brlo .L326
 5153               	.LVL382:
 5154               	.L327:
1275:fat.c         ****     fd->pos_cluster = 0;
 5155               		.loc 1 1275 5 is_stmt 1 view .LVU1044
1275:fat.c         ****     fd->pos_cluster = 0;
 5156               		.loc 1 1275 13 is_stmt 0 view .LVU1045
 5157 1508 CDA6      		std Y+45,r12
 5158 150a DEA6      		std Y+46,r13
 5159 150c EFA6      		std Y+47,r14
 5160 150e F8AA      		std Y+48,r15
1276:fat.c         **** 
 5161               		.loc 1 1276 5 is_stmt 1 view .LVU1046
1276:fat.c         **** 
 5162               		.loc 1 1276 21 is_stmt 0 view .LVU1047
 5163 1510 1AAA      		std Y+50,__zero_reg__
 5164 1512 19AA      		std Y+49,__zero_reg__
1278:fat.c         ****     return 1;
 5165               		.loc 1 1278 5 is_stmt 1 view .LVU1048
1278:fat.c         ****     return 1;
 5166               		.loc 1 1278 13 is_stmt 0 view .LVU1049
 5167 1514 F801      		movw r30,r16
 5168 1516 C082      		st Z,r12
 5169 1518 D182      		std Z+1,r13
 5170 151a E282      		std Z+2,r14
 5171 151c F382      		std Z+3,r15
1279:fat.c         **** }
 5172               		.loc 1 1279 5 is_stmt 1 view .LVU1050
1279:fat.c         **** }
 5173               		.loc 1 1279 12 is_stmt 0 view .LVU1051
 5174 151e 81E0      		ldi r24,lo8(1)
 5175 1520 00C0      		rjmp .L318
 5176               	.LVL383:
 5177               	.L322:
1252:fat.c         ****     switch(whence)
 5178               		.loc 1 1252 14 view .LVU1052
 5179 1522 CDA4      		ldd r12,Y+45
 5180 1524 DEA4      		ldd r13,Y+46
 5181 1526 EFA4      		ldd r14,Y+47
 5182 1528 F8A8      		ldd r15,Y+48
1259:fat.c         ****             break;
 5183               		.loc 1 1259 13 is_stmt 1 view .LVU1053
 5184               	.L334:
1262:fat.c         ****             break;
 5185               		.loc 1 1262 21 is_stmt 0 view .LVU1054
 5186 152a F801      		movw r30,r16
 5187 152c 8081      		ld r24,Z
 5188 152e 9181      		ldd r25,Z+1
 5189 1530 A281      		ldd r26,Z+2
 5190 1532 B381      		ldd r27,Z+3
 5191               	.LVL384:
1262:fat.c         ****             break;
 5192               		.loc 1 1262 21 view .LVU1055
 5193 1534 C80E      		add r12,r24
 5194 1536 D91E      		adc r13,r25
 5195 1538 EA1E      		adc r14,r26
 5196 153a FB1E      		adc r15,r27
 5197               	.LVL385:
1263:fat.c         ****         default:
 5198               		.loc 1 1263 13 is_stmt 1 view .LVU1056
 5199 153c 00C0      		rjmp .L325
 5200               	.L326:
1270:fat.c         **** #endif
 5201               		.loc 1 1270 12 is_stmt 0 view .LVU1057
 5202 153e B701      		movw r22,r14
 5203 1540 A601      		movw r20,r12
 5204               	.LVL386:
1270:fat.c         **** #endif
 5205               		.loc 1 1270 12 view .LVU1058
 5206 1542 CE01      		movw r24,r28
 5207 1544 0E94 0000 		call fat_resize_file
 5208               	.LVL387:
1270:fat.c         **** #endif
 5209               		.loc 1 1270 8 view .LVU1059
 5210 1548 8111      		cpse r24,__zero_reg__
 5211 154a 00C0      		rjmp .L327
 5212 154c 00C0      		rjmp .L335
 5213               		.cfi_endproc
 5214               	.LFE15:
 5216               	.global	fat_open_dir
 5218               	fat_open_dir:
 5219               	.LVL388:
 5220               	.LFB17:
1391:fat.c         ****     if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
 5221               		.loc 1 1391 1 is_stmt 1 view -0
 5222               		.cfi_startproc
1391:fat.c         ****     if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
 5223               		.loc 1 1391 1 is_stmt 0 view .LVU1061
 5224 154e CF93      		push r28
 5225               	.LCFI199:
 5226               		.cfi_def_cfa_offset 3
 5227               		.cfi_offset 28, -2
 5228 1550 DF93      		push r29
 5229               	.LCFI200:
 5230               		.cfi_def_cfa_offset 4
 5231               		.cfi_offset 29, -3
 5232               	/* prologue: function */
 5233               	/* frame size = 0 */
 5234               	/* stack size = 2 */
 5235               	.L__stack_usage = 2
1392:fat.c         ****         return 0;
 5236               		.loc 1 1392 5 is_stmt 1 view .LVU1062
1392:fat.c         ****         return 0;
 5237               		.loc 1 1392 7 is_stmt 0 view .LVU1063
 5238 1552 0097      		sbiw r24,0
 5239 1554 01F0      		breq .L337
1392:fat.c         ****         return 0;
 5240               		.loc 1 1392 12 discriminator 1 view .LVU1064
 5241 1556 6115      		cp r22,__zero_reg__
 5242 1558 7105      		cpc r23,__zero_reg__
 5243 155a 01F0      		breq .L342
1392:fat.c         ****         return 0;
 5244               		.loc 1 1392 26 discriminator 2 view .LVU1065
 5245 155c FB01      		movw r30,r22
 5246 155e 20A1      		ldd r18,Z+32
 5247 1560 24FF      		sbrs r18,4
 5248 1562 00C0      		rjmp .L342
 5249               	.LVL389:
 5250               	.LBB103:
 5251               	.LBI103:
1390:fat.c         **** {
 5252               		.loc 1 1390 24 is_stmt 1 view .LVU1066
 5253               	.LBB104:
1404:fat.c         ****             break;
 5254               		.loc 1 1404 9 view .LVU1067
1404:fat.c         ****             break;
 5255               		.loc 1 1404 11 is_stmt 0 view .LVU1068
 5256 1564 2091 0000 		lds r18,fat_dir_handles
 5257 1568 3091 0000 		lds r19,fat_dir_handles+1
 5258 156c 232B      		or r18,r19
 5259 156e 01F0      		breq .L341
1407:fat.c         ****     }
 5260               		.loc 1 1407 9 is_stmt 1 view .LVU1069
 5261               	.LVL390:
1404:fat.c         ****             break;
 5262               		.loc 1 1404 9 view .LVU1070
1404:fat.c         ****             break;
 5263               		.loc 1 1404 11 is_stmt 0 view .LVU1071
 5264 1570 2091 0000 		lds r18,fat_dir_handles+49
 5265 1574 3091 0000 		lds r19,fat_dir_handles+49+1
1407:fat.c         ****     }
 5266               		.loc 1 1407 9 view .LVU1072
 5267 1578 C0E0      		ldi r28,lo8(fat_dir_handles+49)
 5268 157a D0E0      		ldi r29,hi8(fat_dir_handles+49)
 5269               	.LVL391:
1404:fat.c         ****             break;
 5270               		.loc 1 1404 11 view .LVU1073
 5271 157c 232B      		or r18,r19
 5272 157e 01F0      		breq .L338
 5273               	.LVL392:
 5274               	.L342:
1404:fat.c         ****             break;
 5275               		.loc 1 1404 11 view .LVU1074
 5276               	.LBE104:
 5277               	.LBE103:
1393:fat.c         **** 
 5278               		.loc 1 1393 16 view .LVU1075
 5279 1580 90E0      		ldi r25,0
 5280 1582 80E0      		ldi r24,0
 5281               	.LVL393:
1393:fat.c         **** 
 5282               		.loc 1 1393 16 view .LVU1076
 5283 1584 00C0      		rjmp .L337
 5284               	.LVL394:
 5285               	.L341:
 5286               	.LBB106:
 5287               	.LBB105:
1400:fat.c         ****     uint8_t i;
 5288               		.loc 1 1400 28 view .LVU1077
 5289 1586 C0E0      		ldi r28,lo8(fat_dir_handles)
 5290 1588 D0E0      		ldi r29,hi8(fat_dir_handles)
 5291               	.LVL395:
 5292               	.L338:
1413:fat.c         ****     dd->fs = fs;
 5293               		.loc 1 1413 5 is_stmt 1 view .LVU1078
 5294 158a DE01      		movw r26,r28
 5295 158c 1296      		adiw r26,2
 5296 158e 2BE2      		ldi r18,lo8(43)
 5297 1590 FB01      		movw r30,r22
 5298               		0:
 5299 1592 0190      		ld r0,Z+
 5300 1594 0D92      		st X+,r0
 5301 1596 2A95      		dec r18
 5302 1598 01F4      		brne 0b
1414:fat.c         ****     dd->entry_cluster = dir_entry->cluster;
 5303               		.loc 1 1414 5 view .LVU1079
1414:fat.c         ****     dd->entry_cluster = dir_entry->cluster;
 5304               		.loc 1 1414 12 is_stmt 0 view .LVU1080
 5305 159a 9983      		std Y+1,r25
 5306 159c 8883      		st Y,r24
1415:fat.c         ****     dd->entry_offset = 0;
 5307               		.loc 1 1415 5 is_stmt 1 view .LVU1081
1415:fat.c         ****     dd->entry_offset = 0;
 5308               		.loc 1 1415 23 is_stmt 0 view .LVU1082
 5309 159e FB01      		movw r30,r22
 5310 15a0 81A1      		ldd r24,Z+33
 5311 15a2 92A1      		ldd r25,Z+34
 5312               	.LVL396:
1415:fat.c         ****     dd->entry_offset = 0;
 5313               		.loc 1 1415 23 view .LVU1083
 5314 15a4 9EA7      		std Y+46,r25
 5315 15a6 8DA7      		std Y+45,r24
1416:fat.c         **** 
 5316               		.loc 1 1416 5 is_stmt 1 view .LVU1084
1416:fat.c         **** 
 5317               		.loc 1 1416 22 is_stmt 0 view .LVU1085
 5318 15a8 18AA      		std Y+48,__zero_reg__
 5319 15aa 1FA6      		std Y+47,__zero_reg__
1418:fat.c         **** }
 5320               		.loc 1 1418 5 is_stmt 1 view .LVU1086
1416:fat.c         **** 
 5321               		.loc 1 1416 22 is_stmt 0 view .LVU1087
 5322 15ac CE01      		movw r24,r28
 5323               	.LVL397:
 5324               	.L337:
 5325               	/* epilogue start */
1416:fat.c         **** 
 5326               		.loc 1 1416 22 view .LVU1088
 5327               	.LBE105:
 5328               	.LBE106:
1419:fat.c         **** 
 5329               		.loc 1 1419 1 view .LVU1089
 5330 15ae DF91      		pop r29
 5331 15b0 CF91      		pop r28
 5332 15b2 0895      		ret
 5333               		.cfi_endproc
 5334               	.LFE17:
 5336               	.global	fat_close_dir
 5338               	fat_close_dir:
 5339               	.LVL398:
 5340               	.LFB18:
1433:fat.c         ****     if(dd)
 5341               		.loc 1 1433 1 is_stmt 1 view -0
 5342               		.cfi_startproc
 5343               	/* prologue: function */
 5344               	/* frame size = 0 */
 5345               	/* stack size = 0 */
 5346               	.L__stack_usage = 0
1434:fat.c         **** #if USE_DYNAMIC_MEMORY
 5347               		.loc 1 1434 5 view .LVU1091
1434:fat.c         **** #if USE_DYNAMIC_MEMORY
 5348               		.loc 1 1434 7 is_stmt 0 view .LVU1092
 5349 15b4 0097      		sbiw r24,0
 5350 15b6 01F0      		breq .L346
1438:fat.c         **** #endif
 5351               		.loc 1 1438 9 is_stmt 1 view .LVU1093
1438:fat.c         **** #endif
 5352               		.loc 1 1438 16 is_stmt 0 view .LVU1094
 5353 15b8 FC01      		movw r30,r24
 5354 15ba 1182      		std Z+1,__zero_reg__
 5355 15bc 1082      		st Z,__zero_reg__
 5356               	.L346:
 5357               	/* epilogue start */
1440:fat.c         **** 
 5358               		.loc 1 1440 1 view .LVU1095
 5359 15be 0895      		ret
 5360               		.cfi_endproc
 5361               	.LFE18:
 5363               	.global	fat_reset_dir
 5365               	fat_reset_dir:
 5366               	.LVL399:
 5367               	.LFB20:
1565:fat.c         ****     if(!dd)
 5368               		.loc 1 1565 1 is_stmt 1 view -0
 5369               		.cfi_startproc
 5370               	/* prologue: function */
 5371               	/* frame size = 0 */
 5372               	/* stack size = 0 */
 5373               	.L__stack_usage = 0
1565:fat.c         ****     if(!dd)
 5374               		.loc 1 1565 1 is_stmt 0 view .LVU1097
 5375 15c0 FC01      		movw r30,r24
1566:fat.c         ****         return 0;
 5376               		.loc 1 1566 5 is_stmt 1 view .LVU1098
1566:fat.c         ****         return 0;
 5377               		.loc 1 1566 7 is_stmt 0 view .LVU1099
 5378 15c2 892B      		or r24,r25
 5379 15c4 01F0      		breq .L353
1569:fat.c         ****     dd->entry_offset = 0;
 5380               		.loc 1 1569 5 is_stmt 1 view .LVU1100
1569:fat.c         ****     dd->entry_offset = 0;
 5381               		.loc 1 1569 23 is_stmt 0 view .LVU1101
 5382 15c6 83A1      		ldd r24,Z+35
 5383 15c8 94A1      		ldd r25,Z+36
 5384               	.LVL400:
1569:fat.c         ****     dd->entry_offset = 0;
 5385               		.loc 1 1569 23 view .LVU1102
 5386 15ca 96A7      		std Z+46,r25
 5387 15cc 85A7      		std Z+45,r24
1570:fat.c         ****     return 1;
 5388               		.loc 1 1570 5 is_stmt 1 view .LVU1103
1570:fat.c         ****     return 1;
 5389               		.loc 1 1570 22 is_stmt 0 view .LVU1104
 5390 15ce 10AA      		std Z+48,__zero_reg__
 5391 15d0 17A6      		std Z+47,__zero_reg__
1571:fat.c         **** }
 5392               		.loc 1 1571 5 is_stmt 1 view .LVU1105
1571:fat.c         **** }
 5393               		.loc 1 1571 12 is_stmt 0 view .LVU1106
 5394 15d2 81E0      		ldi r24,lo8(1)
 5395 15d4 0895      		ret
 5396               	.LVL401:
 5397               	.L353:
1567:fat.c         **** 
 5398               		.loc 1 1567 16 view .LVU1107
 5399 15d6 80E0      		ldi r24,0
 5400               	.LVL402:
 5401               	/* epilogue start */
1572:fat.c         **** 
 5402               		.loc 1 1572 1 view .LVU1108
 5403 15d8 0895      		ret
 5404               		.cfi_endproc
 5405               	.LFE20:
 5407               	.global	fat_read_dir
 5409               	fat_read_dir:
 5410               	.LVL403:
 5411               	.LFB19:
1452:fat.c         ****     if(!dd || !dir_entry)
 5412               		.loc 1 1452 1 is_stmt 1 view -0
 5413               		.cfi_startproc
1452:fat.c         ****     if(!dd || !dir_entry)
 5414               		.loc 1 1452 1 is_stmt 0 view .LVU1110
 5415 15da 2F92      		push r2
 5416               	.LCFI201:
 5417               		.cfi_def_cfa_offset 3
 5418               		.cfi_offset 2, -2
 5419 15dc 3F92      		push r3
 5420               	.LCFI202:
 5421               		.cfi_def_cfa_offset 4
 5422               		.cfi_offset 3, -3
 5423 15de 4F92      		push r4
 5424               	.LCFI203:
 5425               		.cfi_def_cfa_offset 5
 5426               		.cfi_offset 4, -4
 5427 15e0 5F92      		push r5
 5428               	.LCFI204:
 5429               		.cfi_def_cfa_offset 6
 5430               		.cfi_offset 5, -5
 5431 15e2 6F92      		push r6
 5432               	.LCFI205:
 5433               		.cfi_def_cfa_offset 7
 5434               		.cfi_offset 6, -6
 5435 15e4 7F92      		push r7
 5436               	.LCFI206:
 5437               		.cfi_def_cfa_offset 8
 5438               		.cfi_offset 7, -7
 5439 15e6 8F92      		push r8
 5440               	.LCFI207:
 5441               		.cfi_def_cfa_offset 9
 5442               		.cfi_offset 8, -8
 5443 15e8 9F92      		push r9
 5444               	.LCFI208:
 5445               		.cfi_def_cfa_offset 10
 5446               		.cfi_offset 9, -9
 5447 15ea AF92      		push r10
 5448               	.LCFI209:
 5449               		.cfi_def_cfa_offset 11
 5450               		.cfi_offset 10, -10
 5451 15ec BF92      		push r11
 5452               	.LCFI210:
 5453               		.cfi_def_cfa_offset 12
 5454               		.cfi_offset 11, -11
 5455 15ee CF92      		push r12
 5456               	.LCFI211:
 5457               		.cfi_def_cfa_offset 13
 5458               		.cfi_offset 12, -12
 5459 15f0 DF92      		push r13
 5460               	.LCFI212:
 5461               		.cfi_def_cfa_offset 14
 5462               		.cfi_offset 13, -13
 5463 15f2 EF92      		push r14
 5464               	.LCFI213:
 5465               		.cfi_def_cfa_offset 15
 5466               		.cfi_offset 14, -14
 5467 15f4 FF92      		push r15
 5468               	.LCFI214:
 5469               		.cfi_def_cfa_offset 16
 5470               		.cfi_offset 15, -15
 5471 15f6 0F93      		push r16
 5472               	.LCFI215:
 5473               		.cfi_def_cfa_offset 17
 5474               		.cfi_offset 16, -16
 5475 15f8 1F93      		push r17
 5476               	.LCFI216:
 5477               		.cfi_def_cfa_offset 18
 5478               		.cfi_offset 17, -17
 5479 15fa CF93      		push r28
 5480               	.LCFI217:
 5481               		.cfi_def_cfa_offset 19
 5482               		.cfi_offset 28, -18
 5483 15fc DF93      		push r29
 5484               	.LCFI218:
 5485               		.cfi_def_cfa_offset 20
 5486               		.cfi_offset 29, -19
 5487 15fe CDB7      		in r28,__SP_L__
 5488 1600 DEB7      		in r29,__SP_H__
 5489               	.LCFI219:
 5490               		.cfi_def_cfa_register 28
 5491 1602 A697      		sbiw r28,38
 5492               	.LCFI220:
 5493               		.cfi_def_cfa_offset 58
 5494 1604 0FB6      		in __tmp_reg__,__SREG__
 5495 1606 F894      		cli
 5496 1608 DEBF      		out __SP_H__,r29
 5497 160a 0FBE      		out __SREG__,__tmp_reg__
 5498 160c CDBF      		out __SP_L__,r28
 5499               	/* prologue: function */
 5500               	/* frame size = 38 */
 5501               	/* stack size = 56 */
 5502               	.L__stack_usage = 56
 5503 160e 5C01      		movw r10,r24
1453:fat.c         ****         return 0;
 5504               		.loc 1 1453 5 is_stmt 1 view .LVU1111
1453:fat.c         ****         return 0;
 5505               		.loc 1 1453 7 is_stmt 0 view .LVU1112
 5506 1610 0097      		sbiw r24,0
 5507 1612 01F0      		breq .L367
1453:fat.c         ****         return 0;
 5508               		.loc 1 1453 12 discriminator 1 view .LVU1113
 5509 1614 6115      		cp r22,__zero_reg__
 5510 1616 7105      		cpc r23,__zero_reg__
 5511 1618 01F0      		breq .L367
 5512               	.LVL404:
 5513               	.LBB110:
 5514               	.LBI110:
1451:fat.c         **** {
 5515               		.loc 1 1451 9 is_stmt 1 view .LVU1114
 5516               	.LBB111:
1457:fat.c         ****     const struct fat_header_struct* header = &fs->header;
 5517               		.loc 1 1457 5 view .LVU1115
1457:fat.c         ****     const struct fat_header_struct* header = &fs->header;
 5518               		.loc 1 1457 27 is_stmt 0 view .LVU1116
 5519 161a DC01      		movw r26,r24
 5520 161c 4D90      		ld r4,X+
 5521 161e 5C90      		ld r5,X
 5522 1620 1197      		sbiw r26,1
 5523               	.LVL405:
1458:fat.c         ****     uint16_t cluster_size = header->cluster_size;
 5524               		.loc 1 1458 5 is_stmt 1 view .LVU1117
1459:fat.c         ****     cluster_t cluster_num = dd->entry_cluster;
 5525               		.loc 1 1459 5 view .LVU1118
1459:fat.c         ****     cluster_t cluster_num = dd->entry_cluster;
 5526               		.loc 1 1459 14 is_stmt 0 view .LVU1119
 5527 1622 F201      		movw r30,r4
 5528 1624 2088      		ldd r2,Z+16
 5529 1626 3188      		ldd r3,Z+17
 5530               	.LVL406:
1460:fat.c         ****     uint16_t cluster_offset = dd->entry_offset;
 5531               		.loc 1 1460 5 is_stmt 1 view .LVU1120
1461:fat.c         ****     struct fat_read_dir_callback_arg arg;
 5532               		.loc 1 1461 5 view .LVU1121
1461:fat.c         ****     struct fat_read_dir_callback_arg arg;
 5533               		.loc 1 1461 14 is_stmt 0 view .LVU1122
 5534 1628 9F96      		adiw r26,47
 5535 162a 8D91      		ld r24,X+
 5536 162c 9C91      		ld r25,X
 5537 162e D097      		sbiw r26,47+1
 5538               	.LVL407:
1462:fat.c         **** 
 5539               		.loc 1 1462 5 is_stmt 1 view .LVU1123
1464:fat.c         ****     {
 5540               		.loc 1 1464 5 view .LVU1124
1464:fat.c         ****     {
 5541               		.loc 1 1464 7 is_stmt 0 view .LVU1125
 5542 1630 8215      		cp r24,r2
 5543 1632 9305      		cpc r25,r3
 5544 1634 00F0      		brlo .L356
 5545               	.LVL408:
 5546               	.L363:
1471:fat.c         ****         return 0;
 5547               		.loc 1 1471 9 is_stmt 1 view .LVU1126
 5548 1636 C501      		movw r24,r10
 5549 1638 0E94 0000 		call fat_reset_dir
 5550               	.LVL409:
1472:fat.c         ****     }
 5551               		.loc 1 1472 9 view .LVU1127
 5552               	.L367:
1472:fat.c         ****     }
 5553               		.loc 1 1472 9 is_stmt 0 view .LVU1128
 5554               	.LBE111:
 5555               	.LBE110:
1454:fat.c         **** 
 5556               		.loc 1 1454 16 view .LVU1129
 5557 163c 80E0      		ldi r24,0
 5558 163e 00C0      		rjmp .L354
 5559               	.LVL410:
 5560               	.L356:
 5561               	.LBB117:
 5562               	.LBB114:
1460:fat.c         ****     uint16_t cluster_offset = dd->entry_offset;
 5563               		.loc 1 1460 15 view .LVU1130
 5564 1640 9D96      		adiw r26,45
 5565 1642 8D90      		ld r8,X+
 5566 1644 9C90      		ld r9,X
1476:fat.c         ****     memset(dir_entry, 0, sizeof(*dir_entry));
 5567               		.loc 1 1476 5 is_stmt 1 view .LVU1131
 5568 1646 FE01      		movw r30,r28
 5569 1648 B396      		adiw r30,35
 5570 164a 24E0      		ldi r18,lo8(4)
 5571 164c DF01      		movw r26,r30
 5572               		0:
 5573 164e 1D92      		st X+,__zero_reg__
 5574 1650 2A95      		dec r18
 5575 1652 01F4      		brne 0b
1477:fat.c         ****     arg.dir_entry = dir_entry;
 5576               		.loc 1 1477 5 view .LVU1132
 5577 1654 2BE2      		ldi r18,lo8(43)
 5578 1656 FB01      		movw r30,r22
 5579               		0:
 5580 1658 1192      		st Z+,__zero_reg__
 5581 165a 2A95      		dec r18
 5582 165c 01F4      		brne 0b
1478:fat.c         **** 
 5583               		.loc 1 1478 5 view .LVU1133
1478:fat.c         **** 
 5584               		.loc 1 1478 19 is_stmt 0 view .LVU1134
 5585 165e 7AA3      		std Y+34,r23
 5586 1660 69A3      		std Y+33,r22
1481:fat.c         ****     {
 5587               		.loc 1 1481 5 is_stmt 1 view .LVU1135
1481:fat.c         ****     {
 5588               		.loc 1 1481 7 is_stmt 0 view .LVU1136
 5589 1662 8114      		cp r8,__zero_reg__
 5590 1664 9104      		cpc r9,__zero_reg__
 5591 1666 01F4      		brne .L362
1488:fat.c         ****     }
 5592               		.loc 1 1488 13 is_stmt 1 view .LVU1137
1488:fat.c         ****     }
 5593               		.loc 1 1488 26 is_stmt 0 view .LVU1138
 5594 1668 D201      		movw r26,r4
 5595 166a 5296      		adiw r26,18
 5596 166c 2D90      		ld r2,X+
 5597 166e 3C90      		ld r3,X
 5598 1670 5397      		sbiw r26,18+1
 5599               	.LVL411:
1488:fat.c         ****     }
 5600               		.loc 1 1488 26 view .LVU1139
 5601 1672 5696      		adiw r26,22
 5602 1674 2D91      		ld r18,X+
 5603 1676 3C91      		ld r19,X
 5604 1678 221A      		sub r2,r18
 5605 167a 330A      		sbc r3,r19
 5606               	.LVL412:
 5607               	.L362:
1488:fat.c         ****     }
 5608               		.loc 1 1488 26 view .LVU1140
 5609               	.LBE114:
 5610               	.LBE117:
1452:fat.c         ****     if(!dd || !dir_entry)
 5611               		.loc 1 1452 1 view .LVU1141
 5612 167c 3C01      		movw r6,r24
 5613               	.L361:
 5614               	.LVL413:
 5615               	.LBB118:
 5616               	.LBB115:
1493:fat.c         ****     {
 5617               		.loc 1 1493 10 view .LVU1142
 5618 167e 8EA1      		ldd r24,Y+38
 5619 1680 8111      		cpse r24,__zero_reg__
 5620 1682 00C0      		rjmp .L364
 5621               	.LBB112:
1496:fat.c         ****         offset_t pos = cluster_offset;
 5622               		.loc 1 1496 9 is_stmt 1 view .LVU1143
1496:fat.c         ****         offset_t pos = cluster_offset;
 5623               		.loc 1 1496 18 is_stmt 0 view .LVU1144
 5624 1684 8101      		movw r16,r2
 5625 1686 0619      		sub r16,r6
 5626 1688 1709      		sbc r17,r7
 5627               	.LVL414:
1497:fat.c         ****         if(cluster_num == 0)
 5628               		.loc 1 1497 9 is_stmt 1 view .LVU1145
1497:fat.c         ****         if(cluster_num == 0)
 5629               		.loc 1 1497 18 is_stmt 0 view .LVU1146
 5630 168a 6301      		movw r12,r6
 5631 168c F12C      		mov r15,__zero_reg__
 5632 168e E12C      		mov r14,__zero_reg__
 5633               	.LVL415:
1498:fat.c         ****             pos += header->root_dir_offset;
 5634               		.loc 1 1498 9 is_stmt 1 view .LVU1147
1498:fat.c         ****             pos += header->root_dir_offset;
 5635               		.loc 1 1498 11 is_stmt 0 view .LVU1148
 5636 1690 8114      		cp r8,__zero_reg__
 5637 1692 9104      		cpc r9,__zero_reg__
 5638 1694 01F0      		breq .+2
 5639 1696 00C0      		rjmp .L359
1499:fat.c         ****         else
 5640               		.loc 1 1499 13 is_stmt 1 view .LVU1149
1499:fat.c         ****         else
 5641               		.loc 1 1499 17 is_stmt 0 view .LVU1150
 5642 1698 F201      		movw r30,r4
 5643 169a 6689      		ldd r22,Z+22
 5644 169c 7789      		ldd r23,Z+23
 5645 169e 808D      		ldd r24,Z+24
 5646 16a0 918D      		ldd r25,Z+25
 5647               	.L376:
1501:fat.c         **** 
 5648               		.loc 1 1501 17 view .LVU1151
 5649 16a2 6C0D      		add r22,r12
 5650 16a4 7D1D      		adc r23,r13
 5651 16a6 8E1D      		adc r24,r14
 5652 16a8 9F1D      		adc r25,r15
 5653               	.LVL416:
1503:fat.c         ****         if(!fs->partition->device_read_interval(pos,
 5654               		.loc 1 1503 9 is_stmt 1 view .LVU1152
1503:fat.c         ****         if(!fs->partition->device_read_interval(pos,
 5655               		.loc 1 1503 24 is_stmt 0 view .LVU1153
 5656 16aa 1CA2      		std Y+36,__zero_reg__
 5657 16ac 1BA2      		std Y+35,__zero_reg__
1504:fat.c         ****                                                 buffer,
 5658               		.loc 1 1504 9 is_stmt 1 view .LVU1154
1504:fat.c         ****                                                 buffer,
 5659               		.loc 1 1504 26 is_stmt 0 view .LVU1155
 5660 16ae D201      		movw r26,r4
 5661 16b0 ED91      		ld r30,X+
 5662 16b2 FC91      		ld r31,X
1504:fat.c         ****                                                 buffer,
 5663               		.loc 1 1504 13 view .LVU1156
 5664 16b4 0280      		ldd __tmp_reg__,Z+2
 5665 16b6 F381      		ldd r31,Z+3
 5666 16b8 E02D      		mov r30,__tmp_reg__
 5667 16ba 9E01      		movw r18,r28
 5668 16bc 2F5D      		subi r18,-33
 5669 16be 3F4F      		sbci r19,-1
 5670 16c0 6901      		movw r12,r18
 5671 16c2 20E0      		ldi r18,lo8(gs(fat_dir_entry_read_callback))
 5672 16c4 E22E      		mov r14,r18
 5673 16c6 20E0      		ldi r18,hi8(gs(fat_dir_entry_read_callback))
 5674 16c8 F22E      		mov r15,r18
 5675 16ca 20E2      		ldi r18,lo8(32)
 5676 16cc 30E0      		ldi r19,0
 5677 16ce AE01      		movw r20,r28
 5678 16d0 4F5F      		subi r20,-1
 5679 16d2 5F4F      		sbci r21,-1
 5680 16d4 0995      		icall
 5681               	.LVL417:
1504:fat.c         ****                                                 buffer,
 5682               		.loc 1 1504 11 view .LVU1157
 5683 16d6 8823      		tst r24
 5684 16d8 01F0      		breq .L354
1513:fat.c         **** 
 5685               		.loc 1 1513 9 is_stmt 1 view .LVU1158
1513:fat.c         **** 
 5686               		.loc 1 1513 24 is_stmt 0 view .LVU1159
 5687 16da 8BA1      		ldd r24,Y+35
 5688 16dc 9CA1      		ldd r25,Y+36
 5689 16de 680E      		add r6,r24
 5690 16e0 791E      		adc r7,r25
 5691               	.LVL418:
1515:fat.c         ****         {
 5692               		.loc 1 1515 9 is_stmt 1 view .LVU1160
1515:fat.c         ****         {
 5693               		.loc 1 1515 11 is_stmt 0 view .LVU1161
 5694 16e2 6214      		cp r6,r2
 5695 16e4 7304      		cpc r7,r3
 5696 16e6 00F0      		brlo .L361
1520:fat.c         ****             {
 5697               		.loc 1 1520 13 is_stmt 1 view .LVU1162
1520:fat.c         ****             {
 5698               		.loc 1 1520 31 is_stmt 0 view .LVU1163
 5699 16e8 B401      		movw r22,r8
 5700 16ea C201      		movw r24,r4
 5701 16ec 0E94 0000 		call fat_get_next_cluster
 5702               	.LVL419:
 5703 16f0 4C01      		movw r8,r24
 5704               	.LVL420:
1522:fat.c         ****                 continue;
 5705               		.loc 1 1522 32 view .LVU1164
 5706 16f2 90E0      		ldi r25,0
 5707 16f4 80E0      		ldi r24,0
1520:fat.c         ****             {
 5708               		.loc 1 1520 15 view .LVU1165
 5709 16f6 8114      		cp r8,__zero_reg__
 5710 16f8 9104      		cpc r9,__zero_reg__
 5711 16fa 01F0      		breq .+2
 5712 16fc 00C0      		rjmp .L362
1527:fat.c         ****             {
 5713               		.loc 1 1527 13 is_stmt 1 view .LVU1166
1527:fat.c         ****             {
 5714               		.loc 1 1527 15 is_stmt 0 view .LVU1167
 5715 16fe 8EA1      		ldd r24,Y+38
 5716 1700 8823      		tst r24
 5717 1702 01F4      		brne .+2
 5718 1704 00C0      		rjmp .L363
 5719               	.LVL421:
 5720               	.L364:
1527:fat.c         ****             {
 5721               		.loc 1 1527 15 view .LVU1168
 5722               	.LBE112:
1547:fat.c         ****     dd->entry_offset = cluster_offset;
 5723               		.loc 1 1547 5 is_stmt 1 view .LVU1169
1547:fat.c         ****     dd->entry_offset = cluster_offset;
 5724               		.loc 1 1547 23 is_stmt 0 view .LVU1170
 5725 1706 D501      		movw r26,r10
 5726 1708 9E96      		adiw r26,45+1
 5727 170a 9C92      		st X,r9
 5728 170c 8E92      		st -X,r8
 5729 170e 9D97      		sbiw r26,45
1548:fat.c         **** 
 5730               		.loc 1 1548 5 is_stmt 1 view .LVU1171
1548:fat.c         **** 
 5731               		.loc 1 1548 22 is_stmt 0 view .LVU1172
 5732 1710 D096      		adiw r26,47+1
 5733 1712 7C92      		st X,r7
 5734 1714 6E92      		st -X,r6
 5735 1716 9F97      		sbiw r26,47
1550:fat.c         **** }
 5736               		.loc 1 1550 5 is_stmt 1 view .LVU1173
1550:fat.c         **** }
 5737               		.loc 1 1550 15 is_stmt 0 view .LVU1174
 5738 1718 8EA1      		ldd r24,Y+38
 5739               	.LVL422:
 5740               	.L354:
 5741               	/* epilogue start */
1550:fat.c         **** }
 5742               		.loc 1 1550 15 view .LVU1175
 5743               	.LBE115:
 5744               	.LBE118:
1551:fat.c         **** 
 5745               		.loc 1 1551 1 view .LVU1176
 5746 171a A696      		adiw r28,38
 5747 171c 0FB6      		in __tmp_reg__,__SREG__
 5748 171e F894      		cli
 5749 1720 DEBF      		out __SP_H__,r29
 5750 1722 0FBE      		out __SREG__,__tmp_reg__
 5751 1724 CDBF      		out __SP_L__,r28
 5752 1726 DF91      		pop r29
 5753 1728 CF91      		pop r28
 5754 172a 1F91      		pop r17
 5755 172c 0F91      		pop r16
 5756 172e FF90      		pop r15
 5757 1730 EF90      		pop r14
 5758 1732 DF90      		pop r13
 5759 1734 CF90      		pop r12
 5760 1736 BF90      		pop r11
 5761 1738 AF90      		pop r10
 5762               	.LVL423:
1551:fat.c         **** 
 5763               		.loc 1 1551 1 view .LVU1177
 5764 173a 9F90      		pop r9
 5765 173c 8F90      		pop r8
 5766 173e 7F90      		pop r7
 5767 1740 6F90      		pop r6
 5768 1742 5F90      		pop r5
 5769 1744 4F90      		pop r4
 5770 1746 3F90      		pop r3
 5771 1748 2F90      		pop r2
 5772 174a 0895      		ret
 5773               	.LVL424:
 5774               	.L359:
 5775               	.LBB119:
 5776               	.LBB116:
 5777               	.LBB113:
1501:fat.c         **** 
 5778               		.loc 1 1501 13 is_stmt 1 view .LVU1178
1501:fat.c         **** 
 5779               		.loc 1 1501 20 is_stmt 0 view .LVU1179
 5780 174c B401      		movw r22,r8
 5781 174e C201      		movw r24,r4
 5782 1750 0E94 0000 		call fat_cluster_offset
 5783               	.LVL425:
 5784 1754 00C0      		rjmp .L376
 5785               	.LBE113:
 5786               	.LBE116:
 5787               	.LBE119:
 5788               		.cfi_endproc
 5789               	.LFE19:
 5791               	.global	fat_get_dir_entry_of_path
 5793               	fat_get_dir_entry_of_path:
 5794               	.LVL426:
 5795               	.LFB10:
 850:fat.c         ****     if(!fs || !path || path[0] == '\0' || !dir_entry)
 5796               		.loc 1 850 1 is_stmt 1 view -0
 5797               		.cfi_startproc
 850:fat.c         ****     if(!fs || !path || path[0] == '\0' || !dir_entry)
 5798               		.loc 1 850 1 is_stmt 0 view .LVU1181
 5799 1756 8F92      		push r8
 5800               	.LCFI221:
 5801               		.cfi_def_cfa_offset 3
 5802               		.cfi_offset 8, -2
 5803 1758 9F92      		push r9
 5804               	.LCFI222:
 5805               		.cfi_def_cfa_offset 4
 5806               		.cfi_offset 9, -3
 5807 175a AF92      		push r10
 5808               	.LCFI223:
 5809               		.cfi_def_cfa_offset 5
 5810               		.cfi_offset 10, -4
 5811 175c BF92      		push r11
 5812               	.LCFI224:
 5813               		.cfi_def_cfa_offset 6
 5814               		.cfi_offset 11, -5
 5815 175e CF92      		push r12
 5816               	.LCFI225:
 5817               		.cfi_def_cfa_offset 7
 5818               		.cfi_offset 12, -6
 5819 1760 DF92      		push r13
 5820               	.LCFI226:
 5821               		.cfi_def_cfa_offset 8
 5822               		.cfi_offset 13, -7
 5823 1762 EF92      		push r14
 5824               	.LCFI227:
 5825               		.cfi_def_cfa_offset 9
 5826               		.cfi_offset 14, -8
 5827 1764 FF92      		push r15
 5828               	.LCFI228:
 5829               		.cfi_def_cfa_offset 10
 5830               		.cfi_offset 15, -9
 5831 1766 0F93      		push r16
 5832               	.LCFI229:
 5833               		.cfi_def_cfa_offset 11
 5834               		.cfi_offset 16, -10
 5835 1768 1F93      		push r17
 5836               	.LCFI230:
 5837               		.cfi_def_cfa_offset 12
 5838               		.cfi_offset 17, -11
 5839 176a CF93      		push r28
 5840               	.LCFI231:
 5841               		.cfi_def_cfa_offset 13
 5842               		.cfi_offset 28, -12
 5843 176c DF93      		push r29
 5844               	.LCFI232:
 5845               		.cfi_def_cfa_offset 14
 5846               		.cfi_offset 29, -13
 5847               	/* prologue: function */
 5848               	/* frame size = 0 */
 5849               	/* stack size = 12 */
 5850               	.L__stack_usage = 12
 5851 176e 5C01      		movw r10,r24
 5852 1770 4B01      		movw r8,r22
 5853 1772 8A01      		movw r16,r20
 851:fat.c         ****         return 0;
 5854               		.loc 1 851 5 is_stmt 1 view .LVU1182
 851:fat.c         ****         return 0;
 5855               		.loc 1 851 7 is_stmt 0 view .LVU1183
 5856 1774 892B      		or r24,r25
 5857 1776 01F4      		brne .+2
 5858 1778 00C0      		rjmp .L378
 851:fat.c         ****         return 0;
 5859               		.loc 1 851 12 discriminator 1 view .LVU1184
 5860 177a 6115      		cp r22,__zero_reg__
 5861 177c 7105      		cpc r23,__zero_reg__
 5862 177e 01F4      		brne .+2
 5863 1780 00C0      		rjmp .L378
 851:fat.c         ****         return 0;
 5864               		.loc 1 851 28 discriminator 2 view .LVU1185
 5865 1782 FB01      		movw r30,r22
 5866 1784 8081      		ld r24,Z
 5867               	.LVL427:
 851:fat.c         ****         return 0;
 5868               		.loc 1 851 21 discriminator 2 view .LVU1186
 5869 1786 8823      		tst r24
 5870 1788 01F4      		brne .+2
 5871 178a 00C0      		rjmp .L378
 851:fat.c         ****         return 0;
 5872               		.loc 1 851 40 discriminator 3 view .LVU1187
 5873 178c 452B      		or r20,r21
 5874 178e 01F4      		brne .+2
 5875 1790 00C0      		rjmp .L378
 854:fat.c         ****         ++path;
 5876               		.loc 1 854 5 is_stmt 1 view .LVU1188
 854:fat.c         ****         ++path;
 5877               		.loc 1 854 7 is_stmt 0 view .LVU1189
 5878 1792 8F32      		cpi r24,lo8(47)
 5879 1794 01F4      		brne .L379
 855:fat.c         **** 
 5880               		.loc 1 855 9 is_stmt 1 view .LVU1190
 5881 1796 FFEF      		ldi r31,-1
 5882 1798 8F1A      		sub r8,r31
 5883 179a 9F0A      		sbc r9,r31
 5884               	.LVL428:
 5885               	.L379:
 858:fat.c         ****     dir_entry->attributes = FAT_ATTRIB_DIR;
 5886               		.loc 1 858 5 view .LVU1191
 5887 179c 8BE2      		ldi r24,lo8(43)
 5888 179e F801      		movw r30,r16
 5889               		0:
 5890 17a0 1192      		st Z+,__zero_reg__
 5891 17a2 8A95      		dec r24
 5892 17a4 01F4      		brne 0b
 859:fat.c         **** 
 5893               		.loc 1 859 5 view .LVU1192
 859:fat.c         **** 
 5894               		.loc 1 859 27 is_stmt 0 view .LVU1193
 5895 17a6 80E1      		ldi r24,lo8(16)
 5896 17a8 F801      		movw r30,r16
 5897 17aa 80A3      		std Z+32,r24
 5898               	.LVL429:
 5899               	.L388:
 861:fat.c         ****     {
 5900               		.loc 1 861 5 is_stmt 1 view .LVU1194
 5901               	.LBB120:
 863:fat.c         ****             return 1;
 5902               		.loc 1 863 9 view .LVU1195
 863:fat.c         ****             return 1;
 5903               		.loc 1 863 11 is_stmt 0 view .LVU1196
 5904 17ac F401      		movw r30,r8
 5905 17ae 8081      		ld r24,Z
 5906 17b0 8111      		cpse r24,__zero_reg__
 5907 17b2 00C0      		rjmp .L380
 5908               	.L385:
 864:fat.c         **** 
 5909               		.loc 1 864 20 view .LVU1197
 5910 17b4 81E0      		ldi r24,lo8(1)
 5911               	.L377:
 5912               	/* epilogue start */
 864:fat.c         **** 
 5913               		.loc 1 864 20 view .LVU1198
 5914               	.LBE120:
 914:fat.c         **** 
 5915               		.loc 1 914 1 view .LVU1199
 5916 17b6 DF91      		pop r29
 5917 17b8 CF91      		pop r28
 5918 17ba 1F91      		pop r17
 5919 17bc 0F91      		pop r16
 5920               	.LVL430:
 914:fat.c         **** 
 5921               		.loc 1 914 1 view .LVU1200
 5922 17be FF90      		pop r15
 5923 17c0 EF90      		pop r14
 5924 17c2 DF90      		pop r13
 5925 17c4 CF90      		pop r12
 5926 17c6 BF90      		pop r11
 5927 17c8 AF90      		pop r10
 5928               	.LVL431:
 914:fat.c         **** 
 5929               		.loc 1 914 1 view .LVU1201
 5930 17ca 9F90      		pop r9
 5931 17cc 8F90      		pop r8
 5932               	.LVL432:
 914:fat.c         **** 
 5933               		.loc 1 914 1 view .LVU1202
 5934 17ce 0895      		ret
 5935               	.LVL433:
 5936               	.L380:
 5937               	.LBB121:
 866:fat.c         ****         if(!dd)
 5938               		.loc 1 866 9 is_stmt 1 view .LVU1203
 866:fat.c         ****         if(!dd)
 5939               		.loc 1 866 37 is_stmt 0 view .LVU1204
 5940 17d0 B801      		movw r22,r16
 5941 17d2 C501      		movw r24,r10
 5942 17d4 0E94 0000 		call fat_open_dir
 5943               	.LVL434:
 5944 17d8 6C01      		movw r12,r24
 5945               	.LVL435:
 867:fat.c         ****             break;
 5946               		.loc 1 867 9 is_stmt 1 view .LVU1205
 867:fat.c         ****             break;
 5947               		.loc 1 867 11 is_stmt 0 view .LVU1206
 5948 17da 892B      		or r24,r25
 5949 17dc 01F4      		brne .+2
 5950 17de 00C0      		rjmp .L378
 871:fat.c         ****         uint8_t length_to_sep;
 5951               		.loc 1 871 9 is_stmt 1 view .LVU1207
 871:fat.c         ****         uint8_t length_to_sep;
 5952               		.loc 1 871 32 is_stmt 0 view .LVU1208
 5953 17e0 6FE2      		ldi r22,lo8(47)
 5954 17e2 70E0      		ldi r23,0
 5955 17e4 C401      		movw r24,r8
 5956 17e6 0E94 0000 		call strchr
 5957               	.LVL436:
 872:fat.c         ****         if(sub_path)
 5958               		.loc 1 872 9 is_stmt 1 view .LVU1209
 873:fat.c         ****         {
 5959               		.loc 1 873 9 view .LVU1210
 873:fat.c         ****         {
 5960               		.loc 1 873 11 is_stmt 0 view .LVU1211
 5961 17ea 0097      		sbiw r24,0
 5962 17ec 01F0      		breq .L382
 875:fat.c         ****             ++sub_path;
 5963               		.loc 1 875 13 is_stmt 1 view .LVU1212
 875:fat.c         ****             ++sub_path;
 5964               		.loc 1 875 27 is_stmt 0 view .LVU1213
 5965 17ee E82E      		mov r14,r24
 5966 17f0 E818      		sub r14,r8
 5967               	.LVL437:
 876:fat.c         ****         }
 5968               		.loc 1 876 13 is_stmt 1 view .LVU1214
 5969 17f2 EC01      		movw r28,r24
 5970 17f4 2196      		adiw r28,1
 5971               	.LVL438:
 5972               	.L383:
 888:fat.c         ****                 strncmp(path, dir_entry->long_name, length_to_sep) != 0))
 5973               		.loc 1 888 46 is_stmt 0 view .LVU1215
 5974 17f6 F12C      		mov r15,__zero_reg__
 5975               	.L402:
 885:fat.c         ****         {
 5976               		.loc 1 885 15 view .LVU1216
 5977 17f8 B801      		movw r22,r16
 5978 17fa C601      		movw r24,r12
 5979 17fc 0E94 0000 		call fat_read_dir
 5980               	.LVL439:
 885:fat.c         ****         {
 5981               		.loc 1 885 14 view .LVU1217
 5982 1800 8111      		cpse r24,__zero_reg__
 5983 1802 00C0      		rjmp .L387
 885:fat.c         ****         {
 5984               		.loc 1 885 14 view .LVU1218
 5985 1804 E401      		movw r28,r8
 5986               	.LVL440:
 5987               	.L386:
 910:fat.c         ****     }
 5988               		.loc 1 910 9 is_stmt 1 view .LVU1219
 5989 1806 C601      		movw r24,r12
 5990 1808 0E94 0000 		call fat_close_dir
 5991               	.LVL441:
 5992               	.LBE121:
 862:fat.c         ****         if(path[0] == '\0')
 5993               		.loc 1 862 5 is_stmt 0 view .LVU1220
 5994 180c 4E01      		movw r8,r28
 5995 180e 00C0      		rjmp .L388
 5996               	.LVL442:
 5997               	.L382:
 5998               	.LBB122:
 880:fat.c         ****             sub_path = path + length_to_sep;
 5999               		.loc 1 880 13 is_stmt 1 view .LVU1221
 880:fat.c         ****             sub_path = path + length_to_sep;
 6000               		.loc 1 880 29 is_stmt 0 view .LVU1222
 6001 1810 E401      		movw r28,r8
 6002               		0:
 6003 1812 0990      		ld __tmp_reg__,Y+
 6004 1814 0020      		tst __tmp_reg__
 6005 1816 01F4      		brne 0b
 6006 1818 2197      		sbiw r28,1
 6007 181a C819      		sub r28,r8
 6008 181c D909      		sbc r29,r9
 880:fat.c         ****             sub_path = path + length_to_sep;
 6009               		.loc 1 880 27 view .LVU1223
 6010 181e EC2E      		mov r14,r28
 6011               	.LVL443:
 881:fat.c         ****         }
 6012               		.loc 1 881 13 is_stmt 1 view .LVU1224
 881:fat.c         ****         }
 6013               		.loc 1 881 22 is_stmt 0 view .LVU1225
 6014 1820 C80D      		add r28,r8
 6015 1822 D92D      		mov r29,r9
 6016 1824 D11D      		adc r29,__zero_reg__
 6017               	.LVL444:
 881:fat.c         ****         }
 6018               		.loc 1 881 22 view .LVU1226
 6019 1826 00C0      		rjmp .L383
 6020               	.L387:
 888:fat.c         ****                 strncmp(path, dir_entry->long_name, length_to_sep) != 0))
 6021               		.loc 1 888 13 is_stmt 1 view .LVU1227
 888:fat.c         ****                 strncmp(path, dir_entry->long_name, length_to_sep) != 0))
 6022               		.loc 1 888 17 is_stmt 0 view .LVU1228
 6023 1828 F801      		movw r30,r16
 6024               		0:
 6025 182a 0190      		ld __tmp_reg__,Z+
 6026 182c 0020      		tst __tmp_reg__
 6027 182e 01F4      		brne 0b
 6028 1830 3197      		sbiw r30,1
 6029 1832 E01B      		sub r30,r16
 6030 1834 F10B      		sbc r31,r17
 888:fat.c         ****                 strncmp(path, dir_entry->long_name, length_to_sep) != 0))
 6031               		.loc 1 888 15 view .LVU1229
 6032 1836 EE15      		cp r30,r14
 6033 1838 FF05      		cpc r31,r15
 6034 183a 01F4      		brne .L402
 889:fat.c         ****                 continue;
 6035               		.loc 1 889 17 discriminator 1 view .LVU1230
 6036 183c A701      		movw r20,r14
 6037 183e B801      		movw r22,r16
 6038 1840 C401      		movw r24,r8
 6039 1842 0E94 0000 		call strncmp
 6040               	.LVL445:
 888:fat.c         ****                 strncmp(path, dir_entry->long_name, length_to_sep) != 0))
 6041               		.loc 1 888 63 discriminator 1 view .LVU1231
 6042 1846 892B      		or r24,r25
 6043 1848 01F4      		brne .L402
 892:fat.c         ****             dd = 0;
 6044               		.loc 1 892 13 is_stmt 1 view .LVU1232
 6045 184a C601      		movw r24,r12
 6046 184c 0E94 0000 		call fat_close_dir
 6047               	.LVL446:
 893:fat.c         **** 
 6048               		.loc 1 893 13 view .LVU1233
 895:fat.c         ****                 /* we iterated through the whole path and have found the file */
 6049               		.loc 1 895 13 view .LVU1234
 895:fat.c         ****                 /* we iterated through the whole path and have found the file */
 6050               		.loc 1 895 20 is_stmt 0 view .LVU1235
 6051 1850 E80C      		add r14,r8
 6052 1852 F91C      		adc r15,r9
 895:fat.c         ****                 /* we iterated through the whole path and have found the file */
 6053               		.loc 1 895 15 view .LVU1236
 6054 1854 F701      		movw r30,r14
 6055 1856 8081      		ld r24,Z
 6056 1858 8823      		tst r24
 6057 185a 01F4      		brne .+2
 6058 185c 00C0      		rjmp .L385
 899:fat.c         ****             {
 6059               		.loc 1 899 13 is_stmt 1 view .LVU1237
 899:fat.c         ****             {
 6060               		.loc 1 899 15 is_stmt 0 view .LVU1238
 6061 185e F801      		movw r30,r16
 6062 1860 80A1      		ldd r24,Z+32
 6063 1862 84FD      		sbrc r24,4
 6064 1864 00C0      		rjmp .L389
 6065               	.LVL447:
 6066               	.L378:
 899:fat.c         ****             {
 6067               		.loc 1 899 15 view .LVU1239
 6068               	.LBE122:
 852:fat.c         **** 
 6069               		.loc 1 852 16 view .LVU1240
 6070 1866 80E0      		ldi r24,0
 6071 1868 00C0      		rjmp .L377
 6072               	.LVL448:
 6073               	.L389:
 6074               	.LBB123:
 893:fat.c         **** 
 6075               		.loc 1 893 16 view .LVU1241
 6076 186a D12C      		mov r13,__zero_reg__
 6077 186c C12C      		mov r12,__zero_reg__
 6078 186e 00C0      		rjmp .L386
 6079               	.LBE123:
 6080               		.cfi_endproc
 6081               	.LFE10:
 6083               	.global	fat_create_file
 6085               	fat_create_file:
 6086               	.LVL449:
 6087               	.LFB25:
2067:fat.c         ****     if(!parent || !file || !file[0] || !dir_entry)
 6088               		.loc 1 2067 1 is_stmt 1 view -0
 6089               		.cfi_startproc
2067:fat.c         ****     if(!parent || !file || !file[0] || !dir_entry)
 6090               		.loc 1 2067 1 is_stmt 0 view .LVU1243
 6091 1870 CF92      		push r12
 6092               	.LCFI233:
 6093               		.cfi_def_cfa_offset 3
 6094               		.cfi_offset 12, -2
 6095 1872 DF92      		push r13
 6096               	.LCFI234:
 6097               		.cfi_def_cfa_offset 4
 6098               		.cfi_offset 13, -3
 6099 1874 EF92      		push r14
 6100               	.LCFI235:
 6101               		.cfi_def_cfa_offset 5
 6102               		.cfi_offset 14, -4
 6103 1876 FF92      		push r15
 6104               	.LCFI236:
 6105               		.cfi_def_cfa_offset 6
 6106               		.cfi_offset 15, -5
 6107 1878 0F93      		push r16
 6108               	.LCFI237:
 6109               		.cfi_def_cfa_offset 7
 6110               		.cfi_offset 16, -6
 6111 187a 1F93      		push r17
 6112               	.LCFI238:
 6113               		.cfi_def_cfa_offset 8
 6114               		.cfi_offset 17, -7
 6115 187c CF93      		push r28
 6116               	.LCFI239:
 6117               		.cfi_def_cfa_offset 9
 6118               		.cfi_offset 28, -8
 6119 187e DF93      		push r29
 6120               	.LCFI240:
 6121               		.cfi_def_cfa_offset 10
 6122               		.cfi_offset 29, -9
 6123               	/* prologue: function */
 6124               	/* frame size = 0 */
 6125               	/* stack size = 8 */
 6126               	.L__stack_usage = 8
 6127 1880 8C01      		movw r16,r24
 6128 1882 7B01      		movw r14,r22
 6129 1884 EA01      		movw r28,r20
2068:fat.c         ****         return 0;
 6130               		.loc 1 2068 5 is_stmt 1 view .LVU1244
2068:fat.c         ****         return 0;
 6131               		.loc 1 2068 7 is_stmt 0 view .LVU1245
 6132 1886 892B      		or r24,r25
 6133 1888 01F4      		brne .L410
 6134               	.LVL450:
 6135               	.L431:
 6136               	.LBB128:
 6137               	.LBB129:
2095:fat.c         ****         return 0;
 6138               		.loc 1 2095 7 view .LVU1246
 6139 188a 90E0      		ldi r25,0
 6140 188c 00C0      		rjmp .L409
 6141               	.LVL451:
 6142               	.L410:
2095:fat.c         ****         return 0;
 6143               		.loc 1 2095 7 view .LVU1247
 6144               	.LBE129:
 6145               	.LBE128:
2068:fat.c         ****         return 0;
 6146               		.loc 1 2068 16 discriminator 1 view .LVU1248
 6147 188e 6115      		cp r22,__zero_reg__
 6148 1890 7105      		cpc r23,__zero_reg__
 6149 1892 01F0      		breq .L431
2068:fat.c         ****         return 0;
 6150               		.loc 1 2068 25 discriminator 2 view .LVU1249
 6151 1894 FB01      		movw r30,r22
 6152 1896 8081      		ld r24,Z
 6153 1898 8823      		tst r24
 6154 189a 01F0      		breq .L431
2068:fat.c         ****         return 0;
 6155               		.loc 1 2068 37 discriminator 3 view .LVU1250
 6156 189c 2097      		sbiw r28,0
 6157 189e 01F0      		breq .L431
 6158               	.LVL452:
 6159               	.L414:
2072:fat.c         ****     {
 6160               		.loc 1 2072 5 is_stmt 1 view .LVU1251
2074:fat.c         ****             break;
 6161               		.loc 1 2074 9 view .LVU1252
2074:fat.c         ****             break;
 6162               		.loc 1 2074 13 is_stmt 0 view .LVU1253
 6163 18a0 BE01      		movw r22,r28
 6164 18a2 C801      		movw r24,r16
 6165 18a4 0E94 0000 		call fat_read_dir
 6166               	.LVL453:
2074:fat.c         ****             break;
 6167               		.loc 1 2074 11 view .LVU1254
 6168 18a8 8823      		tst r24
 6169 18aa 01F0      		breq .L413
2077:fat.c         ****         {
 6170               		.loc 1 2077 9 is_stmt 1 view .LVU1255
2077:fat.c         ****         {
 6171               		.loc 1 2077 12 is_stmt 0 view .LVU1256
 6172 18ac BE01      		movw r22,r28
 6173 18ae C701      		movw r24,r14
 6174 18b0 0E94 0000 		call strcmp
 6175               	.LVL454:
2077:fat.c         ****         {
 6176               		.loc 1 2077 11 view .LVU1257
 6177 18b4 892B      		or r24,r25
 6178 18b6 01F4      		brne .L414
2079:fat.c         ****             return 2;
 6179               		.loc 1 2079 13 is_stmt 1 view .LVU1258
 6180 18b8 C801      		movw r24,r16
 6181 18ba 0E94 0000 		call fat_reset_dir
 6182               	.LVL455:
2080:fat.c         ****         }
 6183               		.loc 1 2080 13 view .LVU1259
2080:fat.c         ****         }
 6184               		.loc 1 2080 20 is_stmt 0 view .LVU1260
 6185 18be 92E0      		ldi r25,lo8(2)
 6186               	.L409:
2099:fat.c         **** #endif
 6187               		.loc 1 2099 1 view .LVU1261
 6188 18c0 892F      		mov r24,r25
 6189               	/* epilogue start */
 6190 18c2 DF91      		pop r29
 6191 18c4 CF91      		pop r28
 6192               	.LVL456:
2099:fat.c         **** #endif
 6193               		.loc 1 2099 1 view .LVU1262
 6194 18c6 1F91      		pop r17
 6195 18c8 0F91      		pop r16
 6196               	.LVL457:
2099:fat.c         **** #endif
 6197               		.loc 1 2099 1 view .LVU1263
 6198 18ca FF90      		pop r15
 6199 18cc EF90      		pop r14
 6200               	.LVL458:
2099:fat.c         **** #endif
 6201               		.loc 1 2099 1 view .LVU1264
 6202 18ce DF90      		pop r13
 6203 18d0 CF90      		pop r12
 6204 18d2 0895      		ret
 6205               	.LVL459:
 6206               	.L413:
 6207               	.LBB133:
 6208               	.LBI128:
2066:fat.c         **** {
 6209               		.loc 1 2066 9 is_stmt 1 view .LVU1265
 6210               	.LBB132:
2084:fat.c         **** 
 6211               		.loc 1 2084 5 view .LVU1266
2084:fat.c         **** 
 6212               		.loc 1 2084 27 is_stmt 0 view .LVU1267
 6213 18d4 F801      		movw r30,r16
 6214 18d6 C080      		ld r12,Z
 6215 18d8 D180      		ldd r13,Z+1
 6216               	.LVL460:
2087:fat.c         ****     strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
 6217               		.loc 1 2087 5 is_stmt 1 view .LVU1268
 6218 18da 8BE2      		ldi r24,lo8(43)
 6219 18dc FE01      		movw r30,r28
 6220               		0:
 6221 18de 1192      		st Z+,__zero_reg__
 6222 18e0 8A95      		dec r24
 6223 18e2 01F4      		brne 0b
2088:fat.c         **** 
 6224               		.loc 1 2088 5 view .LVU1269
 6225 18e4 4FE1      		ldi r20,lo8(31)
 6226 18e6 50E0      		ldi r21,0
 6227 18e8 B701      		movw r22,r14
 6228 18ea CE01      		movw r24,r28
 6229 18ec 0E94 0000 		call strncpy
 6230               	.LVL461:
2091:fat.c         ****         return 0;
 6231               		.loc 1 2091 5 view .LVU1270
 6232               	.LBB130:
 6233               	.LBI130:
1741:fat.c         **** {
 6234               		.loc 1 1741 10 view .LVU1271
 6235               	.LBB131:
1743:fat.c         ****         return 0;
 6236               		.loc 1 1743 5 view .LVU1272
1744:fat.c         **** 
 6237               		.loc 1 1744 16 is_stmt 0 view .LVU1273
 6238 18f0 60E0      		ldi r22,0
 6239 18f2 70E0      		ldi r23,0
 6240 18f4 CB01      		movw r24,r22
1743:fat.c         ****         return 0;
 6241               		.loc 1 1743 7 view .LVU1274
 6242 18f6 C114      		cp r12,__zero_reg__
 6243 18f8 D104      		cpc r13,__zero_reg__
 6244 18fa 01F0      		breq .L415
 6245 18fc B801      		movw r22,r16
 6246 18fe 6D5D      		subi r22,-35
 6247 1900 7F4F      		sbci r23,-1
 6248 1902 AE01      		movw r20,r28
 6249 1904 C601      		movw r24,r12
 6250 1906 0E94 0000 		call fat_find_offset_for_dir_entry.isra.4.part.5
 6251               	.LVL462:
 6252               	.L415:
1743:fat.c         ****         return 0;
 6253               		.loc 1 1743 7 view .LVU1275
 6254               	.LBE131:
 6255               	.LBE130:
2091:fat.c         ****         return 0;
 6256               		.loc 1 2091 34 view .LVU1276
 6257 190a 6FA3      		std Y+39,r22
 6258 190c 78A7      		std Y+40,r23
 6259 190e 89A7      		std Y+41,r24
 6260 1910 9AA7      		std Y+42,r25
2091:fat.c         ****         return 0;
 6261               		.loc 1 2091 7 view .LVU1277
 6262 1912 672B      		or r22,r23
 6263 1914 682B      		or r22,r24
 6264 1916 692B      		or r22,r25
 6265 1918 01F4      		brne .+2
 6266 191a 00C0      		rjmp .L431
2095:fat.c         ****         return 0;
 6267               		.loc 1 2095 5 is_stmt 1 view .LVU1278
2095:fat.c         ****         return 0;
 6268               		.loc 1 2095 9 is_stmt 0 view .LVU1279
 6269 191c BE01      		movw r22,r28
 6270 191e C601      		movw r24,r12
 6271 1920 0E94 0000 		call fat_write_dir_entry
 6272               	.LVL463:
2095:fat.c         ****         return 0;
 6273               		.loc 1 2095 7 view .LVU1280
 6274 1924 91E0      		ldi r25,lo8(1)
 6275 1926 8111      		cpse r24,__zero_reg__
 6276 1928 00C0      		rjmp .L409
 6277 192a 00C0      		rjmp .L431
 6278               	.LBE132:
 6279               	.LBE133:
 6280               		.cfi_endproc
 6281               	.LFE25:
 6283               	.global	fat_delete_file
 6285               	fat_delete_file:
 6286               	.LVL464:
 6287               	.LFB26:
2118:fat.c         ****     if(!fs || !dir_entry)
 6288               		.loc 1 2118 1 is_stmt 1 view -0
 6289               		.cfi_startproc
2118:fat.c         ****     if(!fs || !dir_entry)
 6290               		.loc 1 2118 1 is_stmt 0 view .LVU1282
 6291 192c 9F92      		push r9
 6292               	.LCFI241:
 6293               		.cfi_def_cfa_offset 3
 6294               		.cfi_offset 9, -2
 6295 192e AF92      		push r10
 6296               	.LCFI242:
 6297               		.cfi_def_cfa_offset 4
 6298               		.cfi_offset 10, -3
 6299 1930 BF92      		push r11
 6300               	.LCFI243:
 6301               		.cfi_def_cfa_offset 5
 6302               		.cfi_offset 11, -4
 6303 1932 CF92      		push r12
 6304               	.LCFI244:
 6305               		.cfi_def_cfa_offset 6
 6306               		.cfi_offset 12, -5
 6307 1934 DF92      		push r13
 6308               	.LCFI245:
 6309               		.cfi_def_cfa_offset 7
 6310               		.cfi_offset 13, -6
 6311 1936 EF92      		push r14
 6312               	.LCFI246:
 6313               		.cfi_def_cfa_offset 8
 6314               		.cfi_offset 14, -7
 6315 1938 FF92      		push r15
 6316               	.LCFI247:
 6317               		.cfi_def_cfa_offset 9
 6318               		.cfi_offset 15, -8
 6319 193a 0F93      		push r16
 6320               	.LCFI248:
 6321               		.cfi_def_cfa_offset 10
 6322               		.cfi_offset 16, -9
 6323 193c 1F93      		push r17
 6324               	.LCFI249:
 6325               		.cfi_def_cfa_offset 11
 6326               		.cfi_offset 17, -10
 6327 193e CF93      		push r28
 6328               	.LCFI250:
 6329               		.cfi_def_cfa_offset 12
 6330               		.cfi_offset 28, -11
 6331 1940 DF93      		push r29
 6332               	.LCFI251:
 6333               		.cfi_def_cfa_offset 13
 6334               		.cfi_offset 29, -12
 6335 1942 CDB7      		in r28,__SP_L__
 6336 1944 DEB7      		in r29,__SP_H__
 6337               	.LCFI252:
 6338               		.cfi_def_cfa_register 28
 6339 1946 2C97      		sbiw r28,12
 6340               	.LCFI253:
 6341               		.cfi_def_cfa_offset 25
 6342 1948 0FB6      		in __tmp_reg__,__SREG__
 6343 194a F894      		cli
 6344 194c DEBF      		out __SP_H__,r29
 6345 194e 0FBE      		out __SREG__,__tmp_reg__
 6346 1950 CDBF      		out __SP_L__,r28
 6347               	/* prologue: function */
 6348               	/* frame size = 12 */
 6349               	/* stack size = 23 */
 6350               	.L__stack_usage = 23
 6351 1952 8C01      		movw r16,r24
 6352 1954 5B01      		movw r10,r22
2119:fat.c         ****         return 0;
 6353               		.loc 1 2119 5 is_stmt 1 view .LVU1283
2119:fat.c         ****         return 0;
 6354               		.loc 1 2119 7 is_stmt 0 view .LVU1284
 6355 1956 892B      		or r24,r25
 6356 1958 01F4      		brne .+2
 6357 195a 00C0      		rjmp .L441
2119:fat.c         ****         return 0;
 6358               		.loc 1 2119 12 discriminator 1 view .LVU1285
 6359 195c 6115      		cp r22,__zero_reg__
 6360 195e 7105      		cpc r23,__zero_reg__
 6361 1960 01F4      		brne .+2
 6362 1962 00C0      		rjmp .L441
 6363               	.LVL465:
 6364               	.LBB136:
 6365               	.LBI136:
2117:fat.c         **** {
 6366               		.loc 1 2117 9 is_stmt 1 view .LVU1286
 6367               	.LBB137:
2123:fat.c         ****     if(!dir_entry_offset)
 6368               		.loc 1 2123 5 view .LVU1287
2123:fat.c         ****     if(!dir_entry_offset)
 6369               		.loc 1 2123 14 is_stmt 0 view .LVU1288
 6370 1964 DB01      		movw r26,r22
 6371 1966 9796      		adiw r26,39
 6372 1968 CD90      		ld r12,X+
 6373 196a DD90      		ld r13,X+
 6374 196c ED90      		ld r14,X+
 6375 196e FC90      		ld r15,X
 6376 1970 9A97      		sbiw r26,39+3
 6377               	.LVL466:
2124:fat.c         ****         return 0;
 6378               		.loc 1 2124 5 is_stmt 1 view .LVU1289
2124:fat.c         ****         return 0;
 6379               		.loc 1 2124 7 is_stmt 0 view .LVU1290
 6380 1972 C114      		cp r12,__zero_reg__
 6381 1974 D104      		cpc r13,__zero_reg__
 6382 1976 E104      		cpc r14,__zero_reg__
 6383 1978 F104      		cpc r15,__zero_reg__
 6384 197a 01F4      		brne .+2
 6385 197c 00C0      		rjmp .L441
2136:fat.c         ****         
 6386               		.loc 1 2136 19 view .LVU1291
 6387 197e 85EE      		ldi r24,lo8(-27)
 6388 1980 982E      		mov r9,r24
 6389               	.LVL467:
 6390               	.L434:
2128:fat.c         ****     while(1)
 6391               		.loc 1 2128 5 is_stmt 1 view .LVU1292
2129:fat.c         ****     {
 6392               		.loc 1 2129 5 view .LVU1293
2132:fat.c         ****             return 0;
 6393               		.loc 1 2132 9 view .LVU1294
2132:fat.c         ****             return 0;
 6394               		.loc 1 2132 26 is_stmt 0 view .LVU1295
 6395 1982 D801      		movw r26,r16
 6396 1984 ED91      		ld r30,X+
 6397 1986 FC91      		ld r31,X
2132:fat.c         ****             return 0;
 6398               		.loc 1 2132 13 view .LVU1296
 6399 1988 0190      		ld __tmp_reg__,Z+
 6400 198a F081      		ld r31,Z
 6401 198c E02D      		mov r30,__tmp_reg__
 6402 198e 2CE0      		ldi r18,lo8(12)
 6403 1990 30E0      		ldi r19,0
 6404 1992 AE01      		movw r20,r28
 6405 1994 4F5F      		subi r20,-1
 6406 1996 5F4F      		sbci r21,-1
 6407 1998 C701      		movw r24,r14
 6408 199a B601      		movw r22,r12
 6409 199c 0995      		icall
 6410               	.LVL468:
2132:fat.c         ****             return 0;
 6411               		.loc 1 2132 11 view .LVU1297
 6412 199e 8823      		tst r24
 6413 19a0 01F0      		breq .L441
2136:fat.c         ****         
 6414               		.loc 1 2136 9 is_stmt 1 view .LVU1298
2136:fat.c         ****         
 6415               		.loc 1 2136 19 is_stmt 0 view .LVU1299
 6416 19a2 9982      		std Y+1,r9
2139:fat.c         ****             return 0;
 6417               		.loc 1 2139 9 is_stmt 1 view .LVU1300
2139:fat.c         ****             return 0;
 6418               		.loc 1 2139 26 is_stmt 0 view .LVU1301
 6419 19a4 D801      		movw r26,r16
 6420 19a6 ED91      		ld r30,X+
 6421 19a8 FC91      		ld r31,X
2139:fat.c         ****             return 0;
 6422               		.loc 1 2139 13 view .LVU1302
 6423 19aa 0480      		ldd __tmp_reg__,Z+4
 6424 19ac F581      		ldd r31,Z+5
 6425 19ae E02D      		mov r30,__tmp_reg__
 6426 19b0 2CE0      		ldi r18,lo8(12)
 6427 19b2 30E0      		ldi r19,0
 6428 19b4 AE01      		movw r20,r28
 6429 19b6 4F5F      		subi r20,-1
 6430 19b8 5F4F      		sbci r21,-1
 6431 19ba C701      		movw r24,r14
 6432 19bc B601      		movw r22,r12
 6433 19be 0995      		icall
 6434               	.LVL469:
2139:fat.c         ****             return 0;
 6435               		.loc 1 2139 11 view .LVU1303
 6436 19c0 8823      		tst r24
 6437 19c2 01F0      		breq .L441
2143:fat.c         ****             break;
 6438               		.loc 1 2143 9 is_stmt 1 view .LVU1304
2143:fat.c         ****             break;
 6439               		.loc 1 2143 11 is_stmt 0 view .LVU1305
 6440 19c4 8C85      		ldd r24,Y+12
 6441 19c6 8F30      		cpi r24,lo8(15)
 6442 19c8 01F4      		brne .L437
2146:fat.c         ****     }
 6443               		.loc 1 2146 9 is_stmt 1 view .LVU1306
2146:fat.c         ****     }
 6444               		.loc 1 2146 26 is_stmt 0 view .LVU1307
 6445 19ca B0E2      		ldi r27,32
 6446 19cc CB0E      		add r12,r27
 6447 19ce D11C      		adc r13,__zero_reg__
 6448 19d0 E11C      		adc r14,__zero_reg__
 6449 19d2 F11C      		adc r15,__zero_reg__
 6450               	.LVL470:
2146:fat.c         ****     }
 6451               		.loc 1 2146 26 view .LVU1308
 6452 19d4 00C0      		rjmp .L434
 6453               	.L437:
2158:fat.c         **** }
 6454               		.loc 1 2158 5 is_stmt 1 view .LVU1309
2158:fat.c         **** }
 6455               		.loc 1 2158 22 is_stmt 0 view .LVU1310
 6456 19d6 F501      		movw r30,r10
 6457 19d8 61A1      		ldd r22,Z+33
 6458 19da 72A1      		ldd r23,Z+34
2158:fat.c         **** }
 6459               		.loc 1 2158 37 view .LVU1311
 6460 19dc 81E0      		ldi r24,lo8(1)
 6461 19de 6115      		cp r22,__zero_reg__
 6462 19e0 7105      		cpc r23,__zero_reg__
 6463 19e2 01F0      		breq .L432
2158:fat.c         **** }
 6464               		.loc 1 2158 40 view .LVU1312
 6465 19e4 C801      		movw r24,r16
 6466 19e6 0E94 0000 		call fat_free_clusters
 6467               	.LVL471:
2158:fat.c         **** }
 6468               		.loc 1 2158 37 view .LVU1313
 6469 19ea 91E0      		ldi r25,lo8(1)
 6470 19ec 8111      		cpse r24,__zero_reg__
 6471 19ee 00C0      		rjmp .L439
 6472 19f0 90E0      		ldi r25,0
 6473               	.L439:
 6474 19f2 892F      		mov r24,r25
 6475               	.LVL472:
 6476               	.L432:
 6477               	/* epilogue start */
2158:fat.c         **** }
 6478               		.loc 1 2158 37 view .LVU1314
 6479               	.LBE137:
 6480               	.LBE136:
2159:fat.c         **** #endif
 6481               		.loc 1 2159 1 view .LVU1315
 6482 19f4 2C96      		adiw r28,12
 6483 19f6 0FB6      		in __tmp_reg__,__SREG__
 6484 19f8 F894      		cli
 6485 19fa DEBF      		out __SP_H__,r29
 6486 19fc 0FBE      		out __SREG__,__tmp_reg__
 6487 19fe CDBF      		out __SP_L__,r28
 6488 1a00 DF91      		pop r29
 6489 1a02 CF91      		pop r28
 6490 1a04 1F91      		pop r17
 6491 1a06 0F91      		pop r16
 6492               	.LVL473:
2159:fat.c         **** #endif
 6493               		.loc 1 2159 1 view .LVU1316
 6494 1a08 FF90      		pop r15
 6495 1a0a EF90      		pop r14
 6496 1a0c DF90      		pop r13
 6497 1a0e CF90      		pop r12
 6498 1a10 BF90      		pop r11
 6499 1a12 AF90      		pop r10
 6500               	.LVL474:
2159:fat.c         **** #endif
 6501               		.loc 1 2159 1 view .LVU1317
 6502 1a14 9F90      		pop r9
 6503 1a16 0895      		ret
 6504               	.LVL475:
 6505               	.L441:
2120:fat.c         **** 
 6506               		.loc 1 2120 16 view .LVU1318
 6507 1a18 80E0      		ldi r24,0
 6508 1a1a 00C0      		rjmp .L432
 6509               		.cfi_endproc
 6510               	.LFE26:
 6512               	.global	fat_move_file
 6514               	fat_move_file:
 6515               	.LVL476:
 6516               	.LFB27:
2188:fat.c         ****     if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
 6517               		.loc 1 2188 1 is_stmt 1 view -0
 6518               		.cfi_startproc
2188:fat.c         ****     if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
 6519               		.loc 1 2188 1 is_stmt 0 view .LVU1320
 6520 1a1c DF92      		push r13
 6521               	.LCFI254:
 6522               		.cfi_def_cfa_offset 3
 6523               		.cfi_offset 13, -2
 6524 1a1e EF92      		push r14
 6525               	.LCFI255:
 6526               		.cfi_def_cfa_offset 4
 6527               		.cfi_offset 14, -3
 6528 1a20 FF92      		push r15
 6529               	.LCFI256:
 6530               		.cfi_def_cfa_offset 5
 6531               		.cfi_offset 15, -4
 6532 1a22 0F93      		push r16
 6533               	.LCFI257:
 6534               		.cfi_def_cfa_offset 6
 6535               		.cfi_offset 16, -5
 6536 1a24 1F93      		push r17
 6537               	.LCFI258:
 6538               		.cfi_def_cfa_offset 7
 6539               		.cfi_offset 17, -6
 6540 1a26 CF93      		push r28
 6541               	.LCFI259:
 6542               		.cfi_def_cfa_offset 8
 6543               		.cfi_offset 28, -7
 6544 1a28 DF93      		push r29
 6545               	.LCFI260:
 6546               		.cfi_def_cfa_offset 9
 6547               		.cfi_offset 29, -8
 6548 1a2a CDB7      		in r28,__SP_L__
 6549 1a2c DEB7      		in r29,__SP_H__
 6550               	.LCFI261:
 6551               		.cfi_def_cfa_register 28
 6552 1a2e AB97      		sbiw r28,43
 6553               	.LCFI262:
 6554               		.cfi_def_cfa_offset 52
 6555 1a30 0FB6      		in __tmp_reg__,__SREG__
 6556 1a32 F894      		cli
 6557 1a34 DEBF      		out __SP_H__,r29
 6558 1a36 0FBE      		out __SREG__,__tmp_reg__
 6559 1a38 CDBF      		out __SP_L__,r28
 6560               	/* prologue: function */
 6561               	/* frame size = 43 */
 6562               	/* stack size = 50 */
 6563               	.L__stack_usage = 50
 6564 1a3a 7C01      		movw r14,r24
 6565 1a3c 8B01      		movw r16,r22
 6566 1a3e CA01      		movw r24,r20
 6567               	.LVL477:
2189:fat.c         ****         return 0;
 6568               		.loc 1 2189 5 is_stmt 1 view .LVU1321
2189:fat.c         ****         return 0;
 6569               		.loc 1 2189 7 is_stmt 0 view .LVU1322
 6570 1a40 E114      		cp r14,__zero_reg__
 6571 1a42 F104      		cpc r15,__zero_reg__
 6572 1a44 01F4      		brne .L451
 6573               	.LVL478:
 6574               	.L453:
2190:fat.c         ****     if(fs != parent_new->fs)
 6575               		.loc 1 2190 16 view .LVU1323
 6576 1a46 D12C      		mov r13,__zero_reg__
 6577               	.L450:
2226:fat.c         **** #endif
 6578               		.loc 1 2226 1 view .LVU1324
 6579 1a48 8D2D      		mov r24,r13
 6580               	/* epilogue start */
 6581 1a4a AB96      		adiw r28,43
 6582 1a4c 0FB6      		in __tmp_reg__,__SREG__
 6583 1a4e F894      		cli
 6584 1a50 DEBF      		out __SP_H__,r29
 6585 1a52 0FBE      		out __SREG__,__tmp_reg__
 6586 1a54 CDBF      		out __SP_L__,r28
 6587 1a56 DF91      		pop r29
 6588 1a58 CF91      		pop r28
 6589 1a5a 1F91      		pop r17
 6590 1a5c 0F91      		pop r16
 6591               	.LVL479:
2226:fat.c         **** #endif
 6592               		.loc 1 2226 1 view .LVU1325
 6593 1a5e FF90      		pop r15
 6594 1a60 EF90      		pop r14
 6595               	.LVL480:
2226:fat.c         **** #endif
 6596               		.loc 1 2226 1 view .LVU1326
 6597 1a62 DF90      		pop r13
 6598 1a64 0895      		ret
 6599               	.LVL481:
 6600               	.L451:
2189:fat.c         ****         return 0;
 6601               		.loc 1 2189 12 discriminator 1 view .LVU1327
 6602 1a66 672B      		or r22,r23
 6603 1a68 01F0      		breq .L453
2189:fat.c         ****         return 0;
 6604               		.loc 1 2189 26 discriminator 2 view .LVU1328
 6605 1a6a 0097      		sbiw r24,0
 6606 1a6c 01F0      		breq .L453
2189:fat.c         ****         return 0;
 6607               		.loc 1 2189 41 discriminator 3 view .LVU1329
 6608 1a6e 2115      		cp r18,__zero_reg__
 6609 1a70 3105      		cpc r19,__zero_reg__
 6610 1a72 01F0      		breq .L454
2189:fat.c         ****         return 0;
 6611               		.loc 1 2189 54 discriminator 4 view .LVU1330
 6612 1a74 F901      		movw r30,r18
 6613 1a76 4081      		ld r20,Z
 6614               	.LVL482:
2189:fat.c         ****         return 0;
 6615               		.loc 1 2189 54 discriminator 4 view .LVU1331
 6616 1a78 4423      		tst r20
 6617 1a7a 01F0      		breq .L453
 6618               	.L454:
2191:fat.c         ****         return 0;
 6619               		.loc 1 2191 5 is_stmt 1 view .LVU1332
2191:fat.c         ****         return 0;
 6620               		.loc 1 2191 7 is_stmt 0 view .LVU1333
 6621 1a7c FC01      		movw r30,r24
 6622 1a7e 4081      		ld r20,Z
 6623 1a80 5181      		ldd r21,Z+1
 6624 1a82 4E15      		cp r20,r14
 6625 1a84 5F05      		cpc r21,r15
 6626 1a86 01F4      		brne .L453
2195:fat.c         ****         file_new = dir_entry->long_name;
 6627               		.loc 1 2195 5 is_stmt 1 view .LVU1334
2195:fat.c         ****         file_new = dir_entry->long_name;
 6628               		.loc 1 2195 7 is_stmt 0 view .LVU1335
 6629 1a88 2115      		cp r18,__zero_reg__
 6630 1a8a 3105      		cpc r19,__zero_reg__
 6631 1a8c 01F4      		brne .L455
2196:fat.c         **** 
 6632               		.loc 1 2196 9 is_stmt 1 view .LVU1336
2196:fat.c         **** 
 6633               		.loc 1 2196 18 is_stmt 0 view .LVU1337
 6634 1a8e 9801      		movw r18,r16
 6635               	.LVL483:
 6636               	.L455:
2199:fat.c         ****     if(!fat_create_file(parent_new, file_new, &dir_entry_new))
 6637               		.loc 1 2199 5 is_stmt 1 view .LVU1338
2200:fat.c         ****         return 0;
 6638               		.loc 1 2200 5 view .LVU1339
2200:fat.c         ****         return 0;
 6639               		.loc 1 2200 9 is_stmt 0 view .LVU1340
 6640 1a90 AE01      		movw r20,r28
 6641 1a92 4F5F      		subi r20,-1
 6642 1a94 5F4F      		sbci r21,-1
 6643 1a96 B901      		movw r22,r18
 6644 1a98 0E94 0000 		call fat_create_file
 6645               	.LVL484:
2200:fat.c         ****         return 0;
 6646               		.loc 1 2200 7 view .LVU1341
 6647 1a9c 8823      		tst r24
 6648 1a9e 01F0      		breq .L453
2204:fat.c         **** #if FAT_DATETIME_SUPPORT
 6649               		.loc 1 2204 5 is_stmt 1 view .LVU1342
2204:fat.c         **** #if FAT_DATETIME_SUPPORT
 6650               		.loc 1 2204 30 is_stmt 0 view .LVU1343
 6651 1aa0 F801      		movw r30,r16
 6652 1aa2 80A1      		ldd r24,Z+32
 6653 1aa4 89A3      		std Y+33,r24
2209:fat.c         ****     dir_entry_new.file_size = dir_entry->file_size;
 6654               		.loc 1 2209 5 is_stmt 1 view .LVU1344
2209:fat.c         ****     dir_entry_new.file_size = dir_entry->file_size;
 6655               		.loc 1 2209 27 is_stmt 0 view .LVU1345
 6656 1aa6 81A1      		ldd r24,Z+33
 6657 1aa8 92A1      		ldd r25,Z+34
 6658 1aaa 9BA3      		std Y+35,r25
 6659 1aac 8AA3      		std Y+34,r24
2210:fat.c         **** 
 6660               		.loc 1 2210 5 is_stmt 1 view .LVU1346
2210:fat.c         **** 
 6661               		.loc 1 2210 29 is_stmt 0 view .LVU1347
 6662 1aae 83A1      		ldd r24,Z+35
 6663 1ab0 94A1      		ldd r25,Z+36
 6664 1ab2 A5A1      		ldd r26,Z+37
 6665 1ab4 B6A1      		ldd r27,Z+38
 6666 1ab6 8CA3      		std Y+36,r24
 6667 1ab8 9DA3      		std Y+37,r25
 6668 1aba AEA3      		std Y+38,r26
 6669 1abc BFA3      		std Y+39,r27
2213:fat.c         ****     {
 6670               		.loc 1 2213 5 is_stmt 1 view .LVU1348
2213:fat.c         ****     {
 6671               		.loc 1 2213 9 is_stmt 0 view .LVU1349
 6672 1abe BE01      		movw r22,r28
 6673 1ac0 6F5F      		subi r22,-1
 6674 1ac2 7F4F      		sbci r23,-1
 6675 1ac4 C701      		movw r24,r14
 6676 1ac6 0E94 0000 		call fat_write_dir_entry
 6677               	.LVL485:
 6678 1aca D82E      		mov r13,r24
2213:fat.c         ****     {
 6679               		.loc 1 2213 7 view .LVU1350
 6680 1acc 8111      		cpse r24,__zero_reg__
 6681 1ace 00C0      		rjmp .L456
2215:fat.c         ****         return 0;
 6682               		.loc 1 2215 9 is_stmt 1 view .LVU1351
 6683 1ad0 BE01      		movw r22,r28
 6684 1ad2 6F5F      		subi r22,-1
 6685 1ad4 7F4F      		sbci r23,-1
 6686 1ad6 C701      		movw r24,r14
 6687 1ad8 0E94 0000 		call fat_delete_file
 6688               	.LVL486:
2216:fat.c         ****     }
 6689               		.loc 1 2216 9 view .LVU1352
2216:fat.c         ****     }
 6690               		.loc 1 2216 16 is_stmt 0 view .LVU1353
 6691 1adc 00C0      		rjmp .L450
 6692               	.L456:
2220:fat.c         ****     if(!fat_delete_file(fs, dir_entry))
 6693               		.loc 1 2220 5 is_stmt 1 view .LVU1354
2220:fat.c         ****     if(!fat_delete_file(fs, dir_entry))
 6694               		.loc 1 2220 24 is_stmt 0 view .LVU1355
 6695 1ade F801      		movw r30,r16
 6696 1ae0 12A2      		std Z+34,__zero_reg__
 6697 1ae2 11A2      		std Z+33,__zero_reg__
2221:fat.c         ****         return 0;
 6698               		.loc 1 2221 5 is_stmt 1 view .LVU1356
2221:fat.c         ****         return 0;
 6699               		.loc 1 2221 9 is_stmt 0 view .LVU1357
 6700 1ae4 B801      		movw r22,r16
 6701 1ae6 C701      		movw r24,r14
 6702 1ae8 0E94 0000 		call fat_delete_file
 6703               	.LVL487:
2221:fat.c         ****         return 0;
 6704               		.loc 1 2221 7 view .LVU1358
 6705 1aec 8823      		tst r24
 6706 1aee 01F4      		brne .+2
 6707 1af0 00C0      		rjmp .L453
2224:fat.c         ****     return 1;
 6708               		.loc 1 2224 5 is_stmt 1 view .LVU1359
2224:fat.c         ****     return 1;
 6709               		.loc 1 2224 16 is_stmt 0 view .LVU1360
 6710 1af2 8BE2      		ldi r24,lo8(43)
 6711 1af4 FE01      		movw r30,r28
 6712 1af6 3196      		adiw r30,1
 6713 1af8 D801      		movw r26,r16
 6714               		0:
 6715 1afa 0190      		ld r0,Z+
 6716 1afc 0D92      		st X+,r0
 6717 1afe 8A95      		dec r24
 6718 1b00 01F4      		brne 0b
2225:fat.c         **** }
 6719               		.loc 1 2225 5 is_stmt 1 view .LVU1361
2225:fat.c         **** }
 6720               		.loc 1 2225 12 is_stmt 0 view .LVU1362
 6721 1b02 DD24      		clr r13
 6722 1b04 D394      		inc r13
 6723 1b06 00C0      		rjmp .L450
 6724               		.cfi_endproc
 6725               	.LFE27:
 6727               	.global	fat_create_dir
 6729               	fat_create_dir:
 6730               	.LVL488:
 6731               	.LFB28:
2249:fat.c         ****     if(!parent || !dir || !dir[0] || !dir_entry)
 6732               		.loc 1 2249 1 is_stmt 1 view -0
 6733               		.cfi_startproc
2249:fat.c         ****     if(!parent || !dir || !dir[0] || !dir_entry)
 6734               		.loc 1 2249 1 is_stmt 0 view .LVU1364
 6735 1b08 4F92      		push r4
 6736               	.LCFI263:
 6737               		.cfi_def_cfa_offset 3
 6738               		.cfi_offset 4, -2
 6739 1b0a 5F92      		push r5
 6740               	.LCFI264:
 6741               		.cfi_def_cfa_offset 4
 6742               		.cfi_offset 5, -3
 6743 1b0c 6F92      		push r6
 6744               	.LCFI265:
 6745               		.cfi_def_cfa_offset 5
 6746               		.cfi_offset 6, -4
 6747 1b0e 7F92      		push r7
 6748               	.LCFI266:
 6749               		.cfi_def_cfa_offset 6
 6750               		.cfi_offset 7, -5
 6751 1b10 8F92      		push r8
 6752               	.LCFI267:
 6753               		.cfi_def_cfa_offset 7
 6754               		.cfi_offset 8, -6
 6755 1b12 9F92      		push r9
 6756               	.LCFI268:
 6757               		.cfi_def_cfa_offset 8
 6758               		.cfi_offset 9, -7
 6759 1b14 AF92      		push r10
 6760               	.LCFI269:
 6761               		.cfi_def_cfa_offset 9
 6762               		.cfi_offset 10, -8
 6763 1b16 BF92      		push r11
 6764               	.LCFI270:
 6765               		.cfi_def_cfa_offset 10
 6766               		.cfi_offset 11, -9
 6767 1b18 CF92      		push r12
 6768               	.LCFI271:
 6769               		.cfi_def_cfa_offset 11
 6770               		.cfi_offset 12, -10
 6771 1b1a DF92      		push r13
 6772               	.LCFI272:
 6773               		.cfi_def_cfa_offset 12
 6774               		.cfi_offset 13, -11
 6775 1b1c EF92      		push r14
 6776               	.LCFI273:
 6777               		.cfi_def_cfa_offset 13
 6778               		.cfi_offset 14, -12
 6779 1b1e FF92      		push r15
 6780               	.LCFI274:
 6781               		.cfi_def_cfa_offset 14
 6782               		.cfi_offset 15, -13
 6783 1b20 0F93      		push r16
 6784               	.LCFI275:
 6785               		.cfi_def_cfa_offset 15
 6786               		.cfi_offset 16, -14
 6787 1b22 1F93      		push r17
 6788               	.LCFI276:
 6789               		.cfi_def_cfa_offset 16
 6790               		.cfi_offset 17, -15
 6791 1b24 CF93      		push r28
 6792               	.LCFI277:
 6793               		.cfi_def_cfa_offset 17
 6794               		.cfi_offset 28, -16
 6795 1b26 DF93      		push r29
 6796               	.LCFI278:
 6797               		.cfi_def_cfa_offset 18
 6798               		.cfi_offset 29, -17
 6799               	/* prologue: function */
 6800               	/* frame size = 0 */
 6801               	/* stack size = 16 */
 6802               	.L__stack_usage = 16
 6803 1b28 5C01      		movw r10,r24
 6804 1b2a 4B01      		movw r8,r22
 6805 1b2c EA01      		movw r28,r20
2250:fat.c         ****         return 0;
 6806               		.loc 1 2250 5 is_stmt 1 view .LVU1365
2250:fat.c         ****         return 0;
 6807               		.loc 1 2250 7 is_stmt 0 view .LVU1366
 6808 1b2e 892B      		or r24,r25
 6809 1b30 01F4      		brne .L476
 6810               	.LVL489:
 6811               	.L500:
2305:fat.c         ****     }
 6812               		.loc 1 2305 9 is_stmt 1 view .LVU1367
2305:fat.c         ****     }
 6813               		.loc 1 2305 16 is_stmt 0 view .LVU1368
 6814 1b32 F12C      		mov r15,__zero_reg__
 6815               	.L475:
2316:fat.c         **** #endif
 6816               		.loc 1 2316 1 view .LVU1369
 6817 1b34 8F2D      		mov r24,r15
 6818               	/* epilogue start */
 6819 1b36 DF91      		pop r29
 6820 1b38 CF91      		pop r28
 6821               	.LVL490:
2316:fat.c         **** #endif
 6822               		.loc 1 2316 1 view .LVU1370
 6823 1b3a 1F91      		pop r17
 6824 1b3c 0F91      		pop r16
 6825 1b3e FF90      		pop r15
 6826 1b40 EF90      		pop r14
 6827 1b42 DF90      		pop r13
 6828 1b44 CF90      		pop r12
 6829 1b46 BF90      		pop r11
 6830 1b48 AF90      		pop r10
 6831               	.LVL491:
2316:fat.c         **** #endif
 6832               		.loc 1 2316 1 view .LVU1371
 6833 1b4a 9F90      		pop r9
 6834 1b4c 8F90      		pop r8
 6835               	.LVL492:
2316:fat.c         **** #endif
 6836               		.loc 1 2316 1 view .LVU1372
 6837 1b4e 7F90      		pop r7
 6838 1b50 6F90      		pop r6
 6839 1b52 5F90      		pop r5
 6840 1b54 4F90      		pop r4
 6841 1b56 0895      		ret
 6842               	.LVL493:
 6843               	.L476:
2250:fat.c         ****         return 0;
 6844               		.loc 1 2250 16 discriminator 1 view .LVU1373
 6845 1b58 6115      		cp r22,__zero_reg__
 6846 1b5a 7105      		cpc r23,__zero_reg__
 6847 1b5c 01F0      		breq .L500
2250:fat.c         ****         return 0;
 6848               		.loc 1 2250 24 discriminator 2 view .LVU1374
 6849 1b5e FB01      		movw r30,r22
 6850 1b60 8081      		ld r24,Z
 6851 1b62 8823      		tst r24
 6852 1b64 01F0      		breq .L500
2250:fat.c         ****         return 0;
 6853               		.loc 1 2250 35 discriminator 3 view .LVU1375
 6854 1b66 2097      		sbiw r28,0
 6855 1b68 01F0      		breq .L500
 6856               	.LVL494:
 6857               	.L479:
2254:fat.c         ****     {
 6858               		.loc 1 2254 11 view .LVU1376
 6859 1b6a BE01      		movw r22,r28
 6860 1b6c C501      		movw r24,r10
 6861 1b6e 0E94 0000 		call fat_read_dir
 6862               	.LVL495:
2254:fat.c         ****     {
 6863               		.loc 1 2254 10 view .LVU1377
 6864 1b72 8111      		cpse r24,__zero_reg__
 6865 1b74 00C0      		rjmp .L480
2263:fat.c         **** 
 6866               		.loc 1 2263 5 is_stmt 1 view .LVU1378
2263:fat.c         **** 
 6867               		.loc 1 2263 27 is_stmt 0 view .LVU1379
 6868 1b76 F501      		movw r30,r10
 6869 1b78 0081      		ld r16,Z
 6870 1b7a 1181      		ldd r17,Z+1
 6871               	.LVL496:
2266:fat.c         ****     if(!dir_cluster)
 6872               		.loc 1 2266 5 is_stmt 1 view .LVU1380
2266:fat.c         ****     if(!dir_cluster)
 6873               		.loc 1 2266 29 is_stmt 0 view .LVU1381
 6874 1b7c 41E0      		ldi r20,lo8(1)
 6875 1b7e 50E0      		ldi r21,0
 6876 1b80 70E0      		ldi r23,0
 6877 1b82 60E0      		ldi r22,0
 6878 1b84 C801      		movw r24,r16
 6879 1b86 0E94 0000 		call fat_append_clusters
 6880               	.LVL497:
 6881 1b8a 6C01      		movw r12,r24
 6882               	.LVL498:
2267:fat.c         ****         return 0;
 6883               		.loc 1 2267 5 is_stmt 1 view .LVU1382
2267:fat.c         ****         return 0;
 6884               		.loc 1 2267 7 is_stmt 0 view .LVU1383
 6885 1b8c 0097      		sbiw r24,0
 6886 1b8e 01F0      		breq .L500
2271:fat.c         ****     
 6887               		.loc 1 2271 5 is_stmt 1 view .LVU1384
 6888 1b90 BC01      		movw r22,r24
 6889 1b92 C801      		movw r24,r16
 6890 1b94 0E94 0000 		call fat_clear_cluster
 6891               	.LVL499:
2273:fat.c         ****     dir_entry->attributes = FAT_ATTRIB_DIR;
 6892               		.loc 1 2273 5 view .LVU1385
 6893 1b98 8BE2      		ldi r24,lo8(43)
 6894 1b9a FE01      		movw r30,r28
 6895               		0:
 6896 1b9c 1192      		st Z+,__zero_reg__
 6897 1b9e 8A95      		dec r24
 6898 1ba0 01F4      		brne 0b
2274:fat.c         **** 
 6899               		.loc 1 2274 5 view .LVU1386
2274:fat.c         **** 
 6900               		.loc 1 2274 27 is_stmt 0 view .LVU1387
 6901 1ba2 80E1      		ldi r24,lo8(16)
 6902 1ba4 88A3      		std Y+32,r24
2277:fat.c         ****                               (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
 6903               		.loc 1 2277 5 is_stmt 1 view .LVU1388
2278:fat.c         ****     dir_entry->long_name[0] = '.';
 6904               		.loc 1 2278 60 is_stmt 0 view .LVU1389
 6905 1ba6 F801      		movw r30,r16
 6906 1ba8 A089      		ldd r26,Z+16
 6907 1baa B189      		ldd r27,Z+17
 6908 1bac 9601      		movw r18,r12
 6909 1bae 2250      		subi r18,2
 6910 1bb0 3109      		sbc r19,__zero_reg__
 6911 1bb2 0E94 0000 		call __umulhisi3
2277:fat.c         ****                               (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
 6912               		.loc 1 2277 62 view .LVU1390
 6913 1bb6 4288      		ldd r4,Z+18
 6914 1bb8 5388      		ldd r5,Z+19
 6915 1bba 6488      		ldd r6,Z+20
 6916 1bbc 7588      		ldd r7,Z+21
 6917 1bbe 460E      		add r4,r22
 6918 1bc0 571E      		adc r5,r23
 6919 1bc2 681E      		adc r6,r24
 6920 1bc4 791E      		adc r7,r25
2277:fat.c         ****                               (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
 6921               		.loc 1 2277 29 view .LVU1391
 6922 1bc6 4FA2      		std Y+39,r4
 6923 1bc8 58A6      		std Y+40,r5
 6924 1bca 69A6      		std Y+41,r6
 6925 1bcc 7AA6      		std Y+42,r7
2279:fat.c         ****     dir_entry->cluster = dir_cluster;
 6926               		.loc 1 2279 5 is_stmt 1 view .LVU1392
2279:fat.c         ****     dir_entry->cluster = dir_cluster;
 6927               		.loc 1 2279 29 is_stmt 0 view .LVU1393
 6928 1bce 8EE2      		ldi r24,lo8(46)
 6929 1bd0 E82E      		mov r14,r24
 6930 1bd2 E882      		st Y,r14
2280:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
 6931               		.loc 1 2280 5 is_stmt 1 view .LVU1394
2280:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
 6932               		.loc 1 2280 24 is_stmt 0 view .LVU1395
 6933 1bd4 DAA2      		std Y+34,r13
 6934 1bd6 C9A2      		std Y+33,r12
2281:fat.c         ****     {
 6935               		.loc 1 2281 5 is_stmt 1 view .LVU1396
2281:fat.c         ****     {
 6936               		.loc 1 2281 9 is_stmt 0 view .LVU1397
 6937 1bd8 BE01      		movw r22,r28
 6938 1bda C801      		movw r24,r16
 6939 1bdc 0E94 0000 		call fat_write_dir_entry
 6940               	.LVL500:
 6941 1be0 F82E      		mov r15,r24
2281:fat.c         ****     {
 6942               		.loc 1 2281 7 view .LVU1398
 6943 1be2 8111      		cpse r24,__zero_reg__
 6944 1be4 00C0      		rjmp .L481
 6945               	.L501:
2311:fat.c         ****         return 0;
 6946               		.loc 1 2311 9 is_stmt 1 view .LVU1399
 6947 1be6 B601      		movw r22,r12
 6948 1be8 C801      		movw r24,r16
 6949 1bea 0E94 0000 		call fat_free_clusters
 6950               	.LVL501:
2312:fat.c         ****     }
 6951               		.loc 1 2312 9 view .LVU1400
2312:fat.c         ****     }
 6952               		.loc 1 2312 16 is_stmt 0 view .LVU1401
 6953 1bee 00C0      		rjmp .L475
 6954               	.LVL502:
 6955               	.L480:
2256:fat.c         ****         {
 6956               		.loc 1 2256 9 is_stmt 1 view .LVU1402
2256:fat.c         ****         {
 6957               		.loc 1 2256 12 is_stmt 0 view .LVU1403
 6958 1bf0 BE01      		movw r22,r28
 6959 1bf2 C401      		movw r24,r8
 6960 1bf4 0E94 0000 		call strcmp
 6961               	.LVL503:
2256:fat.c         ****         {
 6962               		.loc 1 2256 11 view .LVU1404
 6963 1bf8 892B      		or r24,r25
 6964 1bfa 01F0      		breq .+2
 6965 1bfc 00C0      		rjmp .L479
2258:fat.c         ****             return 0;
 6966               		.loc 1 2258 13 is_stmt 1 view .LVU1405
 6967 1bfe C501      		movw r24,r10
 6968 1c00 0E94 0000 		call fat_reset_dir
 6969               	.LVL504:
2259:fat.c         ****         }
 6970               		.loc 1 2259 13 view .LVU1406
 6971 1c04 00C0      		rjmp .L500
 6972               	.LVL505:
 6973               	.L481:
2288:fat.c         ****     dir_entry->long_name[1] = '.';
 6974               		.loc 1 2288 5 view .LVU1407
2288:fat.c         ****     dir_entry->long_name[1] = '.';
 6975               		.loc 1 2288 29 is_stmt 0 view .LVU1408
 6976 1c06 8FA1      		ldd r24,Y+39
 6977 1c08 98A5      		ldd r25,Y+40
 6978 1c0a A9A5      		ldd r26,Y+41
 6979 1c0c BAA5      		ldd r27,Y+42
 6980 1c0e 8096      		adiw r24,32
 6981 1c10 A11D      		adc r26,__zero_reg__
 6982 1c12 B11D      		adc r27,__zero_reg__
 6983 1c14 8FA3      		std Y+39,r24
 6984 1c16 98A7      		std Y+40,r25
 6985 1c18 A9A7      		std Y+41,r26
 6986 1c1a BAA7      		std Y+42,r27
2289:fat.c         ****     dir_entry->cluster = parent->dir_entry.cluster;
 6987               		.loc 1 2289 5 is_stmt 1 view .LVU1409
2289:fat.c         ****     dir_entry->cluster = parent->dir_entry.cluster;
 6988               		.loc 1 2289 29 is_stmt 0 view .LVU1410
 6989 1c1c E982      		std Y+1,r14
2290:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
 6990               		.loc 1 2290 5 is_stmt 1 view .LVU1411
2290:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
 6991               		.loc 1 2290 43 is_stmt 0 view .LVU1412
 6992 1c1e F501      		movw r30,r10
 6993 1c20 83A1      		ldd r24,Z+35
 6994 1c22 94A1      		ldd r25,Z+36
2290:fat.c         ****     if(!fat_write_dir_entry(fs, dir_entry))
 6995               		.loc 1 2290 24 view .LVU1413
 6996 1c24 9AA3      		std Y+34,r25
 6997 1c26 89A3      		std Y+33,r24
2291:fat.c         ****     {
 6998               		.loc 1 2291 5 is_stmt 1 view .LVU1414
2291:fat.c         ****     {
 6999               		.loc 1 2291 9 is_stmt 0 view .LVU1415
 7000 1c28 BE01      		movw r22,r28
 7001 1c2a C801      		movw r24,r16
 7002 1c2c 0E94 0000 		call fat_write_dir_entry
 7003               	.LVL506:
 7004 1c30 F82E      		mov r15,r24
2291:fat.c         ****     {
 7005               		.loc 1 2291 7 view .LVU1416
 7006 1c32 8823      		tst r24
 7007 1c34 01F0      		breq .L501
2298:fat.c         ****     dir_entry->cluster = dir_cluster;
 7008               		.loc 1 2298 5 is_stmt 1 view .LVU1417
 7009 1c36 4FE1      		ldi r20,lo8(31)
 7010 1c38 50E0      		ldi r21,0
 7011 1c3a B401      		movw r22,r8
 7012 1c3c CE01      		movw r24,r28
 7013 1c3e 0E94 0000 		call strncpy
 7014               	.LVL507:
2299:fat.c         **** 
 7015               		.loc 1 2299 5 view .LVU1418
2299:fat.c         **** 
 7016               		.loc 1 2299 24 is_stmt 0 view .LVU1419
 7017 1c42 DAA2      		std Y+34,r13
 7018 1c44 C9A2      		std Y+33,r12
2302:fat.c         ****     {
 7019               		.loc 1 2302 5 is_stmt 1 view .LVU1420
 7020               	.LVL508:
 7021               	.LBB140:
 7022               	.LBI140:
1741:fat.c         **** {
 7023               		.loc 1 1741 10 view .LVU1421
 7024               	.LBB141:
1743:fat.c         ****         return 0;
 7025               		.loc 1 1743 5 view .LVU1422
1744:fat.c         **** 
 7026               		.loc 1 1744 16 is_stmt 0 view .LVU1423
 7027 1c46 60E0      		ldi r22,0
 7028 1c48 70E0      		ldi r23,0
 7029 1c4a CB01      		movw r24,r22
1743:fat.c         ****         return 0;
 7030               		.loc 1 1743 7 view .LVU1424
 7031 1c4c 0115      		cp r16,__zero_reg__
 7032 1c4e 1105      		cpc r17,__zero_reg__
 7033 1c50 01F0      		breq .L483
1743:fat.c         ****         return 0;
 7034               		.loc 1 1743 7 view .LVU1425
 7035 1c52 B501      		movw r22,r10
 7036 1c54 6D5D      		subi r22,-35
 7037 1c56 7F4F      		sbci r23,-1
 7038 1c58 AE01      		movw r20,r28
 7039 1c5a C801      		movw r24,r16
 7040 1c5c 0E94 0000 		call fat_find_offset_for_dir_entry.isra.4.part.5
 7041               	.LVL509:
 7042               	.L483:
1743:fat.c         ****         return 0;
 7043               		.loc 1 1743 7 view .LVU1426
 7044               	.LBE141:
 7045               	.LBE140:
2302:fat.c         ****     {
 7046               		.loc 1 2302 34 view .LVU1427
 7047 1c60 6FA3      		std Y+39,r22
 7048 1c62 78A7      		std Y+40,r23
 7049 1c64 89A7      		std Y+41,r24
 7050 1c66 9AA7      		std Y+42,r25
2302:fat.c         ****     {
 7051               		.loc 1 2302 7 view .LVU1428
 7052 1c68 672B      		or r22,r23
 7053 1c6a 682B      		or r22,r24
 7054 1c6c 692B      		or r22,r25
 7055 1c6e 01F4      		brne .L484
2304:fat.c         ****         return 0;
 7056               		.loc 1 2304 9 is_stmt 1 view .LVU1429
 7057 1c70 B601      		movw r22,r12
 7058 1c72 C801      		movw r24,r16
 7059 1c74 0E94 0000 		call fat_free_clusters
 7060               	.LVL510:
 7061 1c78 00C0      		rjmp .L500
 7062               	.L484:
2309:fat.c         ****     {
 7063               		.loc 1 2309 5 view .LVU1430
2309:fat.c         ****     {
 7064               		.loc 1 2309 9 is_stmt 0 view .LVU1431
 7065 1c7a BE01      		movw r22,r28
 7066 1c7c C801      		movw r24,r16
 7067 1c7e 0E94 0000 		call fat_write_dir_entry
 7068               	.LVL511:
 7069 1c82 F82E      		mov r15,r24
2309:fat.c         ****     {
 7070               		.loc 1 2309 7 view .LVU1432
 7071 1c84 8823      		tst r24
 7072 1c86 01F4      		brne .+2
 7073 1c88 00C0      		rjmp .L501
2315:fat.c         **** }
 7074               		.loc 1 2315 12 view .LVU1433
 7075 1c8a FF24      		clr r15
 7076 1c8c F394      		inc r15
 7077 1c8e 00C0      		rjmp .L475
 7078               		.cfi_endproc
 7079               	.LFE28:
 7081               	.global	fat_get_fs_size
 7083               	fat_get_fs_size:
 7084               	.LVL512:
 7085               	.LFB29:
2449:fat.c         ****     if(!fs)
 7086               		.loc 1 2449 1 is_stmt 1 view -0
 7087               		.cfi_startproc
 7088               	/* prologue: function */
 7089               	/* frame size = 0 */
 7090               	/* stack size = 0 */
 7091               	.L__stack_usage = 0
2450:fat.c         ****         return 0;
 7092               		.loc 1 2450 5 view .LVU1435
2450:fat.c         ****         return 0;
 7093               		.loc 1 2450 7 is_stmt 0 view .LVU1436
 7094 1c90 0097      		sbiw r24,0
 7095 1c92 01F0      		breq .L504
2458:fat.c         **** }
 7096               		.loc 1 2458 9 is_stmt 1 view .LVU1437
2458:fat.c         **** }
 7097               		.loc 1 2458 48 is_stmt 0 view .LVU1438
 7098 1c94 FC01      		movw r30,r24
 7099 1c96 2285      		ldd r18,Z+10
 7100 1c98 3385      		ldd r19,Z+11
 7101 1c9a 4485      		ldd r20,Z+12
 7102 1c9c 5585      		ldd r21,Z+13
 7103 1c9e 5695      		lsr r21
 7104 1ca0 4795      		ror r20
 7105 1ca2 3795      		ror r19
 7106 1ca4 2795      		ror r18
 7107               	.LVL513:
2458:fat.c         **** }
 7108               		.loc 1 2458 16 view .LVU1439
 7109 1ca6 2250      		subi r18,2
 7110 1ca8 3109      		sbc r19,__zero_reg__
 7111 1caa 4109      		sbc r20,__zero_reg__
 7112 1cac 5109      		sbc r21,__zero_reg__
2458:fat.c         **** }
 7113               		.loc 1 2458 69 view .LVU1440
 7114 1cae A089      		ldd r26,Z+16
 7115 1cb0 B189      		ldd r27,Z+17
2458:fat.c         **** }
 7116               		.loc 1 2458 57 view .LVU1441
 7117 1cb2 0E94 0000 		call __muluhisi3
 7118 1cb6 0895      		ret
 7119               	.LVL514:
 7120               	.L504:
2451:fat.c         **** 
 7121               		.loc 1 2451 16 view .LVU1442
 7122 1cb8 60E0      		ldi r22,0
 7123 1cba 70E0      		ldi r23,0
 7124 1cbc CB01      		movw r24,r22
 7125               	/* epilogue start */
2459:fat.c         **** 
 7126               		.loc 1 2459 1 view .LVU1443
 7127 1cbe 0895      		ret
 7128               		.cfi_endproc
 7129               	.LFE29:
 7131               	.global	fat_get_fs_free
 7133               	fat_get_fs_free:
 7134               	.LVL515:
 7135               	.LFB30:
2472:fat.c         ****     if(!fs)
 7136               		.loc 1 2472 1 is_stmt 1 view -0
 7137               		.cfi_startproc
2472:fat.c         ****     if(!fs)
 7138               		.loc 1 2472 1 is_stmt 0 view .LVU1445
 7139 1cc0 2F92      		push r2
 7140               	.LCFI279:
 7141               		.cfi_def_cfa_offset 3
 7142               		.cfi_offset 2, -2
 7143 1cc2 3F92      		push r3
 7144               	.LCFI280:
 7145               		.cfi_def_cfa_offset 4
 7146               		.cfi_offset 3, -3
 7147 1cc4 4F92      		push r4
 7148               	.LCFI281:
 7149               		.cfi_def_cfa_offset 5
 7150               		.cfi_offset 4, -4
 7151 1cc6 5F92      		push r5
 7152               	.LCFI282:
 7153               		.cfi_def_cfa_offset 6
 7154               		.cfi_offset 5, -5
 7155 1cc8 6F92      		push r6
 7156               	.LCFI283:
 7157               		.cfi_def_cfa_offset 7
 7158               		.cfi_offset 6, -6
 7159 1cca 7F92      		push r7
 7160               	.LCFI284:
 7161               		.cfi_def_cfa_offset 8
 7162               		.cfi_offset 7, -7
 7163 1ccc 8F92      		push r8
 7164               	.LCFI285:
 7165               		.cfi_def_cfa_offset 9
 7166               		.cfi_offset 8, -8
 7167 1cce 9F92      		push r9
 7168               	.LCFI286:
 7169               		.cfi_def_cfa_offset 10
 7170               		.cfi_offset 9, -9
 7171 1cd0 AF92      		push r10
 7172               	.LCFI287:
 7173               		.cfi_def_cfa_offset 11
 7174               		.cfi_offset 10, -10
 7175 1cd2 BF92      		push r11
 7176               	.LCFI288:
 7177               		.cfi_def_cfa_offset 12
 7178               		.cfi_offset 11, -11
 7179 1cd4 CF92      		push r12
 7180               	.LCFI289:
 7181               		.cfi_def_cfa_offset 13
 7182               		.cfi_offset 12, -12
 7183 1cd6 DF92      		push r13
 7184               	.LCFI290:
 7185               		.cfi_def_cfa_offset 14
 7186               		.cfi_offset 13, -13
 7187 1cd8 EF92      		push r14
 7188               	.LCFI291:
 7189               		.cfi_def_cfa_offset 15
 7190               		.cfi_offset 14, -14
 7191 1cda FF92      		push r15
 7192               	.LCFI292:
 7193               		.cfi_def_cfa_offset 16
 7194               		.cfi_offset 15, -15
 7195 1cdc 0F93      		push r16
 7196               	.LCFI293:
 7197               		.cfi_def_cfa_offset 17
 7198               		.cfi_offset 16, -16
 7199 1cde 1F93      		push r17
 7200               	.LCFI294:
 7201               		.cfi_def_cfa_offset 18
 7202               		.cfi_offset 17, -17
 7203 1ce0 CF93      		push r28
 7204               	.LCFI295:
 7205               		.cfi_def_cfa_offset 19
 7206               		.cfi_offset 28, -18
 7207 1ce2 DF93      		push r29
 7208               	.LCFI296:
 7209               		.cfi_def_cfa_offset 20
 7210               		.cfi_offset 29, -19
 7211 1ce4 CDB7      		in r28,__SP_L__
 7212 1ce6 DEB7      		in r29,__SP_H__
 7213               	.LCFI297:
 7214               		.cfi_def_cfa_register 28
 7215 1ce8 A897      		sbiw r28,40
 7216               	.LCFI298:
 7217               		.cfi_def_cfa_offset 60
 7218 1cea 0FB6      		in __tmp_reg__,__SREG__
 7219 1cec F894      		cli
 7220 1cee DEBF      		out __SP_H__,r29
 7221 1cf0 0FBE      		out __SREG__,__tmp_reg__
 7222 1cf2 CDBF      		out __SP_L__,r28
 7223               	/* prologue: function */
 7224               	/* frame size = 40 */
 7225               	/* stack size = 58 */
 7226               	.L__stack_usage = 58
 7227 1cf4 1C01      		movw r2,r24
2473:fat.c         ****         return 0;
 7228               		.loc 1 2473 5 is_stmt 1 view .LVU1446
2473:fat.c         ****         return 0;
 7229               		.loc 1 2473 7 is_stmt 0 view .LVU1447
 7230 1cf6 892B      		or r24,r25
 7231 1cf8 01F4      		brne .L506
 7232               	.LVL516:
 7233               	.L510:
2474:fat.c         **** 
 7234               		.loc 1 2474 16 view .LVU1448
 7235 1cfa 60E0      		ldi r22,0
 7236 1cfc 70E0      		ldi r23,0
 7237 1cfe CB01      		movw r24,r22
 7238               	.L505:
 7239               	/* epilogue start */
2510:fat.c         **** 
 7240               		.loc 1 2510 1 view .LVU1449
 7241 1d00 A896      		adiw r28,40
 7242 1d02 0FB6      		in __tmp_reg__,__SREG__
 7243 1d04 F894      		cli
 7244 1d06 DEBF      		out __SP_H__,r29
 7245 1d08 0FBE      		out __SREG__,__tmp_reg__
 7246 1d0a CDBF      		out __SP_L__,r28
 7247 1d0c DF91      		pop r29
 7248 1d0e CF91      		pop r28
 7249 1d10 1F91      		pop r17
 7250 1d12 0F91      		pop r16
 7251 1d14 FF90      		pop r15
 7252 1d16 EF90      		pop r14
 7253 1d18 DF90      		pop r13
 7254 1d1a CF90      		pop r12
 7255 1d1c BF90      		pop r11
 7256 1d1e AF90      		pop r10
 7257 1d20 9F90      		pop r9
 7258 1d22 8F90      		pop r8
 7259 1d24 7F90      		pop r7
 7260 1d26 6F90      		pop r6
 7261 1d28 5F90      		pop r5
 7262 1d2a 4F90      		pop r4
 7263 1d2c 3F90      		pop r3
 7264 1d2e 2F90      		pop r2
 7265               	.LVL517:
2510:fat.c         **** 
 7266               		.loc 1 2510 1 view .LVU1450
 7267 1d30 0895      		ret
 7268               	.LVL518:
 7269               	.L506:
2476:fat.c         ****     struct fat_usage_count_callback_arg count_arg;
 7270               		.loc 1 2476 5 is_stmt 1 view .LVU1451
2477:fat.c         ****     count_arg.cluster_count = 0;
 7271               		.loc 1 2477 5 view .LVU1452
2478:fat.c         ****     count_arg.buffer_size = sizeof(fat);
 7272               		.loc 1 2478 5 view .LVU1453
2478:fat.c         ****     count_arg.buffer_size = sizeof(fat);
 7273               		.loc 1 2478 29 is_stmt 0 view .LVU1454
 7274 1d32 1AA2      		std Y+34,__zero_reg__
 7275 1d34 19A2      		std Y+33,__zero_reg__
2479:fat.c         **** 
 7276               		.loc 1 2479 5 is_stmt 1 view .LVU1455
2479:fat.c         **** 
 7277               		.loc 1 2479 27 is_stmt 0 view .LVU1456
 7278 1d36 80E2      		ldi r24,lo8(32)
 7279 1d38 90E0      		ldi r25,0
 7280 1d3a 9CA3      		std Y+36,r25
 7281 1d3c 8BA3      		std Y+35,r24
2481:fat.c         ****     uint32_t fat_size = fs->header.fat_size;
 7282               		.loc 1 2481 5 is_stmt 1 view .LVU1457
2481:fat.c         ****     uint32_t fat_size = fs->header.fat_size;
 7283               		.loc 1 2481 14 is_stmt 0 view .LVU1458
 7284 1d3e D101      		movw r26,r2
 7285 1d40 1696      		adiw r26,6
 7286 1d42 8D91      		ld r24,X+
 7287 1d44 9D91      		ld r25,X+
 7288 1d46 0D90      		ld __tmp_reg__,X+
 7289 1d48 BC91      		ld r27,X
 7290 1d4a A02D      		mov r26,__tmp_reg__
 7291 1d4c 8DA3      		std Y+37,r24
 7292 1d4e 9EA3      		std Y+38,r25
 7293 1d50 AFA3      		std Y+39,r26
 7294 1d52 B8A7      		std Y+40,r27
 7295               	.LVL519:
2482:fat.c         ****     while(fat_size > 0)
 7296               		.loc 1 2482 5 is_stmt 1 view .LVU1459
2482:fat.c         ****     while(fat_size > 0)
 7297               		.loc 1 2482 14 is_stmt 0 view .LVU1460
 7298 1d54 F101      		movw r30,r2
 7299 1d56 8284      		ldd r8,Z+10
 7300 1d58 9384      		ldd r9,Z+11
 7301 1d5a A484      		ldd r10,Z+12
 7302 1d5c B584      		ldd r11,Z+13
 7303               	.LVL520:
2483:fat.c         ****     {
 7304               		.loc 1 2483 5 is_stmt 1 view .LVU1461
 7305               	.L508:
2483:fat.c         ****     {
 7306               		.loc 1 2483 10 is_stmt 0 view .LVU1462
 7307 1d5e 8114      		cp r8,__zero_reg__
 7308 1d60 9104      		cpc r9,__zero_reg__
 7309 1d62 A104      		cpc r10,__zero_reg__
 7310 1d64 B104      		cpc r11,__zero_reg__
 7311 1d66 01F4      		brne .L511
2509:fat.c         **** }
 7312               		.loc 1 2509 5 is_stmt 1 view .LVU1463
2509:fat.c         **** }
 7313               		.loc 1 2509 47 is_stmt 0 view .LVU1464
 7314 1d68 29A1      		ldd r18,Y+33
 7315 1d6a 3AA1      		ldd r19,Y+34
 7316 1d6c F101      		movw r30,r2
 7317 1d6e A089      		ldd r26,Z+16
 7318 1d70 B189      		ldd r27,Z+17
 7319 1d72 0E94 0000 		call __umulhisi3
 7320 1d76 00C0      		rjmp .L505
 7321               	.L511:
 7322               	.LBB142:
2485:fat.c         ****         if(fat_size < length)
 7323               		.loc 1 2485 9 is_stmt 1 view .LVU1465
 7324               	.LVL521:
2486:fat.c         ****             length = fat_size;
 7325               		.loc 1 2486 9 view .LVU1466
2486:fat.c         ****             length = fat_size;
 7326               		.loc 1 2486 11 is_stmt 0 view .LVU1467
 7327 1d78 9EEF      		ldi r25,lo8(-2)
 7328 1d7a 492E      		mov r4,r25
 7329 1d7c 5524      		clr r5
 7330 1d7e 5A94      		dec r5
 7331 1d80 612C      		mov r6,__zero_reg__
 7332 1d82 712C      		mov r7,__zero_reg__
 7333 1d84 FEEF      		ldi r31,-2
 7334 1d86 8F16      		cp r8,r31
 7335 1d88 FFEF      		ldi r31,-1
 7336 1d8a 9F06      		cpc r9,r31
 7337 1d8c A104      		cpc r10,__zero_reg__
 7338 1d8e B104      		cpc r11,__zero_reg__
 7339 1d90 00F4      		brsh .L509
 7340 1d92 2401      		movw r4,r8
 7341 1d94 3501      		movw r6,r10
 7342               	.L509:
 7343               	.LVL522:
2489:fat.c         ****                                                 fat,
 7344               		.loc 1 2489 9 is_stmt 1 view .LVU1468
2489:fat.c         ****                                                 fat,
 7345               		.loc 1 2489 26 is_stmt 0 view .LVU1469
 7346 1d96 D101      		movw r26,r2
 7347 1d98 ED91      		ld r30,X+
 7348 1d9a FC91      		ld r31,X
2489:fat.c         ****                                                 fat,
 7349               		.loc 1 2489 13 view .LVU1470
 7350 1d9c 0280      		ldd __tmp_reg__,Z+2
 7351 1d9e F381      		ldd r31,Z+3
 7352 1da0 E02D      		mov r30,__tmp_reg__
 7353 1da2 CE01      		movw r24,r28
 7354 1da4 8196      		adiw r24,33
 7355 1da6 6C01      		movw r12,r24
 7356 1da8 80E0      		ldi r24,lo8(gs(fat_get_fs_free_16_callback))
 7357 1daa E82E      		mov r14,r24
 7358 1dac 80E0      		ldi r24,hi8(gs(fat_get_fs_free_16_callback))
 7359 1dae F82E      		mov r15,r24
 7360 1db0 8201      		movw r16,r4
 7361 1db2 20E2      		ldi r18,lo8(32)
 7362 1db4 30E0      		ldi r19,0
 7363 1db6 AE01      		movw r20,r28
 7364 1db8 4F5F      		subi r20,-1
 7365 1dba 5F4F      		sbci r21,-1
 7366 1dbc 6DA1      		ldd r22,Y+37
 7367 1dbe 7EA1      		ldd r23,Y+38
 7368 1dc0 8FA1      		ldd r24,Y+39
 7369 1dc2 98A5      		ldd r25,Y+40
 7370 1dc4 0995      		icall
 7371               	.LVL523:
2489:fat.c         ****                                                 fat,
 7372               		.loc 1 2489 11 view .LVU1471
 7373 1dc6 8823      		tst r24
 7374 1dc8 01F4      		brne .+2
 7375 1dca 00C0      		rjmp .L510
2505:fat.c         ****         fat_size -= length;
 7376               		.loc 1 2505 9 is_stmt 1 view .LVU1472
2505:fat.c         ****         fat_size -= length;
 7377               		.loc 1 2505 20 is_stmt 0 view .LVU1473
 7378 1dcc 8DA1      		ldd r24,Y+37
 7379 1dce 9EA1      		ldd r25,Y+38
 7380 1dd0 AFA1      		ldd r26,Y+39
 7381 1dd2 B8A5      		ldd r27,Y+40
 7382 1dd4 840D      		add r24,r4
 7383 1dd6 951D      		adc r25,r5
 7384 1dd8 A61D      		adc r26,r6
 7385 1dda B71D      		adc r27,r7
 7386 1ddc 8DA3      		std Y+37,r24
 7387 1dde 9EA3      		std Y+38,r25
 7388 1de0 AFA3      		std Y+39,r26
 7389 1de2 B8A7      		std Y+40,r27
 7390               	.LVL524:
2506:fat.c         ****     }
 7391               		.loc 1 2506 9 is_stmt 1 view .LVU1474
2506:fat.c         ****     }
 7392               		.loc 1 2506 18 is_stmt 0 view .LVU1475
 7393 1de4 8418      		sub r8,r4
 7394 1de6 9508      		sbc r9,r5
 7395 1de8 A608      		sbc r10,r6
 7396 1dea B708      		sbc r11,r7
 7397               	.LVL525:
2506:fat.c         ****     }
 7398               		.loc 1 2506 18 view .LVU1476
 7399 1dec 00C0      		rjmp .L508
 7400               	.LBE142:
 7401               		.cfi_endproc
 7402               	.LFE30:
 7404               		.local	fat_dir_handles
 7405               		.comm	fat_dir_handles,98,1
 7406               		.local	fat_file_handles
 7407               		.comm	fat_file_handles,51,1
 7408               		.local	fat_fs_handles
 7409               		.comm	fat_fs_handles,28,1
 7410               	.Letext0:
 7411               		.file 2 "/usr/avr/include/stdint.h"
 7412               		.file 3 "sd_raw_config.h"
 7413               		.file 4 "partition.h"
 7414               		.file 5 "fat_config.h"
 7415               		.file 6 "fat.h"
 7416               		.file 7 "byteordering.h"
 7417               		.file 8 "/usr/avr/include/string.h"
 7418               		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fat.c
     /tmp/ccfV6TJN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfV6TJN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfV6TJN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfV6TJN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfV6TJN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfV6TJN.s:11     .text:0000000000000000 fat_clear_cluster_callback
     /tmp/ccfV6TJN.s:33     .text:0000000000000006 fat_calc_83_checksum
     /tmp/ccfV6TJN.s:81     .text:0000000000000024 fat_get_fs_free_16_callback
     /tmp/ccfV6TJN.s:223    .text:000000000000007a fat_dir_entry_read_callback
     /tmp/ccfV6TJN.s:707    .text:0000000000000286 fat_get_next_cluster
     /tmp/ccfV6TJN.s:829    .text:00000000000002fa fat_free_clusters
     /tmp/ccfV6TJN.s:1067   .text:00000000000003de fat_append_clusters
     /tmp/ccfV6TJN.s:1489   .text:00000000000005a2 fat_cluster_offset
     /tmp/ccfV6TJN.s:1563   .text:00000000000005de fat_clear_cluster
     /tmp/ccfV6TJN.s:1683   .text:0000000000000650 fat_find_offset_for_dir_entry.isra.4.part.5
     /tmp/ccfV6TJN.s:2096   .text:00000000000007fe fat_write_dir_entry
     /tmp/ccfV6TJN.s:2724   .text:0000000000000a92 fat_open
     /tmp/ccfV6TJN.s:7407   .bss:0000000000000095 fat_fs_handles
     /tmp/ccfV6TJN.s:3324   .text:0000000000000daa fat_close
     /tmp/ccfV6TJN.s:3351   .text:0000000000000db6 fat_open_file
     /tmp/ccfV6TJN.s:7405   .bss:0000000000000062 fat_file_handles
     /tmp/ccfV6TJN.s:3433   .text:0000000000000e14 fat_close_file
     /tmp/ccfV6TJN.s:3460   .text:0000000000000e20 fat_read_file
     /tmp/ccfV6TJN.s:3980   .text:000000000000103a fat_write_file
     /tmp/ccfV6TJN.s:4597   .text:00000000000012c0 fat_resize_file
     /tmp/ccfV6TJN.s:5041   .text:00000000000014a4 fat_seek_file
     /tmp/ccfV6TJN.s:5218   .text:000000000000154e fat_open_dir
                             .bss:0000000000000000 fat_dir_handles
     /tmp/ccfV6TJN.s:5338   .text:00000000000015b4 fat_close_dir
     /tmp/ccfV6TJN.s:5365   .text:00000000000015c0 fat_reset_dir
     /tmp/ccfV6TJN.s:5409   .text:00000000000015da fat_read_dir
     /tmp/ccfV6TJN.s:5793   .text:0000000000001756 fat_get_dir_entry_of_path
     /tmp/ccfV6TJN.s:6085   .text:0000000000001870 fat_create_file
     /tmp/ccfV6TJN.s:6285   .text:000000000000192c fat_delete_file
     /tmp/ccfV6TJN.s:6514   .text:0000000000001a1c fat_move_file
     /tmp/ccfV6TJN.s:6729   .text:0000000000001b08 fat_create_dir
     /tmp/ccfV6TJN.s:7083   .text:0000000000001c90 fat_get_fs_size
     /tmp/ccfV6TJN.s:7133   .text:0000000000001cc0 fat_get_fs_free

UNDEFINED SYMBOLS
read16
read32
__umulhisi3
__udivmodhi4
__divmodhi4
memset
strrchr
memcpy
write16
write32
__udivmodsi4
__mulsi3
strchr
strncmp
strcmp
strncpy
__muluhisi3
__do_copy_data
__do_clear_bss
